(()=>{var t={178:t=>{const e=function(t,e){for(var i=e.split(","),n=t.className,o=0;o<i.length;o++){var s=i[o];n=n.indexOf(s)<0?n+" "+s:n}t.className=n},i=function(t,e){for(var i=e.split(","),n=t.className,o=0;o<i.length;o++){var s=new RegExp(i[o],"im");n=n.replace(s,"")}t.className=n};t.exports={hasClass:function(t,e){return new RegExp(e+"\b","im").test(t.className)},addClass:e,removeClass:i,display:function(t,n){i(t,"bn--block, bn--flex, bn--grid, bn--hide, bn--none"),e(t,"bn--"+n)}}}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n](o,o.exports,i),o.exports}(()=>{"use strict";var t=i(178),e=function(t,e){return this.root=t,this.options={tick:!1,ended:!1,urgent:!1,live:!1},this.config=Object.assign({type:"dates",interval:null,start_date:null,end_date:null,urgent_date:null,headline:"",support_text:"",hideOnEnd:!1,aggregateDays:!1},e),this.dates={now:null,start:null,end:null,urgent:null},this.fragments={d:null,H:null,i:null,s:null},this.interval=null,this.init(),this};e.prototype.init=function(){t.addClass(this.root,"initialized"),this.initDates(),this.initFragments(),this.initClock(),this.start()},e.prototype.initDates=function(){if(this.dates.now=new Date,"dates"===this.config.type&&(this.dates.start=new Date(this.config.start_date),this.dates.end=new Date(this.config.end_date),this.dates.urgent=new Date(this.config.urgent_date)),"relative"===this.config.type){var t=new Date;t.setHours(0),t.setMinutes(0),t.setSeconds(0);var e=new Date;e.setHours(23),e.setMinutes(59),e.setSeconds(59),this.dates.start=new Date(t),this.dates.end=new Date(e),this.dates.urgent=new Date(e)}if("interval"===this.config.type&&this.config.interval){var i,n,o=["bn",this.root.id].join("-"),s=("; "+document.cookie).split(o+"="),a=2===s.length?s.pop().split(";").shift():null;if(a){var r=a.split("/");i=new Date(parseInt(r[0],10)),n=new Date(parseInt(r[1],10))}else i=new Date,n=new Date(Date.now()+60*this.config.interval*1e3),document.cookie=o+"="+[i.getTime(),n.getTime()].join("/")+"; SameSite=Lax; path=/";this.dates.start=new Date(i),this.dates.end=new Date(n),this.dates.urgent=new Date(n)}this.options.live=!0,this.notStartedYet()?(this.options.tick=!1,this.options.live=!1,this.hideAssociate("not-started"),this.hide()):this.limitReached()&&(this.options.tick=!1,this.options.ended=!0,this.hideOnEnd())},e.prototype.initFragments=function(){this.fragments={d:this.root.querySelector(".beon-clock__fragment-d, .bn-clock__frag-d"),H:this.root.querySelector(".beon-clock__fragment-H, .bn-clock__frag-H"),i:this.root.querySelector(".beon-clock__fragment-i, .bn-clock__frag-i"),s:this.root.querySelector(".beon-clock__fragment-s, .bn-clock__frag-s")},this.config.aggregateDays&&(t.addClass(this.root,"beon-clock--without-days"),this.fragments.d.style.display="none")},e.prototype.initClock=function(){this.updateFragments()},e.prototype.diff=function(t,e){var i,n,o;return o={d:0,H:0,i:0,s:0},this.limitReached()?(this.end(),this.dates.diff=o,o):((i=t.getTime()-e.getTime())>0&&(n=i/1e3,o.d=Math.floor(n/86400),o.H=Math.floor((n-86400*o.d)/3600),o.i=Math.floor((n-86400*o.d-3600*o.H)/60),o.s=Math.floor(n-86400*o.d-3600*o.H-60*o.i),this.config.aggregateDays&&(o.H=o.H+24*o.d,o.d=0)),this.dates.diff=o,o)},e.prototype.notStartedYet=function(){var t=this.dates.now.getTime()/1e3+100;return this.dates.start.getTime()/1e3>t},e.prototype.limitReached=function(){return this.dates.now.getTime()>this.dates.end.getTime()},e.prototype.updateNow=function(){this.dates.now=new Date},e.prototype.urgentReached=function(){return this.dates.urgent?this.dates.now.getTime()>this.dates.urgent.getTime():0},e.prototype.updateFragments=function(){for(var t=Object.entries(this.diff(this.dates.end,this.dates.now)),e=0;e<t.length;e++){var[i,n]=t[e];this.setFragment(i,n)}},e.prototype.setFragment=function(t,e){var i;i=this.config.aggregateDays&&"H"===t||!this.config.aggregateDays&&"d"===t?e.toString().length<=2?this.pad(e,2,"0"):e:this.pad(e,2,"0"),this.fragments[t].innerText=i},e.prototype.tick=function(){if(!this.options.tick)return this.stop();this.updateNow(),this.updateFragments(),!this.options.urgent&&this.urgentReached()&&this.urgent(),this.limitReached()&&this.end()},e.prototype.start=function(){if(!this.options.live)return this.stop();this.interval=window.setInterval(this.tick.bind(this),1e3),this.options.tick=!0},e.prototype.stop=function(){window.clearInterval(this.interval),this.options.tick=!1},e.prototype.end=function(){this.stop(),this.ended=!0,t.addClass(this.root,"ended"),this.hideOnEnd()},e.prototype.urgent=function(){this.options.urgent=!0,t.addClass(this.root,"urgent")},e.prototype.hideOnEnd=function(){this.ended&&this.config.hideOnEnd&&(this.hideAssociate("ended"),this.hide(),t.addClass(this.root,"bn--clock-ended"))},e.prototype.getAssociate=function(){var t=this.root.getAttribute("data-associate-id"),e=t?document.getElementById(t):null;return this.associate=e,this.associate},e.prototype.hasAssociate=function(){return this.getAssociate(),!!this.associate},e.prototype.hideAssociate=function(e){e=e||"not-started",this.hasAssociate()&&(this.hide(this.getAssociate()),t.addClass(this.getAssociate(),"bn--clock-"+e))},e.prototype.hide=function(e){var i=e||this.root;t.display(i,"none")},e.prototype.pad=function(t,e,i){return e=t.length>e?t.pength:e,(t=i.repeat(e)+t).substr(t.length-e)};const n=e;var o=function(){this.componentRootSelector=".beon-clock",this.initComponents(),this.bindEvents()};o.prototype.bindEvents=function(){document.addEventListener("DOMContentLoaded",this.initComponents.bind(this)),document.addEventListener("beon.buddy.elements.handle.item.inject.success",this.initComponentFromInjection.bind(this)),document.addEventListener("beon.buddy.inject.after",this.initComponentFromInjection.bind(this))},o.prototype.initComponents=function(){var t=document.querySelectorAll(this.componentRootSelector+":not(.initialized)");Array.prototype.slice.call(t).forEach(function(t){this.initComponent(t)}.bind(this))},o.prototype.initComponentFromInjection=function(t){var e=t.detail.container.querySelector(this.componentRootSelector+":not(.initialized)");e&&("loading"===document.readyState?document.addEventListener("DOMContentLoaded",function(){this.initComponent(e)}.bind(this)):this.initComponent(e))},o.prototype.initComponent=function(t){try{window.beon_init_log=window.beon_init_log||[];var e=t.getAttribute("data-config"),i=(t.id,JSON.parse(e));new n(t,i)}catch(t){console.log("failed to build component "+this.componentRootSelector,t)}},window&&(window.BeonClockInitializer=o)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,