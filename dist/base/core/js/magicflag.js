(()=>{"use strict";var e=function(e,n){if(this.root=e,window.beonevents&&window.beonevents[n.id])return;const[t,i,o,a,s,r,d,c,l,m,p,u]=n;return this.config=Object.assign({id:void 0,type:"flag",variant:"seal",position:"45deg",className:void 0,innerHTML:void 0,sealSrc:void 0,style:void 0,itemQuery:void 0,containerQuery:"self",placementOperation:"append",itemsIds:[]},{id:t,type:i,variant:o,position:a,className:s,innerHTML:r,sealSrc:d,style:c,itemQuery:l,containerQuery:m,placementOperation:p,itemsIds:u}),this.init(),this};e.prototype.init=function(){var e;this.root.className=this.root.className+" initialized",this.add(this.config).then((e=>{window.beonevents&&window.beonevents[this.config.id]||(window.beonevents=window.beonevents||{},window.beonevents[this.config.id]=!0)})),document.addEventListener("beon.buddy.slider.init.after",(n=>{window.clearTimeout(e),e=window.setTimeout((()=>{console.log("flags add after slider initialize"),this.add(this.config,document)}),500)})),window.addEventListener("hashchange",(n=>{window.clearTimeout(e),e=window.setTimeout((()=>{console.log("flags add after window change"),this.add(this.config,document)}),1e3)}))},e.prototype.add=function(e,n){return new Promise(function(t){let i;n=n||document,"bullet"===e.variant&&(i=e.innerHTML);for(var o=[],a=0;a<e.itemsIds.length;a++)o.push(new Promise((t=>{var o=e.itemsIds[a];let s,r;Array.isArray(o)?[s,...r]=o:s=o;var d=e.itemQuery.replace(/{id}/gi,s),c=n.querySelectorAll(d);if(c.length){if("dynamic"===e.type){const[n,t]=r;n&&(e.innerHTML=i?i.replace("{x}",` <span class="dynamic_info">${n}</span> `):n),e.className+=t||""}c.length&&c.forEach((n=>{var t="self"===e.containerQuery?n:n.querySelector(e.containerQuery);t||(t=n),this.append(t,e)})),t()}else t()})));Promise.all(o).then((e=>t(e)))}.bind(this))},e.prototype.append=function(e,n){if(!e.querySelector(".beon-tags.beon-tag__"+n.id)){var t=document.createElement("div"),i=["beon-tags","beon-tag__"+n.id,"beon-tag__"+n.position,"beon-tag__"+n.type,"beon-tag__"+n.type+"--"+n.variant,n.className],o=n.style;n.sealSrc&&(o+="background-image: url("+n.sealSrc+");"),t.className=i.join(" "),t.setAttribute("style",o),t.innerHTML=n.innerHTML,"replace"===n.placementOperation&&(e.innerHTML=""),e.appendChild(t)}};const n=e;var t=function(){this.componentRootSelector="meta[name^=beon-magicflag]",this.initComponents(),this.bindEvents()};t.prototype.bindEvents=function(){document.addEventListener("DOMContentLoaded",this.initComponents.bind(this)),document.addEventListener("beon.buddy.elements.handle.item.inject.success",this.initComponentFromInjection.bind(this)),document.addEventListener("beon.buddy.inject.after",this.initComponentFromInjection.bind(this)),this.initComponents()},t.prototype.initComponents=function(){var e=document.querySelectorAll(this.componentRootSelector+":not(.initialized)");Array.prototype.slice.call(e).forEach(function(e){this.initComponent(e)}.bind(this))},t.prototype.initComponentFromInjection=function(e){var n=e.detail.container.querySelector(this.componentRootSelector+":not(.initialized)");n&&("loading"===document.readyState?document.addEventListener("DOMContentLoaded",function(){this.initComponent(n)}.bind(this)):this.initComponent(n))},t.prototype.initComponent=function(e){try{window.beon_init_log=window.beon_init_log||[];var t=e.getAttribute("data-config"),i=e.parentNode.id,o=JSON.parse(t);if(window.beon_init_log.indexOf(i)>-1)return;window.beon_init_log.push(i),new Promise((function(t,i){t(new n(e,o))}))}catch(e){console.log("failed to build component "+this.componentRootSelector,e)}},window&&(window.BeonMagicFlagInitializer=t)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,