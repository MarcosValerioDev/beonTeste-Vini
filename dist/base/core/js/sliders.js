(()=>{var t={148:()=>{Object.keys||(Object.keys=function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e})},903:()=>{"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)})}},e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}(()=>{"use strict";n(148),n(903);var t=window,e=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.msRequestAnimationFrame||function(t){return setTimeout(t,16)},i=window,o=i.cancelAnimationFrame||i.mozCancelAnimationFrame||function(t){clearTimeout(t)};function r(){for(var t,e,n,i=arguments[0]||{},o=1,r=arguments.length;o<r;o++)if(null!==(t=arguments[o]))for(e in t)i!==(n=t[e])&&void 0!==n&&(i[e]=n);return i}function a(t){return["true","false"].indexOf(t)>=0?JSON.parse(t):t}function s(t,e,n,i){if(i)try{t.setItem(e,n)}catch(t){}return n}function l(){var t=document,e=t.body;return e||((e=t.createElement("body")).fake=!0),e}var u=document.documentElement;function c(t){var e="";return t.fake&&(e=u.style.overflow,t.style.background="",t.style.overflow=u.style.overflow="hidden",u.appendChild(t)),e}function d(t,e){t.fake&&(t.remove(),u.style.overflow=e,u.offsetHeight)}function f(t,e,n,i){"insertRule"in t?t.insertRule(e+"{"+n+"}",i):t.addRule(e,n,i)}function p(t){return("insertRule"in t?t.cssRules:t.rules).length}function v(t,e,n){for(var i=0,o=t.length;i<o;i++)e.call(n,t[i],i)}var h="classList"in document.createElement("_"),m=h?function(t,e){return t.classList.contains(e)}:function(t,e){return t.className.indexOf(e)>=0},y=h?function(t,e){m(t,e)||t.classList.add(e)}:function(t,e){m(t,e)||(t.className+=" "+e)},g=h?function(t,e){m(t,e)&&t.classList.remove(e)}:function(t,e){m(t,e)&&(t.className=t.className.replace(e,""))};function b(t,e){return t.hasAttribute(e)}function x(t,e){return t.getAttribute(e)}function w(t){return void 0!==t.item}function C(t,e){if(t=w(t)||t instanceof Array?t:[t],"[object Object]"===Object.prototype.toString.call(e))for(var n=t.length;n--;)for(var i in e)t[n].setAttribute(i,e[i])}function T(t,e){t=w(t)||t instanceof Array?t:[t];for(var n=(e=e instanceof Array?e:[e]).length,i=t.length;i--;)for(var o=n;o--;)t[i].removeAttribute(e[o])}function M(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e}function E(t,e){"none"!==t.style.display&&(t.style.display="none")}function S(t,e){"none"===t.style.display&&(t.style.display="")}function O(t){return"none"!==window.getComputedStyle(t).display}function A(t){if("string"==typeof t){var e=[t],n=t.charAt(0).toUpperCase()+t.substr(1);["Webkit","Moz","ms","O"].forEach((function(i){"ms"===i&&"transform"!==t||e.push(i+n)})),t=e}for(var i=document.createElement("fakeelement"),o=(t.length,0);o<t.length;o++){var r=t[o];if(void 0!==i.style[r])return r}return!1}function L(t,e){var n=!1;return/^Webkit/.test(t)?n="webkit"+e+"End":/^O/.test(t)?n="o"+e+"End":t&&(n=e.toLowerCase()+"end"),n}var N=!1;try{var B=Object.defineProperty({},"passive",{get:function(){N=!0}});window.addEventListener("test",null,B)}catch(t){}var P=!!N&&{passive:!0};function z(t,e,n){for(var i in e){var o=["touchstart","touchmove"].indexOf(i)>=0&&!n&&P;t.addEventListener(i,e[i],o)}}function D(t,e){for(var n in e){var i=["touchstart","touchmove"].indexOf(n)>=0&&P;t.removeEventListener(n,e[n],i)}}function H(){return{topics:{},on:function(t,e){this.topics[t]=this.topics[t]||[],this.topics[t].push(e)},off:function(t,e){if(this.topics[t])for(var n=0;n<this.topics[t].length;n++)if(this.topics[t][n]===e){this.topics[t].splice(n,1);break}},emit:function(t,e){e.type=t,this.topics[t]&&this.topics[t].forEach((function(n){n(e,t)}))}}}var k=function(t){t=r({container:".slider",mode:"carousel",axis:"horizontal",items:1,gutter:0,edgePadding:0,fixedWidth:!1,autoWidth:!1,viewportMax:!1,slideBy:1,center:!1,controls:!0,controlsPosition:"top",controlsText:["prev","next"],controlsContainer:!1,prevButton:!1,nextButton:!1,nav:!0,navPosition:"top",navContainer:!1,navAsThumbnails:!1,arrowKeys:!1,speed:300,autoplay:!1,autoplayPosition:"top",autoplayTimeout:5e3,autoplayDirection:"forward",autoplayText:["start","stop"],autoplayHoverPause:!1,autoplayButton:!1,autoplayButtonOutput:!0,autoplayResetOnVisibility:!0,animateIn:"tns-fadeIn",animateOut:"tns-fadeOut",animateNormal:"tns-normal",animateDelay:!1,loop:!0,rewind:!1,autoHeight:!1,responsive:!1,lazyload:!1,lazyloadSelector:".tns-lazy-img",touch:!0,mouseDrag:!1,swipeAngle:15,nested:!1,preventActionWhenRunning:!1,preventScrollOnTouch:!1,freezable:!0,onInit:!1,useLocalStorage:!0},t||{});var n=document,i=window,u={ENTER:13,SPACE:32,LEFT:37,RIGHT:39},h={},w=t.useLocalStorage;if(w){var N=navigator.userAgent,B=new Date;try{(h=i.localStorage)?(h.setItem(B,B),w=h.getItem(B)==B,h.removeItem(B)):w=!1,w||(h={})}catch(t){w=!1}w&&(h.tnsApp&&h.tnsApp!==N&&["tC","tPL","tMQ","tTf","t3D","tTDu","tTDe","tADu","tADe","tTE","tAE"].forEach((function(t){h.removeItem(t)})),localStorage.tnsApp=N)}var P=h.tC?a(h.tC):s(h,"tC",function(){var t=document,e=l(),n=c(e),i=t.createElement("div"),o=!1;e.appendChild(i);try{for(var r,a="(10px * 10)",s=["calc"+a,"-moz-calc"+a,"-webkit-calc"+a],u=0;u<3;u++)if(r=s[u],i.style.width=r,100===i.offsetWidth){o=r.replace(a,"");break}}catch(t){}return e.fake?d(e,n):i.remove(),o}(),w),I=h.tPL?a(h.tPL):s(h,"tPL",function(){var t,e=document,n=l(),i=c(n),o=e.createElement("div"),r=e.createElement("div"),a="";o.className="tns-t-subp2",r.className="tns-t-ct";for(var s=0;s<70;s++)a+="<div></div>";return r.innerHTML=a,o.appendChild(r),n.appendChild(o),t=Math.abs(o.getBoundingClientRect().left-r.children[67].getBoundingClientRect().left)<2,n.fake?d(n,i):o.remove(),t}(),w),R=h.tMQ?a(h.tMQ):s(h,"tMQ",function(){var t,e=document,n=l(),i=c(n),o=e.createElement("div"),r=e.createElement("style"),a="@media all and (min-width:1px){.tns-mq-test{position:absolute}}";return r.type="text/css",o.className="tns-mq-test",n.appendChild(r),n.appendChild(o),r.styleSheet?r.styleSheet.cssText=a:r.appendChild(e.createTextNode(a)),t=window.getComputedStyle?window.getComputedStyle(o).position:o.currentStyle.position,n.fake?d(n,i):o.remove(),"absolute"===t}(),w),W=h.tTf?a(h.tTf):s(h,"tTf",A("transform"),w),j=h.t3D?a(h.t3D):s(h,"t3D",function(t){if(!t)return!1;if(!window.getComputedStyle)return!1;var e,n=document,i=l(),o=c(i),r=n.createElement("p"),a=t.length>9?"-"+t.slice(0,-9).toLowerCase()+"-":"";return a+="transform",i.insertBefore(r,null),r.style[t]="translate3d(1px,1px,1px)",e=window.getComputedStyle(r).getPropertyValue(a),i.fake?d(i,o):r.remove(),void 0!==e&&e.length>0&&"none"!==e}(W),w),F=h.tTDu?a(h.tTDu):s(h,"tTDu",A("transitionDuration"),w),q=h.tTDe?a(h.tTDe):s(h,"tTDe",A("transitionDelay"),w),V=h.tADu?a(h.tADu):s(h,"tADu",A("animationDuration"),w),G=h.tADe?a(h.tADe):s(h,"tADe",A("animationDelay"),w),Q=h.tTE?a(h.tTE):s(h,"tTE",L(F,"Transition"),w),X=h.tAE?a(h.tAE):s(h,"tAE",L(V,"Animation"),w),Y=i.console&&"function"==typeof i.console.warn,_=["container","controlsContainer","prevButton","nextButton","navContainer","autoplayButton"],K={};if(_.forEach((function(e){if("string"==typeof t[e]){var i=t[e],o=n.querySelector(i);if(K[e]=i,!o||!o.nodeName)return void(Y&&console.warn("Can't find",t[e]));t[e]=o}})),!(t.container.children.length<1)){var J=t.responsive,U=t.nested,$="carousel"===t.mode;if(J){0 in J&&(t=r(t,J[0]),delete J[0]);var Z={};for(var tt in J){var et=J[tt];et="number"==typeof et?{items:et}:et,Z[tt]=et}J=Z,Z=null}if($||function t(e){for(var n in e)$||("slideBy"===n&&(e[n]="page"),"edgePadding"===n&&(e[n]=!1),"autoHeight"===n&&(e[n]=!1)),"responsive"===n&&t(e[n])}(t),!$){t.axis="horizontal",t.slideBy="page",t.edgePadding=!1;var nt=t.animateIn,it=t.animateOut,ot=t.animateDelay,rt=t.animateNormal}var at,st,lt="horizontal"===t.axis,ut=n.createElement("div"),ct=n.createElement("div"),dt=t.container,ft=dt.parentNode,pt=dt.outerHTML,vt=dt.children,ht=vt.length,mt=Ln(),yt=!1;J&&Jn(),$&&(dt.className+=" tns-vpfix");var gt,bt,xt,wt,Ct,Tt,Mt,Et=t.autoWidth,St=Dn("fixedWidth"),Ot=Dn("edgePadding"),At=Dn("gutter"),Lt=Pn(),Nt=Dn("center"),Bt=Et?1:Math.floor(Dn("items")),Pt=Dn("slideBy"),zt=t.viewportMax||t.fixedWidthViewportWidth,Dt=Dn("arrowKeys"),Ht=Dn("speed"),kt=t.rewind,It=!kt&&t.loop,Rt=Dn("autoHeight"),Wt=Dn("controls"),jt=Dn("controlsText"),Ft=Dn("nav"),qt=Dn("touch"),Vt=Dn("mouseDrag"),Gt=Dn("autoplay"),Qt=Dn("autoplayTimeout"),Xt=Dn("autoplayText"),Yt=Dn("autoplayHoverPause"),_t=Dn("autoplayResetOnVisibility"),Kt=(Mt=document.createElement("style"),document.querySelector("head").appendChild(Mt),Mt.sheet?Mt.sheet:Mt.styleSheet),Jt=t.lazyload,Ut=(t.lazyloadSelector,[]),$t=It?(Ct=function(){if(Et||St&&!zt)return ht-1;var e=St?"fixedWidth":"items",n=[];if((St||t[e]<ht)&&n.push(t[e]),J)for(var i in J){var o=J[i][e];o&&(St||o<ht)&&n.push(o)}return n.length||n.push(0),Math.ceil(St?zt/Math.min.apply(null,n):Math.max.apply(null,n))}(),Tt=$?Math.ceil((5*Ct-ht)/2):4*Ct-ht,Tt=Math.max(Ct,Tt),zn("edgePadding")?Tt+1:Tt):0,Zt=$?ht+2*$t:ht+$t,te=!(!St&&!Et||It),ee=St?Ti():null,ne=!$||!It,ie=lt?"left":"top",oe="",re="",ae=St?function(){return Nt&&!It?ht-1:Math.ceil(-ee/(St+At))}:Et?function(){for(var t=Zt;t--;)if(gt[t]>=-ee)return t}:function(){return Nt&&$&&!It?ht-1:It||$?Math.max(0,Zt-Math.ceil(Bt)):Zt-1},se=Sn(Dn("startIndex")),le=se,ue=(En(),0),ce=Et?null:ae(),de=t.preventActionWhenRunning,fe=t.swipeAngle,pe=!fe||"?",ve=!1,he=t.onInit,me=new H,ye=" tns-slider tns-"+t.mode,ge=dt.id||(wt=window.tnsId,window.tnsId=wt?wt+1:1,"tns"+window.tnsId),be=Dn("disable"),xe=!1,we=t.freezable,Ce=!(!we||Et)&&Kn(),Te=!1,Me={click:Pi,keydown:function(t){t=ji(t);var e=[u.LEFT,u.RIGHT].indexOf(t.keyCode);e>=0&&(0===e?Qe.disabled||Pi(t,-1):Xe.disabled||Pi(t,1))}},Ee={click:function(t){if(ve){if(de)return;Ni()}for(var e=Fi(t=ji(t));e!==Je&&!b(e,"data-nav");)e=e.parentNode;if(b(e,"data-nav")){var n=tn=Number(x(e,"data-nav")),i=St||Et?n*ht/$e:n*Bt;Bi(ze?n:Math.min(Math.ceil(i),ht-1),t),en===n&&(ln&&Ii(),tn=-1)}},keydown:function(t){t=ji(t);var e=n.activeElement;if(b(e,"data-nav")){var i=[u.LEFT,u.RIGHT,u.ENTER,u.SPACE].indexOf(t.keyCode),o=Number(x(e,"data-nav"));i>=0&&(0===i?o>0&&Wi(Ke[o-1]):1===i?o<$e-1&&Wi(Ke[o+1]):(tn=o,Bi(o,t)))}}},Se={mouseover:function(){ln&&(Di(),un=!0)},mouseout:function(){un&&(zi(),un=!1)}},Oe={visibilitychange:function(){n.hidden?ln&&(Di(),dn=!0):dn&&(zi(),dn=!1)}},Ae={keydown:function(t){t=ji(t);var e=[u.LEFT,u.RIGHT].indexOf(t.keyCode);e>=0&&Pi(t,0===e?-1:1)}},Le={touchstart:Qi,touchmove:Xi,touchend:_i,touchcancel:_i},Ne={mousedown:Qi,mousemove:Xi,mouseup:_i,mouseleave:_i},Be=zn("controls"),Pe=zn("nav"),ze=!!Et||t.navAsThumbnails,De=zn("autoplay"),He=zn("touch"),ke=zn("mouseDrag"),Ie="tns-slide-active",Re="tns-complete",We={load:function(t){ri(Fi(t))},error:function(t){var e;e=Fi(t),y(e,"failed"),ai(e)}},je="force"===t.preventScrollOnTouch;if(Be)var Fe,qe,Ve=t.controlsContainer,Ge=t.controlsContainer?t.controlsContainer.outerHTML:"",Qe=t.prevButton,Xe=t.nextButton,Ye=t.prevButton?t.prevButton.outerHTML:"",_e=t.nextButton?t.nextButton.outerHTML:"";if(Pe)var Ke,Je=t.navContainer,Ue=t.navContainer?t.navContainer.outerHTML:"",$e=Et?ht:Ji(),Ze=0,tn=-1,en=An(),nn=en,on="tns-nav-active",rn="Carousel Page ",an=" (Current Slide)";if(De)var sn,ln,un,cn,dn,fn="forward"===t.autoplayDirection?1:-1,pn=t.autoplayButton,vn=t.autoplayButton?t.autoplayButton.outerHTML:"",hn=["<span class='tns-visually-hidden'>"," animation</span>"];if(He||ke)var mn,yn,gn={},bn={},xn=!1,wn=lt?function(t,e){return t.x-e.x}:function(t,e){return t.y-e.y};Et||Mn(be||Ce),W&&(ie=W,oe="translate",j?(oe+=lt?"3d(":"3d(0px, ",re=lt?", 0px, 0px)":", 0px)"):(oe+=lt?"X(":"Y(",re=")")),$&&(dt.className=dt.className.replace("tns-vpfix","")),function(){if(zn("gutter"),ut.className="tns-outer",ct.className="tns-inner",ut.id=ge+"-ow",ct.id=ge+"-iw",""===dt.id&&(dt.id=ge),ye+=I||Et?" tns-subpixel":" tns-no-subpixel",ye+=P?" tns-calc":" tns-no-calc",Et&&(ye+=" tns-autowidth"),ye+=" tns-"+t.axis,dt.className+=ye,$?((at=n.createElement("div")).id=ge+"-mw",at.className="tns-ovh",ut.appendChild(at),at.appendChild(ct)):ut.appendChild(ct),Rt&&((at||ct).className+=" tns-ah"),ft.insertBefore(ut,dt),ct.appendChild(dt),v(vt,(function(t,e){y(t,"tns-item"),t.id||(t.id=ge+"-item"+e),!$&&rt&&y(t,rt),C(t,{"aria-hidden":"true",tabindex:"-1"})})),$t){for(var e=n.createDocumentFragment(),i=n.createDocumentFragment(),o=$t;o--;){var r=o%ht,a=vt[r].cloneNode(!0);if(T(a,"id"),i.insertBefore(a,i.firstChild),$){var s=vt[ht-1-r].cloneNode(!0);T(s,"id"),e.appendChild(s)}}dt.insertBefore(e,dt.firstChild),dt.appendChild(i),vt=dt.children}}(),function(){if(!$)for(var e=se,n=se+Math.min(ht,Bt);e<n;e++){var o=vt[e];o.style.left=100*(e-se)/Bt+"%",y(o,nt),g(o,rt)}if(lt&&(I||Et?(f(Kt,"#"+ge+" > .tns-item","font-size:"+i.getComputedStyle(vt[0]).fontSize+";",p(Kt)),f(Kt,"#"+ge,"font-size:0;",p(Kt))):$&&v(vt,(function(t,e){t.style.marginLeft=function(t){return P?P+"("+100*t+"% / "+Zt+")":100*t/Zt+"%"}(e)}))),R){if(F){var r=at&&t.autoHeight?jn(t.speed):"";f(Kt,"#"+ge+"-mw",r,p(Kt))}r=Hn(t.edgePadding,t.gutter,t.fixedWidth,t.speed,t.autoHeight),f(Kt,"#"+ge+"-iw",r,p(Kt)),$&&(r=lt&&!Et?"width:"+kn(t.fixedWidth,t.gutter,t.items)+";":"",F&&(r+=jn(Ht)),f(Kt,"#"+ge,r,p(Kt))),r=lt&&!Et?In(t.fixedWidth,t.gutter,t.items):"",t.gutter&&(r+=Rn(t.gutter)),$||(F&&(r+=jn(Ht)),V&&(r+=Fn(Ht))),r&&f(Kt,"#"+ge+" > .tns-item",r,p(Kt))}else di(),ct.style.cssText=Hn(Ot,At,St,Rt),$&&lt&&!Et&&(dt.style.width=kn(St,At,Bt)),r=lt&&!Et?In(St,At,Bt):"",At&&(r+=Rn(At)),r&&f(Kt,"#"+ge+" > .tns-item",r,p(Kt));if(J&&R)for(var a in J){a=parseInt(a);var s=J[a],l=(r="",""),u="",c="",d="",h=Et?null:Dn("items",a),m=Dn("fixedWidth",a),b=Dn("speed",a),x=Dn("edgePadding",a),w=Dn("autoHeight",a),C=Dn("gutter",a);F&&at&&Dn("autoHeight",a)&&"speed"in s&&(l="#"+ge+"-mw{"+jn(b)+"}"),("edgePadding"in s||"gutter"in s)&&(u="#"+ge+"-iw{"+Hn(x,C,m,b,w)+"}"),$&&lt&&!Et&&("fixedWidth"in s||"items"in s||St&&"gutter"in s)&&(c="width:"+kn(m,C,h)+";"),F&&"speed"in s&&(c+=jn(b)),c&&(c="#"+ge+"{"+c+"}"),("fixedWidth"in s||St&&"gutter"in s||!$&&"items"in s)&&(d+=In(m,C,h)),"gutter"in s&&(d+=Rn(C)),!$&&"speed"in s&&(F&&(d+=jn(b)),V&&(d+=Fn(b))),d&&(d="#"+ge+" > .tns-item{"+d+"}"),(r=l+u+c+d)&&Kt.insertRule("@media (min-width: "+a/16+"em) {"+r+"}",Kt.cssRules.length)}}(),qn();var Cn=It?$?function(){var t=ue,e=ce;t+=Pt,e-=Pt,Ot?(t+=1,e-=1):St&&(Lt+At)%(St+At)&&(e-=1),$t&&(se>e?se-=ht:se<t&&(se+=ht))}:function(){if(se>ce)for(;se>=ue+ht;)se-=ht;else if(se<ue)for(;se<=ce-ht;)se+=ht}:function(){se=Math.max(ue,Math.min(ce,se))},Tn=$?function(){var t,e,n,i,o,r,a,s,l,u,c;wi(dt,""),F||!Ht?(Si(),Ht&&O(dt)||Ni()):(t=dt,e=ie,n=oe,i=re,o=Mi(),r=Ht,a=Ni,s=Math.min(r,10),l=o.indexOf("%")>=0?"%":"px",o=o.replace(l,""),u=Number(t.style[e].replace(n,"").replace(i,"").replace(l,"")),c=(o-u)/r*s,setTimeout((function o(){r-=s,u+=c,t.style[e]=n+u+l+i,r>0?setTimeout(o,s):a()}),s)),lt||Ki()}:function(){Ut=[];var t={};t[Q]=t[X]=Ni,D(vt[le],t),z(vt[se],t),Oi(le,nt,it,!0),Oi(se,rt,nt),Q&&X&&Ht&&O(dt)||Ni()};return{version:"2.9.2",getInfo:$i,events:me,goTo:Bi,play:function(){Gt&&!ln&&(ki(),cn=!1)},pause:function(){ln&&(Ii(),cn=!0)},isOn:yt,updateSliderHeight:pi,refresh:qn,destroy:function(){if(Kt.disabled=!0,Kt.ownerNode&&Kt.ownerNode.remove(),D(i,{resize:Yn}),Dt&&D(n,Ae),Ve&&D(Ve,Me),Je&&D(Je,Ee),D(dt,Se),D(dt,Oe),pn&&D(pn,{click:Ri}),Gt&&clearInterval(sn),$&&Q){var e={};e[Q]=Ni,D(dt,e)}qt&&D(dt,Le),Vt&&D(dt,Ne);var o=[pt,Ge,Ye,_e,Ue,vn];for(var r in _.forEach((function(e,n){var i="container"===e?ut:t[e];if("object"==typeof i){var r=!!i.previousElementSibling&&i.previousElementSibling,a=i.parentNode;i.outerHTML=o[n],t[e]=r?r.nextElementSibling:a.firstElementChild}})),_=nt=it=ot=rt=lt=ut=ct=dt=ft=pt=vt=ht=st=mt=Et=St=Ot=At=Lt=Bt=Pt=zt=Dt=Ht=kt=It=Rt=Kt=Jt=gt=Ut=$t=Zt=te=ee=ne=ie=oe=re=ae=se=le=ue=ce=fe=pe=ve=he=me=ye=ge=be=xe=we=Ce=Te=Me=Ee=Se=Oe=Ae=Le=Ne=Be=Pe=ze=De=He=ke=Ie=Re=We=bt=Wt=jt=Ve=Ge=Qe=Xe=Fe=qe=Ft=Je=Ue=Ke=$e=Ze=tn=en=nn=on=rn=an=Gt=Qt=fn=Xt=Yt=pn=vn=_t=hn=sn=ln=un=cn=dn=gn=bn=mn=xn=yn=wn=qt=Vt=null,this)"rebuild"!==r&&(this[r]=null);yt=!1},rebuild:function(){return k(r(t,K))}}}function Mn(t){t&&(Wt=Ft=qt=Vt=Dt=Gt=Yt=_t=!1)}function En(){for(var t=$?se-$t:se;t<0;)t+=ht;return t%ht+1}function Sn(t){return t=t?Math.max(0,Math.min(It?ht-1:ht-Bt,t)):0,$?t+$t:t}function On(t){for(null==t&&(t=se),$&&(t-=$t);t<0;)t+=ht;return Math.floor(t%ht)}function An(){var t,e=On();return t=ze?e:St||Et?Math.ceil((e+1)*$e/ht-1):Math.floor(e/Bt),!It&&$&&se===ce&&(t=$e-1),t}function Ln(){return i.innerWidth||n.documentElement.clientWidth||n.body.clientWidth}function Nn(t){return"top"===t?"afterbegin":"beforeend"}function Bn(t){var e,i,o=n.createElement("div");return t.appendChild(o),i=(e=o.getBoundingClientRect()).right-e.left,o.remove(),i||Bn(t.parentNode)}function Pn(){var t=Ot?2*Ot-At:0;return Bn(ft)-t}function zn(e){if(t[e])return!0;if(J)for(var n in J)if(J[n][e])return!0;return!1}function Dn(e,n){if(null==n&&(n=mt),"items"===e&&St)return Math.floor((Lt+At)/(St+At))||1;var i=t[e];if(J)for(var o in J)n>=parseInt(o)&&e in J[o]&&(i=J[o][e]);return"slideBy"===e&&"page"===i&&(i=Dn("items")),$||"slideBy"!==e&&"items"!==e||(i=Math.floor(i)),i}function Hn(t,e,n,i,o){var r="";if(void 0!==t){var a=t;e&&(a-=e),r=lt?"margin: 0 "+a+"px 0 "+t+"px;":"margin: "+t+"px 0 "+a+"px 0;"}else if(e&&!n){var s="-"+e+"px";r="margin: 0 "+(lt?s+" 0 0":"0 "+s+" 0")+";"}return!$&&o&&F&&i&&(r+=jn(i)),r}function kn(t,e,n){return t?(t+e)*Zt+"px":P?P+"("+100*Zt+"% / "+n+")":100*Zt/n+"%"}function In(t,e,n){var i;if(t)i=t+e+"px";else{$||(n=Math.floor(n));var o=$?Zt:n;i=P?P+"(100% / "+o+")":100/o+"%"}return i="width:"+i,"inner"!==U?i+";":i+" !important;"}function Rn(t){var e="";return!1!==t&&(e=(lt?"padding-":"margin-")+(lt?"right":"bottom")+": "+t+"px;"),e}function Wn(t,e){var n=t.substring(0,t.length-e).toLowerCase();return n&&(n="-"+n+"-"),n}function jn(t){return Wn(F,18)+"transition-duration:"+t/1e3+"s;"}function Fn(t){return Wn(V,17)+"animation-duration:"+t/1e3+"s;"}function qn(){if(zn("autoHeight")||Et||!lt){var t=dt.querySelectorAll("img");v(t,(function(t){var e=t.src;e&&e.indexOf("data:image")<0?(z(t,We),t.src="",t.src=e,y(t,"loading")):Jt||ri(t)})),e((function(){ui(M(t),(function(){bt=!0}))})),!Et&&lt&&(t=si(se,Math.min(se+Bt-1,Zt-1))),Jt?Vn():e((function(){ui(M(t),Vn)}))}else $&&Ei(),Qn(),Xn()}function Vn(){if(Et){var t=It?se:ht-1;!function e(){vt[t-1].getBoundingClientRect().right.toFixed(2)===vt[t].getBoundingClientRect().left.toFixed(2)?Gn():setTimeout((function(){e()}),16)}()}else Gn()}function Gn(){lt&&!Et||(vi(),Et?(ee=Ti(),we&&(Ce=Kn()),ce=ae(),Mn(be||Ce)):Ki()),$&&Ei(),Qn(),Xn()}function Qn(){if(hi(),ut.insertAdjacentHTML("afterbegin",'<div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">slide <span class="current">'+ni()+"</span>  of "+ht+"</div>"),xt=ut.querySelector(".tns-liveregion .current"),De){var e=Gt?"stop":"start";pn?C(pn,{"data-action":e}):t.autoplayButtonOutput&&(ut.insertAdjacentHTML(Nn(t.autoplayPosition),'<button data-action="'+e+'">'+hn[0]+e+hn[1]+Xt[0]+"</button>"),pn=ut.querySelector("[data-action]")),pn&&z(pn,{click:Ri}),Gt&&(ki(),Yt&&z(dt,Se),_t&&z(dt,Oe))}if(Pe){if(Je)C(Je,{"aria-label":"Carousel Pagination"}),v(Ke=Je.children,(function(t,e){C(t,{"data-nav":e,tabindex:"-1","aria-label":rn+(e+1),"aria-controls":ge})}));else{for(var n="",i=ze?"":'style="display:none"',o=0;o<ht;o++)n+='<button data-nav="'+o+'" tabindex="-1" aria-controls="'+ge+'" '+i+' aria-label="'+rn+(o+1)+'"></button>';n='<div class="tns-nav" aria-label="Carousel Pagination">'+n+"</div>",ut.insertAdjacentHTML(Nn(t.navPosition),n),Je=ut.querySelector(".tns-nav"),Ke=Je.children}if(Ui(),F){var r=F.substring(0,F.length-18).toLowerCase(),a="transition: all "+Ht/1e3+"s";r&&(a="-"+r+"-"+a),f(Kt,"[aria-controls^="+ge+"-item]",a,p(Kt))}C(Ke[en],{"aria-label":rn+(en+1)+an}),T(Ke[en],"tabindex"),y(Ke[en],on),z(Je,Ee)}Be&&(Ve||Qe&&Xe||(ut.insertAdjacentHTML(Nn(t.controlsPosition),'<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button data-controls="prev" tabindex="-1" aria-controls="'+ge+'">'+jt[0]+'</button><button data-controls="next" tabindex="-1" aria-controls="'+ge+'">'+jt[1]+"</button></div>"),Ve=ut.querySelector(".tns-controls")),Qe&&Xe||(Qe=Ve.children[0],Xe=Ve.children[1]),t.controlsContainer&&C(Ve,{"aria-label":"Carousel Navigation",tabindex:"0"}),(t.controlsContainer||t.prevButton&&t.nextButton)&&C([Qe,Xe],{"aria-controls":ge,tabindex:"-1"}),(t.controlsContainer||t.prevButton&&t.nextButton)&&(C(Qe,{"data-controls":"prev"}),C(Xe,{"data-controls":"next"})),Fe=yi(Qe),qe=yi(Xe),xi(),Ve?z(Ve,Me):(z(Qe,Me),z(Xe,Me))),Un()}function Xn(){if($&&Q){var e={};e[Q]=Ni,z(dt,e)}qt&&z(dt,Le,t.preventScrollOnTouch),Vt&&z(dt,Ne),Dt&&z(n,Ae),"inner"===U?me.on("outerResized",(function(){_n(),me.emit("innerLoaded",$i())})):(J||St||Et||Rt||!lt)&&z(i,{resize:Yn}),Rt&&("outer"===U?me.on("innerLoaded",li):be||li()),oi(),be?ti():Ce&&Zn(),me.on("indexChanged",ci),"inner"===U&&me.emit("innerLoaded",$i()),"function"==typeof he&&he($i()),yt=!0}function Yn(t){e((function(){_n(ji(t))}))}function _n(e){if(yt){"outer"===U&&me.emit("outerResized",$i(e)),mt=Ln();var i,o=st,r=!1;J&&(Jn(),(i=o!==st)&&me.emit("newBreakpointStart",$i(e)));var a,s,l=Bt,u=be,c=Ce,d=Dt,h=Wt,m=Ft,b=qt,x=Vt,w=Gt,C=Yt,T=_t,M=se;if(i){var O=St,A=Rt,L=jt,N=Nt,B=Xt;if(!R)var P=At,H=Ot}if(Dt=Dn("arrowKeys"),Wt=Dn("controls"),Ft=Dn("nav"),qt=Dn("touch"),Nt=Dn("center"),Vt=Dn("mouseDrag"),Gt=Dn("autoplay"),Yt=Dn("autoplayHoverPause"),_t=Dn("autoplayResetOnVisibility"),i&&(be=Dn("disable"),St=Dn("fixedWidth"),Ht=Dn("speed"),Rt=Dn("autoHeight"),jt=Dn("controlsText"),Xt=Dn("autoplayText"),Qt=Dn("autoplayTimeout"),R||(Ot=Dn("edgePadding"),At=Dn("gutter"))),Mn(be),Lt=Pn(),lt&&!Et||be||(vi(),lt||(Ki(),r=!0)),(St||Et)&&(ee=Ti(),ce=ae()),(i||St)&&(Bt=Dn("items"),Pt=Dn("slideBy"),(s=Bt!==l)&&(St||Et||(ce=ae()),Cn())),i&&be!==u&&(be?ti():function(){if(xe){if(Kt.disabled=!1,dt.className+=ye,Ei(),It)for(var t=$t;t--;)$&&S(vt[t]),S(vt[Zt-t-1]);if(!$)for(var e=se,n=se+ht;e<n;e++){var i=vt[e],o=e<se+Bt?nt:rt;i.style.left=100*(e-se)/Bt+"%",y(i,o)}$n(),xe=!1}}()),we&&(i||St||Et)&&(Ce=Kn())!==c&&(Ce?(Si(Mi(Sn(0))),Zn()):(function(){if(Te){if(Ot&&R&&(ct.style.margin=""),$t)for(var t="tns-transparent",e=$t;e--;)$&&g(vt[e],t),g(vt[Zt-e-1],t);$n(),Te=!1}}(),r=!0)),Mn(be||Ce),Gt||(Yt=_t=!1),Dt!==d&&(Dt?z(n,Ae):D(n,Ae)),Wt!==h&&(Wt?Ve?S(Ve):(Qe&&S(Qe),Xe&&S(Xe)):Ve?E(Ve):(Qe&&E(Qe),Xe&&E(Xe))),Ft!==m&&(Ft?S(Je):E(Je)),qt!==b&&(qt?z(dt,Le,t.preventScrollOnTouch):D(dt,Le)),Vt!==x&&(Vt?z(dt,Ne):D(dt,Ne)),Gt!==w&&(Gt?(pn&&S(pn),ln||cn||ki()):(pn&&E(pn),ln&&Ii())),Yt!==C&&(Yt?z(dt,Se):D(dt,Se)),_t!==T&&(_t?z(n,Oe):D(n,Oe)),i){if(St===O&&Nt===N||(r=!0),Rt!==A&&(Rt||(ct.style.height="")),Wt&&jt!==L&&(Qe.innerHTML=jt[0],Xe.innerHTML=jt[1]),pn&&Xt!==B){var k=Gt?1:0,I=pn.innerHTML,W=I.length-B[k].length;I.substring(W)===B[k]&&(pn.innerHTML=I.substring(0,W)+Xt[k])}}else Nt&&(St||Et)&&(r=!0);if((s||St&&!Et)&&($e=Ji(),Ui()),(a=se!==M)?(me.emit("indexChanged",$i()),r=!0):s?a||ci():(St||Et)&&(oi(),hi(),ei()),s&&!$&&function(){for(var t=se+Math.min(ht,Bt),e=Zt;e--;){var n=vt[e];e>=se&&e<t?(y(n,"tns-moving"),n.style.left=100*(e-se)/Bt+"%",y(n,nt),g(n,rt)):n.style.left&&(n.style.left="",y(n,rt),g(n,nt)),g(n,it)}setTimeout((function(){v(vt,(function(t){g(t,"tns-moving")}))}),300)}(),!be&&!Ce){if(i&&!R&&(Rt===autoheightTem&&Ht===speedTem||di(),Ot===H&&At===P||(ct.style.cssText=Hn(Ot,At,St,Ht,Rt)),lt)){$&&(dt.style.width=kn(St,At,Bt));var j=In(St,At,Bt)+Rn(At);!function(t,e){"deleteRule"in t?t.deleteRule(e):t.removeRule(e)}(Kt,p(Kt)-1),f(Kt,"#"+ge+" > .tns-item",j,p(Kt))}Rt&&li(),r&&(Ei(),le=se)}i&&me.emit("newBreakpointEnd",$i(e))}}function Kn(){if(!St&&!Et)return ht<=(Nt?Bt-(Bt-1)/2:Bt);var t=St?(St+At)*ht:gt[ht],e=Ot?Lt+2*Ot:Lt+At;return Nt&&(e-=St?(Lt-St)/2:(Lt-(gt[se+1]-gt[se]-At))/2),t<=e}function Jn(){for(var t in st=0,J)t=parseInt(t),mt>=t&&(st=t)}function Un(){!Gt&&pn&&E(pn),!Ft&&Je&&E(Je),Wt||(Ve?E(Ve):(Qe&&E(Qe),Xe&&E(Xe)))}function $n(){Gt&&pn&&S(pn),Ft&&Je&&S(Je),Wt&&(Ve?S(Ve):(Qe&&S(Qe),Xe&&S(Xe)))}function Zn(){if(!Te){if(Ot&&(ct.style.margin="0px"),$t)for(var t="tns-transparent",e=$t;e--;)$&&y(vt[e],t),y(vt[Zt-e-1],t);Un(),Te=!0}}function ti(){if(!xe){if(Kt.disabled=!0,dt.className=dt.className.replace(ye.substring(1),""),T(dt,["style"]),It)for(var t=$t;t--;)$&&E(vt[t]),E(vt[Zt-t-1]);if(lt&&$||T(ct,["style"]),!$)for(var e=se,n=se+ht;e<n;e++){var i=vt[e];T(i,["style"]),g(i,nt),g(i,rt)}Un(),xe=!0}}function ei(){var t=ni();xt.innerHTML!==t&&(xt.innerHTML=t)}function ni(){var t=ii(),e=t[0]+1,n=t[1]+1;return e===n?e+"":e+" to "+n}function ii(t){null==t&&(t=Mi());var e,n,i,o=se;if(Nt||Ot?(Et||St)&&(n=-(parseFloat(t)+Ot),i=n+Lt+2*Ot):Et&&(n=gt[se],i=n+Lt),Et)gt.forEach((function(t,r){r<Zt&&((Nt||Ot)&&t<=n+.5&&(o=r),i-t>=.5&&(e=r))}));else{if(St){var r=St+At;Nt||Ot?(o=Math.floor(n/r),e=Math.ceil(i/r-1)):e=o+Math.ceil(Lt/r)-1}else if(Nt||Ot){var a=Bt-1;if(Nt?(o-=a/2,e=se+a/2):e=se+a,Ot){var s=Ot*Bt/Lt;o-=s,e+=s}o=Math.floor(o),e=Math.ceil(e)}else e=o+Bt-1;o=Math.max(o,0),e=Math.min(e,Zt-1)}return[o,e]}function oi(){Jt&&!be&&si.apply(null,ii()).forEach((function(t){if(!m(t,Re)){var e={};e[Q]=function(t){t.stopPropagation()},z(t,e),z(t,We),t.src=x(t,"data-src");var n=x(t,"data-srcset");n&&(t.srcset=n),y(t,"loading")}}))}function ri(t){y(t,"loaded"),ai(t)}function ai(t){y(t,"tns-complete"),g(t,"loading"),D(t,We)}function si(t,e){for(var n=[];t<=e;)v(vt[t].querySelectorAll("img"),(function(t){n.push(t)})),t++;return n}function li(){var t=si.apply(null,ii());e((function(){ui(t,pi)}))}function ui(t,n){return bt?n():(t.forEach((function(e,n){m(e,Re)&&t.splice(n,1)})),t.length?void e((function(){ui(t,n)})):n())}function ci(){oi(),hi(),ei(),xi(),function(){if(Ft&&(en=tn>=0?tn:An(),tn=-1,en!==nn)){var t=Ke[nn],e=Ke[en];C(t,{tabindex:"-1","aria-label":rn+(nn+1)}),g(t,on),C(e,{"aria-label":rn+(en+1)+an}),T(e,"tabindex"),y(e,on),nn=en}}()}function di(){$&&Rt&&(at.style[F]=Ht/1e3+"s")}function fi(t,e){for(var n=[],i=t,o=Math.min(t+e,Zt);i<o;i++)n.push(vt[i].offsetHeight);return Math.max.apply(null,n)}function pi(){var t=Rt?fi(se,Bt):fi($t,ht),e=at||ct;e.style.height!==t&&(e.style.height=t+"px")}function vi(){gt=[0];var t=lt?"left":"top",e=lt?"right":"bottom",n=vt[0].getBoundingClientRect()[t];v(vt,(function(i,o){o&&gt.push(i.getBoundingClientRect()[t]-n),o===Zt-1&&gt.push(i.getBoundingClientRect()[e]-n)}))}function hi(){var t=ii(),e=t[0],n=t[1];v(vt,(function(t,i){i>=e&&i<=n?b(t,"aria-hidden")&&(T(t,["aria-hidden","tabindex"]),y(t,Ie)):b(t,"aria-hidden")||(C(t,{"aria-hidden":"true",tabindex:"-1"}),g(t,Ie))}))}function mi(t){return t.nodeName.toLowerCase()}function yi(t){return"button"===mi(t)}function gi(t){return"true"===t.getAttribute("aria-disabled")}function bi(t,e,n){t?e.disabled=n:e.setAttribute("aria-disabled",n.toString())}function xi(){if(Wt&&!kt&&!It){var t=Fe?Qe.disabled:gi(Qe),e=qe?Xe.disabled:gi(Xe),n=se<=ue,i=!kt&&se>=ce;n&&!t&&bi(Fe,Qe,!0),!n&&t&&bi(Fe,Qe,!1),i&&!e&&bi(qe,Xe,!0),!i&&e&&bi(qe,Xe,!1)}}function wi(t,e){F&&(t.style[F]=e)}function Ci(t){return null==t&&(t=se),Et?(Lt-(Ot?At:0)-(gt[t+1]-gt[t]-At))/2:St?(Lt-St)/2:(Bt-1)/2}function Ti(){var t=Lt+(Ot?At:0)-(St?(St+At)*Zt:gt[Zt]);return Nt&&!It&&(t=St?-(St+At)*(Zt-1)-Ci():Ci(Zt-1)-gt[Zt-1]),t>0&&(t=0),t}function Mi(t){var e;if(null==t&&(t=se),lt&&!Et)if(St)e=-(St+At)*t,Nt&&(e+=Ci());else{var n=W?Zt:Bt;Nt&&(t-=Ci()),e=100*-t/n}else e=-gt[t],Nt&&Et&&(e+=Ci());return te&&(e=Math.max(e,ee)),e+(!lt||Et||St?"px":"%")}function Ei(t){wi(dt,"0s"),Si(t)}function Si(t){null==t&&(t=Mi()),dt.style[ie]=oe+t+re}function Oi(t,e,n,i){var o=t+Bt;It||(o=Math.min(o,Zt));for(var r=t;r<o;r++){var a=vt[r];i||(a.style.left=100*(r-se)/Bt+"%"),ot&&q&&(a.style[q]=a.style[G]=ot*(r-t)/1e3+"s"),g(a,e),y(a,n),i&&Ut.push(a)}}function Ai(t,e){ne&&Cn(),(se!==le||e)&&(me.emit("indexChanged",$i()),me.emit("transitionStart",$i()),Rt&&li(),ln&&t&&["click","keydown"].indexOf(t.type)>=0&&Ii(),ve=!0,Tn())}function Li(t){return t.toLowerCase().replace(/-/g,"")}function Ni(t){if($||ve){if(me.emit("transitionEnd",$i(t)),!$&&Ut.length>0)for(var e=0;e<Ut.length;e++){var n=Ut[e];n.style.left="",G&&q&&(n.style[G]="",n.style[q]=""),g(n,it),y(n,rt)}if(!t||!$&&t.target.parentNode===dt||t.target===dt&&Li(t.propertyName)===Li(ie)){if(!ne){var i=se;Cn(),se!==i&&(me.emit("indexChanged",$i()),Ei())}"inner"===U&&me.emit("innerLoaded",$i()),ve=!1,le=se}}}function Bi(t,e){if(!Ce)if("prev"===t)Pi(e,-1);else if("next"===t)Pi(e,1);else{if(ve){if(de)return;Ni()}var n=On(),i=0;if("first"===t?i=-n:"last"===t?i=$?ht-Bt-n:ht-1-n:("number"!=typeof t&&(t=parseInt(t)),isNaN(t)||(e||(t=Math.max(0,Math.min(ht-1,t))),i=t-n)),!$&&i&&Math.abs(i)<Bt){var o=i>0?1:-1;i+=se+i-ht>=ue?ht*o:2*ht*o*-1}se+=i,$&&It&&(se<ue&&(se+=ht),se>ce&&(se-=ht)),On(se)!==On(le)&&Ai(e)}}function Pi(t,e){if(ve){if(de)return;Ni()}var n;if(!e){for(var i=Fi(t=ji(t));i!==Ve&&[Qe,Xe].indexOf(i)<0;)i=i.parentNode;var o=[Qe,Xe].indexOf(i);o>=0&&(n=!0,e=0===o?-1:1)}if(kt){if(se===ue&&-1===e)return void Bi("last",t);if(se===ce&&1===e)return void Bi("first",t)}e&&(se+=Pt*e,Et&&(se=Math.floor(se)),Ai(n||t&&"keydown"===t.type?t:null))}function zi(){sn=setInterval((function(){Pi(null,fn)}),Qt),ln=!0}function Di(){clearInterval(sn),ln=!1}function Hi(t,e){C(pn,{"data-action":t}),pn.innerHTML=hn[0]+t+hn[1]+e}function ki(){zi(),pn&&Hi("stop",Xt[1])}function Ii(){Di(),pn&&Hi("start",Xt[0])}function Ri(){ln?(Ii(),cn=!0):(ki(),cn=!1)}function Wi(t){t.focus()}function ji(t){return qi(t=t||i.event)?t.changedTouches[0]:t}function Fi(t){return t.target||i.event.srcElement}function qi(t){return t.type.indexOf("touch")>=0}function Vi(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function Gi(){return r=bn.y-gn.y,a=bn.x-gn.x,e=Math.atan2(r,a)*(180/Math.PI),n=fe,i=!1,(o=Math.abs(90-Math.abs(e)))>=90-n?i="horizontal":o<=n&&(i="vertical"),i===t.axis;var e,n,i,o,r,a}function Qi(t){if(ve){if(de)return;Ni()}Gt&&ln&&Di(),xn=!0,yn&&(o(yn),yn=null);var e=ji(t);me.emit(qi(t)?"touchStart":"dragStart",$i(t)),!qi(t)&&["img","a"].indexOf(mi(Fi(t)))>=0&&Vi(t),bn.x=gn.x=e.clientX,bn.y=gn.y=e.clientY,$&&(mn=parseFloat(dt.style[ie].replace(oe,"")),wi(dt,"0s"))}function Xi(t){if(xn){var n=ji(t);bn.x=n.clientX,bn.y=n.clientY,$?yn||(yn=e((function(){Yi(t)}))):("?"===pe&&(pe=Gi()),pe&&(je=!0)),je&&t.preventDefault()}}function Yi(t){if(pe){if(o(yn),xn&&(yn=e((function(){Yi(t)}))),"?"===pe&&(pe=Gi()),pe){!je&&qi(t)&&(je=!0);try{t.type&&me.emit(qi(t)?"touchMove":"dragMove",$i(t))}catch(t){}var n=mn,i=wn(bn,gn);!lt||St||Et?(n+=i,n+="px"):(n+=W?i*Bt*100/((Lt+At)*Zt):100*i/(Lt+At),n+="%"),dt.style[ie]=oe+n+re}}else xn=!1}function _i(n){if(xn){yn&&(o(yn),yn=null),$&&wi(dt,""),xn=!1;var i=ji(n);bn.x=i.clientX,bn.y=i.clientY;var r=wn(bn,gn);if(Math.abs(r)){if(!qi(n)){var a=Fi(n);z(a,{click:function t(e){Vi(e),D(a,{click:t})}})}$?yn=e((function(){if(lt&&!Et){var t=-r*Bt/(Lt+At);t=r>0?Math.floor(t):Math.ceil(t),se+=t}else{var e=-(mn+r);if(e<=0)se=ue;else if(e>=gt[Zt-1])se=ce;else for(var i=0;i<Zt&&e>=gt[i];)se=i,e>gt[i]&&r<0&&(se+=1),i++}Ai(n,r),me.emit(qi(n)?"touchEnd":"dragEnd",$i(n))})):pe&&Pi(n,r>0?-1:1)}}"auto"===t.preventScrollOnTouch&&(je=!1),fe&&(pe="?"),Gt&&!ln&&zi()}function Ki(){(at||ct).style.height=gt[se+Bt]-gt[se]+"px"}function Ji(){var t=St?(St+At)*ht/Lt:ht/Bt;return Math.min(Math.ceil(t),ht)}function Ui(){if(Ft&&!ze&&$e!==Ze){var t=Ze,e=$e,n=S;for(Ze>$e&&(t=$e,e=Ze,n=E);t<e;)n(Ke[t]),t++;Ze=$e}}function $i(t){return{container:dt,slideItems:vt,navContainer:Je,navItems:Ke,controlsContainer:Ve,hasControls:Be,prevButton:Qe,nextButton:Xe,items:Bt,slideBy:Pt,cloneCount:$t,slideCount:ht,slideCountNew:Zt,index:se,indexCached:le,displayIndex:En(),navCurrentIndex:en,navCurrentIndexCached:nn,pages:$e,pagesCached:Ze,sheet:Kt,isOn:yt,event:t||{}}}Y&&console.warn("No slides found in",t.container)},I=function(t,e){return this.root=t,this.options=this.extendObject({gutter:10,edgePadding:10,containerClass:".beon-slider__slides",autoplay:!1,autoplayTimeout:3e3,responsive:{1:{items:2},767:{items:4}}},e||{}),this.setup={container:t.querySelector(this.options.containerClass),mode:"carousel",axis:"horizontal",gutter:this.options.gutter,edgePadding:this.options.edgePadding,items:3,slideBy:"page",mouseDrag:!0,swipeAngle:!1,speed:400,controls:!0,controlsPosition:"bottom",nav:!0,navPosition:"bottom",rewind:!1,loop:!1,preventActionWhenRunning:!1,preventScrollOnTouch:!1,responsive:this.options.responsive,autoplay:this.options.autoplay,autoplayTimeout:this.options.autoplayTimeout,autoplayHoverPause:!0,autoplayResetOnVisibility:!0,lazyload:!0,lazyloadSelector:".bn-lazy"},this.init(),this};I.prototype.init=function(){/slider-initialized/i.test(this.root.className)?console.log(`already initialized slider at ${this.root.getAttribute("id")}`):(this.getConfigFromElement(),this.applySlider())},I.prototype.getConfigFromElement=function(){var t,e;(t=this.root.getAttribute("data-config"))||(t="{}");try{if((e=JSON.parse(t)).viewports){var n={};for(var i in e.viewports)n[i]={items:e.viewports[i].i||1,scrollBy:e.viewports[i].s||1},"undefined"!==e.viewports[i].b&&(n[i].gutter=e.viewports[i].b,n[i].edgePadding=e.viewports[i].b);this.setup.responsive=n}e.hasOwnProperty("dots")&&(this.setup.nav=e.dots),e.hasOwnProperty("autoplay")&&(this.setup.autoplay=!0,this.setup.autoplayTimeout=1e3*e.autoplay,this.setup.loop=!0),e.hasOwnProperty("rewind")&&(this.setup.rewind=!0,this.setup.loop=!1),e.hasOwnProperty("loop")&&(this.setup.rewind=!1,this.setup.loop=!0),e.hasOwnProperty("center")&&(this.setup.center=!0),e.hasOwnProperty("axis")&&(this.setup.axis=e.axis),e.hasOwnProperty("preventScrollOnTouch")&&(this.setup.preventScrollOnTouch=e.preventScrollOnTouch),this.root.querySelector("img.bn-lazy")||(this.setup.lazyload=!1)}catch(t){console.log(t)}return this.setup},I.prototype.applySlider=function(){return this.root.className=this.root.className+" slider-initialized",this.slider=k(this.setup),this.bindBreakpointEvents(),this},I.prototype.bindBreakpointEvents=function(){this.slider.events.on("newBreakpointEnd",this.updateColumnsCount.bind(this)),this.updateColumnsCount()},I.prototype.updateColumnsCount=function(){var t=this.slider.getInfo().items;return this.root.className=this.root.className.replace(/bn-columns--[0-9]+/i,""),this.root.className+=" bn-columns--"+t,this},I.prototype.extendObject=function(t,e){if(window.Object)return Object.assign(t,e);for(var n in t)e.hasOwnProperty(n)&&(t[n]=e[n]);return t};var R=function(){this.initializeSliders(),this.bindEvents()};R.prototype.bindEvents=function(){document.addEventListener("DOMContentLoaded",this.initializeSliders.bind(this)),document.addEventListener("beon.buddy.elements.handle.item.inject.success",this.initializeSliderFromInjection.bind(this)),document.addEventListener("beon.buddy.inject.after",this.initializeSliderFromInjection.bind(this))},R.prototype.initializeSliders=function(){var t=document.querySelectorAll(".beon-slider:not(.slider-initialized)");Array.prototype.slice.call(t).forEach(function(t,e){this.initializeSlider(t,"DOMContentLoaded")}.bind(this))},R.prototype.initializeSliderFromInjection=function(t){t.detail.element;var e=t.detail.container.querySelectorAll(".beon-slider:not(.slider-initialized)");e&&Array.prototype.slice.call(e).forEach(function(t,e){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",function(){this.initializeSlider(t,"DOMContentLoaded")}.bind(this)):this.initializeSlider(t,"from_injection")}.bind(this))},R.prototype.initializeSlider=function(t,e){return new Promise((n=>{new I(t),window.beone.dispatchEvent("buddy.slider.init.after",{element:t,method:e}),n()}))},new R})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvT2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2NoaWxkTm9kZS5yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9yYWYuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2NhZi5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvZXh0ZW5kLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9jaGVja1N0b3JhZ2VWYWx1ZS5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvc2V0TG9jYWxTdG9yYWdlLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9nZXRCb2R5LmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9kb2NFbGVtZW50LmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9zZXRGYWtlQm9keS5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvcmVzZXRGYWtlQm9keS5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvYWRkQ1NTUnVsZS5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvZ2V0Q3NzUnVsZXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2ZvckVhY2guanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2NsYXNzTGlzdFN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2hhc0NsYXNzLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9hZGRDbGFzcy5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvcmVtb3ZlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2hhc0F0dHIuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2dldEF0dHIuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2lzTm9kZUxpc3QuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL3NldEF0dHJzLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9yZW1vdmVBdHRycy5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvYXJyYXlGcm9tTm9kZUxpc3QuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2hpZGVFbGVtZW50LmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9zaG93RWxlbWVudC5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvaXNWaXNpYmxlLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy93aGljaFByb3BlcnR5LmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9nZXRFbmRQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvcGFzc2l2ZU9wdGlvbi5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvYWRkRXZlbnRzLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9yZW1vdmVFdmVudHMuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL3Rpbnktc2xpZGVyLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9jYWxjLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9wZXJjZW50YWdlTGF5b3V0LmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9tZWRpYXF1ZXJ5U3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvaGFzM0RUcmFuc2Zvcm1zLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9nZXRTbGlkZUlkLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9jcmVhdGVTdHlsZVNoZWV0LmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL25vZGVfbW9kdWxlcy90aW55LXNsaWRlci9zcmMvaGVscGVycy9qc1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvcmVtb3ZlQ1NTUnVsZS5qcyIsIndlYnBhY2s6Ly9ibi50ZW5hbnQuY3VzdG9tLmJhc2UvLi9zcmMvYmFzZS9ub2RlX21vZHVsZXMvdGlueS1zbGlkZXIvc3JjL2hlbHBlcnMvdG9EZWdyZWUuanMiLCJ3ZWJwYWNrOi8vYm4udGVuYW50LmN1c3RvbS5iYXNlLy4vc3JjL2Jhc2Uvbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy9oZWxwZXJzL2dldFRvdWNoRGlyZWN0aW9uLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL3NyYy9qcy9zbGlkZXIvdG5zLmpzIiwid2VicGFjazovL2JuLnRlbmFudC5jdXN0b20uYmFzZS8uL3NyYy9iYXNlL3NyYy9qcy9zbGlkZXIvaW5pdC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJrZXlzIiwib2JqZWN0IiwibmFtZSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInB1c2giLCJFbGVtZW50IiwicmVtb3ZlIiwidGhpcyIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwid2luIiwid2luZG93IiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYiIsInNldFRpbWVvdXQiLCJjYWYiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaWQiLCJjbGVhclRpbWVvdXQiLCJleHRlbmQiLCJvYmoiLCJjb3B5IiwidGFyZ2V0IiwiYXJndW1lbnRzIiwiaSIsImxlbmd0aCIsInVuZGVmaW5lZCIsImNoZWNrU3RvcmFnZVZhbHVlIiwidmFsdWUiLCJpbmRleE9mIiwiSlNPTiIsInBhcnNlIiwic2V0TG9jYWxTdG9yYWdlIiwic3RvcmFnZSIsImtleSIsImFjY2VzcyIsInNldEl0ZW0iLCJlIiwiZ2V0Qm9keSIsImRvYyIsImRvY3VtZW50IiwiYm9keSIsImNyZWF0ZUVsZW1lbnQiLCJmYWtlIiwiZG9jRWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsInNldEZha2VCb2R5IiwiZG9jT3ZlcmZsb3ciLCJzdHlsZSIsIm92ZXJmbG93IiwiYmFja2dyb3VuZCIsImFwcGVuZENoaWxkIiwicmVzZXRGYWtlQm9keSIsIm9mZnNldEhlaWdodCIsImFkZENTU1J1bGUiLCJzaGVldCIsInNlbGVjdG9yIiwicnVsZXMiLCJpbmRleCIsImluc2VydFJ1bGUiLCJhZGRSdWxlIiwiZ2V0Q3NzUnVsZXNMZW5ndGgiLCJjc3NSdWxlcyIsImZvckVhY2giLCJhcnIiLCJjYWxsYmFjayIsInNjb3BlIiwibCIsImNsYXNzTGlzdFN1cHBvcnQiLCJoYXNDbGFzcyIsImVsIiwic3RyIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJjbGFzc05hbWUiLCJhZGRDbGFzcyIsImFkZCIsInJlbW92ZUNsYXNzIiwicmVwbGFjZSIsImhhc0F0dHIiLCJhdHRyIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0ciIsImdldEF0dHJpYnV0ZSIsImlzTm9kZUxpc3QiLCJpdGVtIiwic2V0QXR0cnMiLCJlbHMiLCJhdHRycyIsIkFycmF5IiwidG9TdHJpbmciLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRycyIsImF0dHJMZW5ndGgiLCJqIiwicmVtb3ZlQXR0cmlidXRlIiwiYXJyYXlGcm9tTm9kZUxpc3QiLCJubCIsImhpZGVFbGVtZW50IiwiZm9yY2VIaWRlIiwiZGlzcGxheSIsInNob3dFbGVtZW50IiwiaXNWaXNpYmxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIndoaWNoUHJvcGVydHkiLCJwcm9wcyIsIlByb3BzIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJwcmVmaXgiLCJwcm9wIiwiZ2V0RW5kUHJvcGVydHkiLCJwcm9wSW4iLCJwcm9wT3V0IiwiZW5kUHJvcCIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXNzaXZlT3B0aW9uIiwicGFzc2l2ZSIsImFkZEV2ZW50cyIsInByZXZlbnRTY3JvbGxpbmciLCJvcHRpb24iLCJyZW1vdmVFdmVudHMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiRXZlbnRzIiwidG9waWNzIiwib24iLCJldmVudE5hbWUiLCJmbiIsIm9mZiIsInNwbGljZSIsImVtaXQiLCJkYXRhIiwidHlwZSIsInRucyIsIm9wdGlvbnMiLCJjb250YWluZXIiLCJtb2RlIiwiYXhpcyIsIml0ZW1zIiwiZ3V0dGVyIiwiZWRnZVBhZGRpbmciLCJmaXhlZFdpZHRoIiwiYXV0b1dpZHRoIiwidmlld3BvcnRNYXgiLCJzbGlkZUJ5IiwiY2VudGVyIiwiY29udHJvbHMiLCJjb250cm9sc1Bvc2l0aW9uIiwiY29udHJvbHNUZXh0IiwiY29udHJvbHNDb250YWluZXIiLCJwcmV2QnV0dG9uIiwibmV4dEJ1dHRvbiIsIm5hdiIsIm5hdlBvc2l0aW9uIiwibmF2Q29udGFpbmVyIiwibmF2QXNUaHVtYm5haWxzIiwiYXJyb3dLZXlzIiwic3BlZWQiLCJhdXRvcGxheSIsImF1dG9wbGF5UG9zaXRpb24iLCJhdXRvcGxheVRpbWVvdXQiLCJhdXRvcGxheURpcmVjdGlvbiIsImF1dG9wbGF5VGV4dCIsImF1dG9wbGF5SG92ZXJQYXVzZSIsImF1dG9wbGF5QnV0dG9uIiwiYXV0b3BsYXlCdXR0b25PdXRwdXQiLCJhdXRvcGxheVJlc2V0T25WaXNpYmlsaXR5IiwiYW5pbWF0ZUluIiwiYW5pbWF0ZU91dCIsImFuaW1hdGVOb3JtYWwiLCJhbmltYXRlRGVsYXkiLCJsb29wIiwicmV3aW5kIiwiYXV0b0hlaWdodCIsInJlc3BvbnNpdmUiLCJsYXp5bG9hZCIsImxhenlsb2FkU2VsZWN0b3IiLCJ0b3VjaCIsIm1vdXNlRHJhZyIsInN3aXBlQW5nbGUiLCJuZXN0ZWQiLCJwcmV2ZW50QWN0aW9uV2hlblJ1bm5pbmciLCJwcmV2ZW50U2Nyb2xsT25Ub3VjaCIsImZyZWV6YWJsZSIsIm9uSW5pdCIsInVzZUxvY2FsU3RvcmFnZSIsIktFWVMiLCJFTlRFUiIsIlNQQUNFIiwiTEVGVCIsIlJJR0hUIiwidG5zU3RvcmFnZSIsImxvY2FsU3RvcmFnZUFjY2VzcyIsImJyb3dzZXJJbmZvIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidWlkIiwiRGF0ZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwiQ0FMQyIsImRpdiIsInJlc3VsdCIsInZhbCIsInZhbHMiLCJ3aWR0aCIsIm9mZnNldFdpZHRoIiwiY2FsYyIsIlBFUkNFTlRBR0VMQVlPVVQiLCJzdXBwb3J0ZWQiLCJ3cmFwcGVyIiwib3V0ZXIiLCJpbm5lckhUTUwiLCJNYXRoIiwiYWJzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsImNoaWxkcmVuIiwiY291bnQiLCJwZXJjZW50YWdlTGF5b3V0IiwiQ1NTTVEiLCJwb3NpdGlvbiIsInJ1bGUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwiY3VycmVudFN0eWxlIiwibWVkaWFxdWVyeVN1cHBvcnQiLCJUUkFOU0ZPUk0iLCJIQVMzRFRSQU5TRk9STVMiLCJ0ZiIsImhhczNkIiwiY3NzVEYiLCJzbGljZSIsImluc2VydEJlZm9yZSIsImdldFByb3BlcnR5VmFsdWUiLCJoYXMzRFRyYW5zZm9ybXMiLCJUUkFOU0lUSU9ORFVSQVRJT04iLCJUUkFOU0lUSU9OREVMQVkiLCJBTklNQVRJT05EVVJBVElPTiIsIkFOSU1BVElPTkRFTEFZIiwiVFJBTlNJVElPTkVORCIsIkFOSU1BVElPTkVORCIsInN1cHBvcnRDb25zb2xlV2FybiIsImNvbnNvbGUiLCJ3YXJuIiwidG5zTGlzdCIsIm9wdGlvbnNFbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3IiLCJub2RlTmFtZSIsImNhcm91c2VsIiwicmVzcG9uc2l2ZVRlbSIsInVwZGF0ZU9wdGlvbnMiLCJtaWRkbGVXcmFwcGVyIiwiYnJlYWtwb2ludFpvbmUiLCJob3Jpem9udGFsIiwib3V0ZXJXcmFwcGVyIiwiaW5uZXJXcmFwcGVyIiwiY29udGFpbmVyUGFyZW50IiwiY29udGFpbmVySFRNTCIsIm91dGVySFRNTCIsInNsaWRlSXRlbXMiLCJzbGlkZUNvdW50Iiwid2luZG93V2lkdGgiLCJnZXRXaW5kb3dXaWR0aCIsImlzT24iLCJzZXRCcmVha3BvaW50Wm9uZSIsInNsaWRlUG9zaXRpb25zIiwiaW1nc0NvbXBsZXRlIiwibGl2ZXJlZ2lvbkN1cnJlbnQiLCJpdGVtc01heCIsImdldE9wdGlvbiIsInZpZXdwb3J0IiwiZ2V0Vmlld3BvcnRXaWR0aCIsImZsb29yIiwiZml4ZWRXaWR0aFZpZXdwb3J0V2lkdGgiLCJzbGlkZUl0ZW1zT3V0IiwiY2xvbmVDb3VudCIsImJwIiwidGVtIiwiY2VpbCIsIm1pbiIsImFwcGx5IiwibWF4IiwiZ2V0SXRlbXNNYXgiLCJoYXNPcHRpb24iLCJzbGlkZUNvdW50TmV3IiwiaGFzUmlnaHREZWFkWm9uZSIsInJpZ2h0Qm91bmRhcnkiLCJnZXRSaWdodEJvdW5kYXJ5IiwidXBkYXRlSW5kZXhCZWZvcmVUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1BdHRyIiwidHJhbnNmb3JtUHJlZml4IiwidHJhbnNmb3JtUG9zdGZpeCIsImdldEluZGV4TWF4IiwiZ2V0U3RhcnRJbmRleCIsImluZGV4Q2FjaGVkIiwiaW5kZXhNaW4iLCJnZXRDdXJyZW50U2xpZGUiLCJpbmRleE1heCIsIm1vdmVEaXJlY3Rpb25FeHBlY3RlZCIsInJ1bm5pbmciLCJldmVudHMiLCJuZXdDb250YWluZXJDbGFzc2VzIiwic2xpZGVJZCIsInRuc0lkIiwiZGlzYWJsZSIsImRpc2FibGVkIiwiZnJlZXplIiwiZ2V0RnJlZXplIiwiZnJvemVuIiwiY29udHJvbHNFdmVudHMiLCJvbkNvbnRyb2xzQ2xpY2siLCJnZXRFdmVudCIsImtleUluZGV4Iiwia2V5Q29kZSIsIm5hdkV2ZW50cyIsIm9uVHJhbnNpdGlvbkVuZCIsImdldFRhcmdldCIsIm5hdkluZGV4IiwibmF2Q2xpY2tlZCIsIk51bWJlciIsInRhcmdldEluZGV4QmFzZSIsInBhZ2VzIiwiZ29UbyIsIm5hdkN1cnJlbnRJbmRleCIsImFuaW1hdGluZyIsInN0b3BBdXRvcGxheSIsImN1ckVsZW1lbnQiLCJhY3RpdmVFbGVtZW50Iiwic2V0Rm9jdXMiLCJuYXZJdGVtcyIsImhvdmVyRXZlbnRzIiwic3RvcEF1dG9wbGF5VGltZXIiLCJhdXRvcGxheUhvdmVyUGF1c2VkIiwic2V0QXV0b3BsYXlUaW1lciIsInZpc2liaWxpdHlFdmVudCIsImhpZGRlbiIsImF1dG9wbGF5VmlzaWJpbGl0eVBhdXNlZCIsImRvY21lbnRLZXlkb3duRXZlbnQiLCJ0b3VjaEV2ZW50cyIsIm9uUGFuU3RhcnQiLCJvblBhbk1vdmUiLCJvblBhbkVuZCIsImRyYWdFdmVudHMiLCJoYXNDb250cm9scyIsImhhc05hdiIsImhhc0F1dG9wbGF5IiwiaGFzVG91Y2giLCJoYXNNb3VzZURyYWciLCJzbGlkZUFjdGl2ZUNsYXNzIiwiaW1nQ29tcGxldGVDbGFzcyIsImltZ0V2ZW50cyIsImltZ0xvYWRlZCIsImltZyIsImltZ0NvbXBsZXRlZCIsInByZXZlbnRTY3JvbGwiLCJwcmV2SXNCdXR0b24iLCJuZXh0SXNCdXR0b24iLCJjb250cm9sc0NvbnRhaW5lckhUTUwiLCJwcmV2QnV0dG9uSFRNTCIsIm5leHRCdXR0b25IVE1MIiwibmF2Q29udGFpbmVySFRNTCIsImdldFBhZ2VzIiwicGFnZXNDYWNoZWQiLCJnZXRDdXJyZW50TmF2SW5kZXgiLCJuYXZDdXJyZW50SW5kZXhDYWNoZWQiLCJuYXZBY3RpdmVDbGFzcyIsIm5hdlN0ciIsIm5hdlN0ckN1cnJlbnQiLCJhdXRvcGxheVRpbWVyIiwiYXV0b3BsYXlVc2VyUGF1c2VkIiwiYXV0b3BsYXlCdXR0b25IVE1MIiwiYXV0b3BsYXlIdG1sU3RyaW5ncyIsInRyYW5zbGF0ZUluaXQiLCJyYWZJbmRleCIsImluaXRQb3NpdGlvbiIsImxhc3RQb3NpdGlvbiIsInBhblN0YXJ0IiwiZ2V0RGlzdCIsImEiLCJiIiwieCIsInkiLCJyZXNldFZhcmlibGVzV2hlbkRpc2FibGUiLCJmcmFnbWVudEJlZm9yZSIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJmcmFnbWVudEFmdGVyIiwibnVtIiwiY2xvbmVGaXJzdCIsImNsb25lTm9kZSIsImZpcnN0Q2hpbGQiLCJjbG9uZUxhc3QiLCJpbml0U3RydWN0dXJlIiwiZm9udFNpemUiLCJzbGlkZSIsIm1hcmdpbkxlZnQiLCJnZXRTbGlkZU1hcmdpbkxlZnQiLCJnZXRUcmFuc2l0aW9uRHVyYXRpb25TdHlsZSIsImdldElubmVyV3JhcHBlclN0eWxlcyIsImdldENvbnRhaW5lcldpZHRoIiwiZ2V0U2xpZGVXaWR0aFN0eWxlIiwiZ2V0U2xpZGVHdXR0ZXJTdHlsZSIsImdldEFuaW1hdGlvbkR1cmF0aW9uU3R5bGUiLCJ1cGRhdGVfY2Fyb3VzZWxfdHJhbnNpdGlvbl9kdXJhdGlvbiIsInBhcnNlSW50IiwibWlkZGxlV3JhcHBlclN0ciIsImlubmVyV3JhcHBlclN0ciIsImNvbnRhaW5lclN0ciIsInNsaWRlU3RyIiwiaXRlbXNCUCIsImZpeGVkV2lkdGhCUCIsInNwZWVkQlAiLCJlZGdlUGFkZGluZ0JQIiwiYXV0b0hlaWdodEJQIiwiZ3V0dGVyQlAiLCJpbml0U2hlZXQiLCJpbml0U2xpZGVyVHJhbnNmb3JtIiwidXBkYXRlSW5kZXgiLCJsZWZ0RWRnZSIsInJpZ2h0RWRnZSIsInRyYW5zZm9ybUNvcmUiLCJlbGVtZW50IiwicG9zdGZpeCIsInRvIiwiZHVyYXRpb24iLCJ0aWNrIiwidW5pdCIsImZyb20iLCJwb3NpdGlvblRpY2siLCJyZXNldER1cmF0aW9uIiwiZG9Db250YWluZXJUcmFuc2Zvcm0iLCJnZXRDb250YWluZXJUcmFuc2Zvcm1WYWx1ZSIsIm1vdmVFbGVtZW50IiwidXBkYXRlQ29udGVudFdyYXBwZXJIZWlnaHQiLCJldmUiLCJhbmltYXRlU2xpZGUiLCJ2ZXJzaW9uIiwiZ2V0SW5mbyIsImluZm8iLCJwbGF5Iiwic3RhcnRBdXRvcGxheSIsInBhdXNlIiwidXBkYXRlU2xpZGVySGVpZ2h0IiwidXBkYXRlSW5uZXJXcmFwcGVySGVpZ2h0IiwicmVmcmVzaCIsImRlc3Ryb3kiLCJvd25lck5vZGUiLCJvblJlc2l6ZSIsInRvZ2dsZUF1dG9wbGF5IiwiY2xlYXJJbnRlcnZhbCIsImh0bWxMaXN0IiwicHJldkVsIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInBhcmVudEVsIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJyZWJ1aWxkIiwiY29uZGl0aW9uIiwiaW5kIiwiZ2V0QWJzSW5kZXgiLCJhYnNJbmRleCIsImlubmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsImdldEluc2VydFBvc2l0aW9uIiwicG9zIiwiZ2V0Q2xpZW50V2lkdGgiLCJyZWN0IiwicmlnaHQiLCJnYXAiLCJ3dyIsImVkZ2VQYWRkaW5nVGVtIiwiZ3V0dGVyVGVtIiwiZml4ZWRXaWR0aFRlbSIsInNwZWVkVGVtIiwiZ3V0dGVyVGVtVW5pdCIsIml0ZW1zVGVtIiwiZGl2aWRlbmQiLCJnZXRDU1NQcmVmaXgiLCJzdWJzdHJpbmciLCJpbWdzIiwicXVlcnlTZWxlY3RvckFsbCIsInNyYyIsImltZ3NMb2FkZWRDaGVjayIsImdldEltYWdlQXJyYXkiLCJpbml0U2xpZGVyVHJhbnNmb3JtU3R5bGVDaGVjayIsImRvQ29udGFpbmVyVHJhbnNmb3JtU2lsZW50IiwiaW5pdFRvb2xzIiwiaW5pdEV2ZW50cyIsInN0eWxlc0FwcGxpY2F0aW9uQ2hlY2siLCJ0b0ZpeGVkIiwiaW5pdFNsaWRlclRyYW5zZm9ybUNvcmUiLCJzZXRTbGlkZVBvc2l0aW9ucyIsInVwZGF0ZVNsaWRlU3RhdHVzIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiZ2V0TGl2ZVJlZ2lvblN0ciIsInR4dCIsIm5hdkh0bWwiLCJoaWRkZW5TdHIiLCJ1cGRhdGVOYXZWaXNpYmlsaXR5IiwiaXNCdXR0b24iLCJ1cGRhdGVDb250cm9sc1N0YXR1cyIsImRpc2FibGVVSSIsInJlc2l6ZVRhc2tzIiwiZG9BdXRvSGVpZ2h0IiwiZG9MYXp5TG9hZCIsImRpc2FibGVTbGlkZXIiLCJmcmVlemVTbGlkZXIiLCJhZGRpdGlvbmFsVXBkYXRlcyIsImJwQ2hhbmdlZCIsImJyZWFrcG9pbnRab25lVGVtIiwibmVlZENvbnRhaW5lclRyYW5zZm9ybSIsImluZENoYW5nZWQiLCJpdGVtc0NoYW5nZWQiLCJkaXNhYmxlVGVtIiwiZnJlZXplVGVtIiwiYXJyb3dLZXlzVGVtIiwiY29udHJvbHNUZW0iLCJuYXZUZW0iLCJ0b3VjaFRlbSIsIm1vdXNlRHJhZ1RlbSIsImF1dG9wbGF5VGVtIiwiYXV0b3BsYXlIb3ZlclBhdXNlVGVtIiwiYXV0b3BsYXlSZXNldE9uVmlzaWJpbGl0eVRlbSIsImluZGV4VGVtIiwiYXV0b0hlaWdodFRlbSIsImNvbnRyb2xzVGV4dFRlbSIsImNlbnRlclRlbSIsImF1dG9wbGF5VGV4dFRlbSIsImNsYXNzTiIsImVuYWJsZVVJIiwiZW5hYmxlU2xpZGVyIiwibWFyZ2luIiwidW5mcmVlemVTbGlkZXIiLCJoZWlnaHQiLCJodG1sIiwibGVuIiwidXBkYXRlTGl2ZVJlZ2lvbiIsInVwZGF0ZUdhbGxlcnlTbGlkZVBvc2l0aW9ucyIsImF1dG9oZWlnaHRUZW0iLCJkZWxldGVSdWxlIiwicmVtb3ZlUnVsZSIsInJlbW92ZUNTU1J1bGUiLCJ2cCIsImdldFZpc2libGVTbGlkZVJhbmdlIiwic3RhcnQiLCJlbmQiLCJyYW5nZXN0YXJ0IiwicmFuZ2VlbmQiLCJwYXJzZUZsb2F0IiwicG9pbnQiLCJjZWxsIiwic3RvcFByb3BhZ2F0aW9uIiwic3Jjc2V0IiwibmF2UHJldiIsIm5hdkN1cnJlbnQiLCJ1cGRhdGVOYXZTdGF0dXMiLCJnZXRNYXhTbGlkZUhlaWdodCIsInNsaWRlU3RhcnQiLCJzbGlkZVJhbmdlIiwiaGVpZ2h0cyIsIm1heEhlaWdodCIsIndwIiwiYXR0cjIiLCJiYXNlIiwicmFuZ2UiLCJnZXRMb3dlckNhc2VOb2RlTmFtZSIsImlzQXJpYURpc2FibGVkIiwiZGlzRW5hYmxlRWxlbWVudCIsInByZXZEaXNhYmxlZCIsIm5leHREaXNhYmxlZCIsImRpc2FibGVQcmV2IiwiZGlzYWJsZU5leHQiLCJnZXRDZW50ZXJHYXAiLCJkZW5vbWluYXRvciIsIm51bWJlciIsImNsYXNzT3V0IiwiY2xhc3NJbiIsImlzT3V0IiwicmVuZGVyIiwic2xpZGVyTW92ZWQiLCJzdHJUcmFucyIsImV2ZW50IiwicHJvcGVydHlOYW1lIiwidGFyZ2V0SW5kZXgiLCJpbmRleEdhcCIsImlzTmFOIiwiZmFjdG9yIiwiZGlyIiwicGFzc0V2ZW50T2JqZWN0IiwidGFyZ2V0SW4iLCJzZXRJbnRlcnZhbCIsInVwZGF0ZUF1dG9wbGF5QnV0dG9uIiwiYWN0aW9uIiwiZm9jdXMiLCJpc1RvdWNoRXZlbnQiLCJjaGFuZ2VkVG91Y2hlcyIsInNyY0VsZW1lbnQiLCJwcmV2ZW50RGVmYXVsdEJlaGF2aW9yIiwicHJldmVudERlZmF1bHQiLCJyZXR1cm5WYWx1ZSIsImdldE1vdmVEaXJlY3Rpb25FeHBlY3RlZCIsImFuZ2xlIiwiYXRhbjIiLCJQSSIsImRpcmVjdGlvbiIsIiQiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhblVwZGF0ZSIsImVyciIsImRpc3QiLCJwcmV2ZW50Q2xpY2siLCJpbmRleE1vdmVkIiwibW92ZWQiLCJyb3VnaCIsImRpc3BsYXlJbmRleCIsInNsaWRlciIsInJvb3QiLCJleHRlbmRPYmplY3QiLCJjb250YWluZXJDbGFzcyIsIjEiLCI3NjciLCJzZXR1cCIsImluaXQiLCJsb2ciLCJnZXRDb25maWdGcm9tRWxlbWVudCIsImFwcGx5U2xpZGVyIiwiZWxlbWVudENvbmZpZyIsInZpZXdwb3J0cyIsInNjcm9sbEJ5IiwicyIsImRvdHMiLCJiaW5kQnJlYWtwb2ludEV2ZW50cyIsInVwZGF0ZUNvbHVtbnNDb3VudCIsImJpbmQiLCJjdXJyZW50SXRlbXNDb3VudCIsIm8xIiwibzIiLCJhc3NpZ24iLCJTbGlkZXJJbml0aWFsaXplciIsImluaXRpYWxpemVTbGlkZXJzIiwiYmluZEV2ZW50cyIsImluaXRpYWxpemVTbGlkZXJGcm9tSW5qZWN0aW9uIiwic2xpZGVycyIsImluaXRpYWxpemVTbGlkZXIiLCJkZXRhaWwiLCJiZW9uU2xpZGVycyIsInJlYWR5U3RhdGUiLCJtZXRob2QiLCJQcm9taXNlIiwicmVzb2x2ZSIsImJlb25lIiwiZGlzcGF0Y2hFdmVudCJdLCJtYXBwaW5ncyI6InNCQUNLQSxPQUFPQyxPQUNWRCxPQUFPQyxLQUFPLFNBQVNDLEdBQ3JCLElBQUlELEVBQU8sR0FDWCxJQUFLLElBQUlFLEtBQVFELEVBQ1hGLE9BQU9JLFVBQVVDLGVBQWVDLEtBQUtKLEVBQVFDLElBQy9D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QWdDLFNBQVU3RCxHQUN0REEsRUFBTWdFLE9BQU9oTyxRQUEzQixJQUdJaU8sRUFGWWpFLEVBQU1nRSxPQUFPaGdCLFVBRUQyVixpQkFDMUIseUNBR0VzSyxHQUNGdGpCLE1BQU1uRyxVQUFVMlAsTUFBTXpQLEtBQUt1cEIsR0FBYWhsQixRQUN0QyxTQUFVK1csRUFBU3BYLEdBQ1csWUFBeEJsQixTQUFTd21CLFdBQ1h4bUIsU0FBU2tGLGlCQUNQLG1CQUNBLFdBQ0U5SCxLQUFLaXBCLGlCQUFpQi9OLEVBQVMscUJBQy9CcU4sS0FBS3ZvQixPQUdUQSxLQUFLaXBCLGlCQUFpQi9OLEVBQVMsbUJBRWpDcU4sS0FBS3ZvQixRQUtiNG9CLEVBQWtCbHBCLFVBQVV1cEIsaUJBQW1CLFNBQVUvTixFQUFTbU8sR0FDaEUsT0FBTyxJQUFJQyxTQUFTQyxJQUNsQixJQUFJbEMsRUFBT25NLEdBRVh4YSxPQUFPOG9CLE1BQU1DLGNBQWMsMEJBQTJCLENBQ3BEdk8sUUFBU0EsRUFDVG1PLE9BQVFBLElBR1ZFLFFBS0YsSUFBSVgsRyIsImZpbGUiOiJiYXNlL2NvcmUvanMvc2xpZGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE9iamVjdC5rZXlzXG5pZiAoIU9iamVjdC5rZXlzKSB7XG4gIE9iamVjdC5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIG5hbWUpKSB7XG4gICAgICAgIGtleXMucHVzaChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG59IiwiLy8gQ2hpbGROb2RlLnJlbW92ZVxuaWYoIShcInJlbW92ZVwiIGluIEVsZW1lbnQucHJvdG90eXBlKSl7XG4gIEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCl7XG4gICAgaWYodGhpcy5wYXJlbnROb2RlKSB7XG4gICAgICB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgfVxuICB9O1xufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwidmFyIHdpbiA9IHdpbmRvdztcblxuZXhwb3J0IHZhciByYWYgPSB3aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gIHx8IHdpbi53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgfHwgd2luLm1velJlcXVlc3RBbmltYXRpb25GcmFtZVxuICB8fCB3aW4ubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgfHwgZnVuY3Rpb24oY2IpIHsgcmV0dXJuIHNldFRpbWVvdXQoY2IsIDE2KTsgfTtcbiIsInZhciB3aW4gPSB3aW5kb3c7XG5cbmV4cG9ydCB2YXIgY2FmID0gd2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lXG4gIHx8IHdpbi5tb3pDYW5jZWxBbmltYXRpb25GcmFtZVxuICB8fCBmdW5jdGlvbihpZCl7IGNsZWFyVGltZW91dChpZCk7IH07XG4iLCJleHBvcnQgZnVuY3Rpb24gZXh0ZW5kKCkge1xuICB2YXIgb2JqLCBuYW1lLCBjb3B5LFxuICAgICAgdGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LFxuICAgICAgaSA9IDEsXG4gICAgICBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoKG9iaiA9IGFyZ3VtZW50c1tpXSkgIT09IG51bGwpIHtcbiAgICAgIGZvciAobmFtZSBpbiBvYmopIHtcbiAgICAgICAgY29weSA9IG9ialtuYW1lXTtcblxuICAgICAgICBpZiAodGFyZ2V0ID09PSBjb3B5KSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY29weSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGFyZ2V0W25hbWVdID0gY29weTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBmdW5jdGlvbiBjaGVja1N0b3JhZ2VWYWx1ZSAodmFsdWUpIHtcbiAgcmV0dXJuIFsndHJ1ZScsICdmYWxzZSddLmluZGV4T2YodmFsdWUpID49IDAgPyBKU09OLnBhcnNlKHZhbHVlKSA6IHZhbHVlO1xufSIsImV4cG9ydCBmdW5jdGlvbiBzZXRMb2NhbFN0b3JhZ2Uoc3RvcmFnZSwga2V5LCB2YWx1ZSwgYWNjZXNzKSB7XG4gIGlmIChhY2Nlc3MpIHtcbiAgICB0cnkgeyBzdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7IH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufSIsImV4cG9ydCBmdW5jdGlvbiBnZXRCb2R5ICgpIHtcbiAgdmFyIGRvYyA9IGRvY3VtZW50LFxuICAgICAgYm9keSA9IGRvYy5ib2R5O1xuXG4gIGlmICghYm9keSkge1xuICAgIGJvZHkgPSBkb2MuY3JlYXRlRWxlbWVudCgnYm9keScpO1xuICAgIGJvZHkuZmFrZSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gYm9keTtcbn0iLCJleHBvcnQgdmFyIGRvY0VsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IiwiaW1wb3J0IHsgZG9jRWxlbWVudCB9IGZyb20gJy4vZG9jRWxlbWVudC5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRGYWtlQm9keSAoYm9keSkge1xuICB2YXIgZG9jT3ZlcmZsb3cgPSAnJztcbiAgaWYgKGJvZHkuZmFrZSkge1xuICAgIGRvY092ZXJmbG93ID0gZG9jRWxlbWVudC5zdHlsZS5vdmVyZmxvdztcbiAgICAvL2F2b2lkIGNyYXNoaW5nIElFOCwgaWYgYmFja2dyb3VuZCBpbWFnZSBpcyB1c2VkXG4gICAgYm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gJyc7XG4gICAgLy9TYWZhcmkgNS4xMy81LjEuNCBPU1ggc3RvcHMgbG9hZGluZyBpZiA6Oi13ZWJraXQtc2Nyb2xsYmFyIGlzIHVzZWQgYW5kIHNjcm9sbGJhcnMgYXJlIHZpc2libGVcbiAgICBib2R5LnN0eWxlLm92ZXJmbG93ID0gZG9jRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgIGRvY0VsZW1lbnQuYXBwZW5kQ2hpbGQoYm9keSk7XG4gIH1cblxuICByZXR1cm4gZG9jT3ZlcmZsb3c7XG59IiwiaW1wb3J0IHsgZG9jRWxlbWVudCB9IGZyb20gJy4vZG9jRWxlbWVudC5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldEZha2VCb2R5IChib2R5LCBkb2NPdmVyZmxvdykge1xuICBpZiAoYm9keS5mYWtlKSB7XG4gICAgYm9keS5yZW1vdmUoKTtcbiAgICBkb2NFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gZG9jT3ZlcmZsb3c7XG4gICAgLy8gVHJpZ2dlciBsYXlvdXQgc28ga2luZXRpYyBzY3JvbGxpbmcgaXNuJ3QgZGlzYWJsZWQgaW4gaU9TNitcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBkb2NFbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgfVxufSIsIi8vIGNyb3NzIGJyb3dzZXJzIGFkZFJ1bGUgbWV0aG9kXG5pbXBvcnQgeyByYWYgfSBmcm9tICcuL3JhZi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gYWRkQ1NTUnVsZShzaGVldCwgc2VsZWN0b3IsIHJ1bGVzLCBpbmRleCkge1xuICAvLyByZXR1cm4gcmFmKGZ1bmN0aW9uKCkge1xuICAgICdpbnNlcnRSdWxlJyBpbiBzaGVldCA/XG4gICAgICBzaGVldC5pbnNlcnRSdWxlKHNlbGVjdG9yICsgJ3snICsgcnVsZXMgKyAnfScsIGluZGV4KSA6XG4gICAgICBzaGVldC5hZGRSdWxlKHNlbGVjdG9yLCBydWxlcywgaW5kZXgpO1xuICAvLyB9KTtcbn0iLCJleHBvcnQgZnVuY3Rpb24gZ2V0Q3NzUnVsZXNMZW5ndGgoc2hlZXQpIHtcbiAgdmFyIHJ1bGUgPSAoJ2luc2VydFJ1bGUnIGluIHNoZWV0KSA/IHNoZWV0LmNzc1J1bGVzIDogc2hlZXQucnVsZXM7XG4gIHJldHVybiBydWxlLmxlbmd0aDtcbn0iLCIvLyBodHRwczovL3RvZGRtb3R0by5jb20vZGl0Y2gtdGhlLWFycmF5LWZvcmVhY2gtY2FsbC1ub2RlbGlzdC1oYWNrL1xuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2ggKGFyciwgY2FsbGJhY2ssIHNjb3BlKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNhbGxiYWNrLmNhbGwoc2NvcGUsIGFycltpXSwgaSk7XG4gIH1cbn0iLCJleHBvcnQgdmFyIGNsYXNzTGlzdFN1cHBvcnQgPSAnY2xhc3NMaXN0JyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdfJyk7IiwiaW1wb3J0IHsgY2xhc3NMaXN0U3VwcG9ydCB9IGZyb20gJy4vY2xhc3NMaXN0U3VwcG9ydC5qcyc7XG5cbnZhciBoYXNDbGFzcyA9IGNsYXNzTGlzdFN1cHBvcnQgP1xuICAgIGZ1bmN0aW9uIChlbCwgc3RyKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuY29udGFpbnMoc3RyKTsgfSA6XG4gICAgZnVuY3Rpb24gKGVsLCBzdHIpIHsgcmV0dXJuIGVsLmNsYXNzTmFtZS5pbmRleE9mKHN0cikgPj0gMDsgfTtcblxuZXhwb3J0IHsgY2xhc3NMaXN0U3VwcG9ydCwgaGFzQ2xhc3MgfTsiLCJpbXBvcnQgeyBjbGFzc0xpc3RTdXBwb3J0LCBoYXNDbGFzcyB9IGZyb20gJy4vaGFzQ2xhc3MuanMnO1xudmFyIGFkZENsYXNzID0gY2xhc3NMaXN0U3VwcG9ydCA/XG4gICAgZnVuY3Rpb24gKGVsLCBzdHIpIHtcbiAgICAgIGlmICghaGFzQ2xhc3MoZWwsICBzdHIpKSB7IGVsLmNsYXNzTGlzdC5hZGQoc3RyKTsgfVxuICAgIH0gOlxuICAgIGZ1bmN0aW9uIChlbCwgc3RyKSB7XG4gICAgICBpZiAoIWhhc0NsYXNzKGVsLCAgc3RyKSkgeyBlbC5jbGFzc05hbWUgKz0gJyAnICsgc3RyOyB9XG4gICAgfTtcblxuZXhwb3J0IHsgYWRkQ2xhc3MgfTsiLCJpbXBvcnQgeyBjbGFzc0xpc3RTdXBwb3J0LCBoYXNDbGFzcyB9IGZyb20gJy4vaGFzQ2xhc3MuanMnO1xudmFyIHJlbW92ZUNsYXNzID0gY2xhc3NMaXN0U3VwcG9ydCA/XG4gICAgZnVuY3Rpb24gKGVsLCBzdHIpIHtcbiAgICAgIGlmIChoYXNDbGFzcyhlbCwgIHN0cikpIHsgZWwuY2xhc3NMaXN0LnJlbW92ZShzdHIpOyB9XG4gICAgfSA6XG4gICAgZnVuY3Rpb24gKGVsLCBzdHIpIHtcbiAgICAgIGlmIChoYXNDbGFzcyhlbCwgc3RyKSkgeyBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShzdHIsICcnKTsgfVxuICAgIH07XG5cbmV4cG9ydCB7IHJlbW92ZUNsYXNzIH07IiwiZXhwb3J0IGZ1bmN0aW9uIGhhc0F0dHIoZWwsIGF0dHIpIHtcbiAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZShhdHRyKTtcbn0iLCJleHBvcnQgZnVuY3Rpb24gZ2V0QXR0cihlbCwgYXR0cikge1xuICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKGF0dHIpO1xufSIsImV4cG9ydCBmdW5jdGlvbiBpc05vZGVMaXN0KGVsKSB7XG4gIC8vIE9ubHkgTm9kZUxpc3QgaGFzIHRoZSBcIml0ZW0oKVwiIGZ1bmN0aW9uXG4gIHJldHVybiB0eXBlb2YgZWwuaXRlbSAhPT0gXCJ1bmRlZmluZWRcIjsgXG59IiwiaW1wb3J0IHsgaXNOb2RlTGlzdCB9IGZyb20gXCIuL2lzTm9kZUxpc3QuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldEF0dHJzKGVscywgYXR0cnMpIHtcbiAgZWxzID0gKGlzTm9kZUxpc3QoZWxzKSB8fCBlbHMgaW5zdGFuY2VvZiBBcnJheSkgPyBlbHMgOiBbZWxzXTtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhdHRycykgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7IHJldHVybjsgfVxuXG4gIGZvciAodmFyIGkgPSBlbHMubGVuZ3RoOyBpLS07KSB7XG4gICAgZm9yKHZhciBrZXkgaW4gYXR0cnMpIHtcbiAgICAgIGVsc1tpXS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgeyBpc05vZGVMaXN0IH0gZnJvbSBcIi4vaXNOb2RlTGlzdC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQXR0cnMoZWxzLCBhdHRycykge1xuICBlbHMgPSAoaXNOb2RlTGlzdChlbHMpIHx8IGVscyBpbnN0YW5jZW9mIEFycmF5KSA/IGVscyA6IFtlbHNdO1xuICBhdHRycyA9IChhdHRycyBpbnN0YW5jZW9mIEFycmF5KSA/IGF0dHJzIDogW2F0dHJzXTtcblxuICB2YXIgYXR0ckxlbmd0aCA9IGF0dHJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IGVscy5sZW5ndGg7IGktLTspIHtcbiAgICBmb3IgKHZhciBqID0gYXR0ckxlbmd0aDsgai0tOykge1xuICAgICAgZWxzW2ldLnJlbW92ZUF0dHJpYnV0ZShhdHRyc1tqXSk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGFycmF5RnJvbU5vZGVMaXN0IChubCkge1xuICB2YXIgYXJyID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gbmwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJyLnB1c2gobmxbaV0pO1xuICB9XG4gIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGhpZGVFbGVtZW50KGVsLCBmb3JjZUhpZGUpIHtcbiAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgIT09ICdub25lJykgeyBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOyB9XG59IiwiZXhwb3J0IGZ1bmN0aW9uIHNob3dFbGVtZW50KGVsLCBmb3JjZUhpZGUpIHtcbiAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykgeyBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7IH1cbn0iLCJleHBvcnQgZnVuY3Rpb24gaXNWaXNpYmxlKGVsKSB7XG4gIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZGlzcGxheSAhPT0gJ25vbmUnO1xufSIsImV4cG9ydCBmdW5jdGlvbiB3aGljaFByb3BlcnR5KHByb3BzKXtcbiAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgYXJyID0gW3Byb3BzXSxcbiAgICAgICAgUHJvcHMgPSBwcm9wcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BzLnN1YnN0cigxKSxcbiAgICAgICAgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnLCAnTyddO1xuICAgICAgICBcbiAgICBwcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uKHByZWZpeCkge1xuICAgICAgaWYgKHByZWZpeCAhPT0gJ21zJyB8fCBwcm9wcyA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICAgICAgYXJyLnB1c2gocHJlZml4ICsgUHJvcHMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcHJvcHMgPSBhcnI7XG4gIH1cblxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmYWtlZWxlbWVudCcpLFxuICAgICAgbGVuID0gcHJvcHMubGVuZ3RoO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspe1xuICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG4gICAgaWYoIGVsLnN0eWxlW3Byb3BdICE9PSB1bmRlZmluZWQgKXsgcmV0dXJuIHByb3A7IH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTsgLy8gZXhwbGljaXQgZm9yIGllOS1cbn1cbiIsIi8vIGdldCB0cmFuc2l0aW9uZW5kLCBhbmltYXRpb25lbmQgYmFzZWQgb24gdHJhbnNpdGlvbkR1cmF0aW9uXG4vLyBAcHJvcGluOiBzdHJpbmdcbi8vIEBwcm9wT3V0OiBzdHJpbmcsIGZpcnN0LWxldHRlciB1cHBlcmNhc2Vcbi8vIFVzYWdlOiBnZXRFbmRQcm9wZXJ0eSgnV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uJywgJ1RyYW5zaXRpb24nKSA9PiB3ZWJraXRUcmFuc2l0aW9uRW5kXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5kUHJvcGVydHkocHJvcEluLCBwcm9wT3V0KSB7XG4gIHZhciBlbmRQcm9wID0gZmFsc2U7XG4gIGlmICgvXldlYmtpdC8udGVzdChwcm9wSW4pKSB7XG4gICAgZW5kUHJvcCA9ICd3ZWJraXQnICsgcHJvcE91dCArICdFbmQnO1xuICB9IGVsc2UgaWYgKC9eTy8udGVzdChwcm9wSW4pKSB7XG4gICAgZW5kUHJvcCA9ICdvJyArIHByb3BPdXQgKyAnRW5kJztcbiAgfSBlbHNlIGlmIChwcm9wSW4pIHtcbiAgICBlbmRQcm9wID0gcHJvcE91dC50b0xvd2VyQ2FzZSgpICsgJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIGVuZFByb3A7XG59IiwiLy8gVGVzdCB2aWEgYSBnZXR0ZXIgaW4gdGhlIG9wdGlvbnMgb2JqZWN0IHRvIHNlZSBpZiB0aGUgcGFzc2l2ZSBwcm9wZXJ0eSBpcyBhY2Nlc3NlZFxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xudHJ5IHtcbiAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBudWxsLCBvcHRzKTtcbn0gY2F0Y2ggKGUpIHt9XG5leHBvcnQgdmFyIHBhc3NpdmVPcHRpb24gPSBzdXBwb3J0c1Bhc3NpdmUgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlOyIsImltcG9ydCB7IHBhc3NpdmVPcHRpb24gfSBmcm9tICcuL3Bhc3NpdmVPcHRpb24uanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkRXZlbnRzKGVsLCBvYmosIHByZXZlbnRTY3JvbGxpbmcpIHtcbiAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICB2YXIgb3B0aW9uID0gWyd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZSddLmluZGV4T2YocHJvcCkgPj0gMCAmJiAhcHJldmVudFNjcm9sbGluZyA/IHBhc3NpdmVPcHRpb24gOiBmYWxzZTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKHByb3AsIG9ialtwcm9wXSwgb3B0aW9uKTtcbiAgfVxufSIsImltcG9ydCB7IHBhc3NpdmVPcHRpb24gfSBmcm9tICcuL3Bhc3NpdmVPcHRpb24uanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRXZlbnRzKGVsLCBvYmopIHtcbiAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICB2YXIgb3B0aW9uID0gWyd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZSddLmluZGV4T2YocHJvcCkgPj0gMCA/IHBhc3NpdmVPcHRpb24gOiBmYWxzZTtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHByb3AsIG9ialtwcm9wXSwgb3B0aW9uKTtcbiAgfVxufSIsImV4cG9ydCBmdW5jdGlvbiBFdmVudHMoKSB7XG4gIHJldHVybiB7XG4gICAgdG9waWNzOiB7fSxcbiAgICBvbjogZnVuY3Rpb24gKGV2ZW50TmFtZSwgZm4pIHtcbiAgICAgIHRoaXMudG9waWNzW2V2ZW50TmFtZV0gPSB0aGlzLnRvcGljc1tldmVudE5hbWVdIHx8IFtdO1xuICAgICAgdGhpcy50b3BpY3NbZXZlbnROYW1lXS5wdXNoKGZuKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24oZXZlbnROYW1lLCBmbikge1xuICAgICAgaWYgKHRoaXMudG9waWNzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvcGljc1tldmVudE5hbWVdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMudG9waWNzW2V2ZW50TmFtZV1baV0gPT09IGZuKSB7XG4gICAgICAgICAgICB0aGlzLnRvcGljc1tldmVudE5hbWVdLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZW1pdDogZnVuY3Rpb24gKGV2ZW50TmFtZSwgZGF0YSkge1xuICAgICAgZGF0YS50eXBlID0gZXZlbnROYW1lO1xuICAgICAgaWYgKHRoaXMudG9waWNzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgdGhpcy50b3BpY3NbZXZlbnROYW1lXS5mb3JFYWNoKGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgZm4oZGF0YSwgZXZlbnROYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufTsiLCJpbXBvcnQgJy4vaGVscGVycy9PYmplY3Qua2V5cyc7XG5pbXBvcnQgJy4vaGVscGVycy9jaGlsZE5vZGUucmVtb3ZlJztcbmltcG9ydCB7IHJhZiB9IGZyb20gJy4vaGVscGVycy9yYWYuanMnO1xuaW1wb3J0IHsgY2FmIH0gZnJvbSAnLi9oZWxwZXJzL2NhZi5qcyc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuL2hlbHBlcnMvZXh0ZW5kLmpzJztcbmltcG9ydCB7IGNoZWNrU3RvcmFnZVZhbHVlIH0gZnJvbSAnLi9oZWxwZXJzL2NoZWNrU3RvcmFnZVZhbHVlLmpzJztcbmltcG9ydCB7IHNldExvY2FsU3RvcmFnZSB9IGZyb20gJy4vaGVscGVycy9zZXRMb2NhbFN0b3JhZ2UuanMnO1xuaW1wb3J0IHsgZ2V0U2xpZGVJZCB9IGZyb20gJy4vaGVscGVycy9nZXRTbGlkZUlkLmpzJztcbmltcG9ydCB7IGNhbGMgfSBmcm9tICcuL2hlbHBlcnMvY2FsYy5qcyc7XG5pbXBvcnQgeyBwZXJjZW50YWdlTGF5b3V0IH0gZnJvbSAnLi9oZWxwZXJzL3BlcmNlbnRhZ2VMYXlvdXQuanMnO1xuaW1wb3J0IHsgbWVkaWFxdWVyeVN1cHBvcnQgfSBmcm9tICcuL2hlbHBlcnMvbWVkaWFxdWVyeVN1cHBvcnQuanMnO1xuaW1wb3J0IHsgY3JlYXRlU3R5bGVTaGVldCB9IGZyb20gJy4vaGVscGVycy9jcmVhdGVTdHlsZVNoZWV0LmpzJztcbmltcG9ydCB7IGFkZENTU1J1bGUgfSBmcm9tICcuL2hlbHBlcnMvYWRkQ1NTUnVsZS5qcyc7XG5pbXBvcnQgeyByZW1vdmVDU1NSdWxlIH0gZnJvbSAnLi9oZWxwZXJzL3JlbW92ZUNTU1J1bGUuanMnO1xuaW1wb3J0IHsgZ2V0Q3NzUnVsZXNMZW5ndGggfSBmcm9tICcuL2hlbHBlcnMvZ2V0Q3NzUnVsZXNMZW5ndGguanMnO1xuaW1wb3J0IHsgdG9EZWdyZWUgfSBmcm9tICcuL2hlbHBlcnMvdG9EZWdyZWUuanMnO1xuaW1wb3J0IHsgZ2V0VG91Y2hEaXJlY3Rpb24gfSBmcm9tICcuL2hlbHBlcnMvZ2V0VG91Y2hEaXJlY3Rpb24uanMnO1xuaW1wb3J0IHsgZm9yRWFjaCB9IGZyb20gJy4vaGVscGVycy9mb3JFYWNoLmpzJztcbmltcG9ydCB7IGhhc0NsYXNzIH0gZnJvbSAnLi9oZWxwZXJzL2hhc0NsYXNzLmpzJztcbmltcG9ydCB7IGFkZENsYXNzIH0gZnJvbSAnLi9oZWxwZXJzL2FkZENsYXNzLmpzJztcbmltcG9ydCB7IHJlbW92ZUNsYXNzIH0gZnJvbSAnLi9oZWxwZXJzL3JlbW92ZUNsYXNzLmpzJztcbmltcG9ydCB7IGhhc0F0dHIgfSBmcm9tICcuL2hlbHBlcnMvaGFzQXR0ci5qcyc7XG5pbXBvcnQgeyBnZXRBdHRyIH0gZnJvbSAnLi9oZWxwZXJzL2dldEF0dHIuanMnO1xuaW1wb3J0IHsgc2V0QXR0cnMgfSBmcm9tICcuL2hlbHBlcnMvc2V0QXR0cnMuanMnO1xuaW1wb3J0IHsgcmVtb3ZlQXR0cnMgfSBmcm9tICcuL2hlbHBlcnMvcmVtb3ZlQXR0cnMuanMnO1xuaW1wb3J0IHsgYXJyYXlGcm9tTm9kZUxpc3QgfSBmcm9tICcuL2hlbHBlcnMvYXJyYXlGcm9tTm9kZUxpc3QuanMnO1xuaW1wb3J0IHsgaGlkZUVsZW1lbnQgfSBmcm9tICcuL2hlbHBlcnMvaGlkZUVsZW1lbnQuanMnO1xuaW1wb3J0IHsgc2hvd0VsZW1lbnQgfSBmcm9tICcuL2hlbHBlcnMvc2hvd0VsZW1lbnQuanMnO1xuaW1wb3J0IHsgaXNWaXNpYmxlIH0gZnJvbSAnLi9oZWxwZXJzL2lzVmlzaWJsZS5qcyc7XG5pbXBvcnQgeyB3aGljaFByb3BlcnR5IH0gZnJvbSAnLi9oZWxwZXJzL3doaWNoUHJvcGVydHkuanMnO1xuaW1wb3J0IHsgaGFzM0RUcmFuc2Zvcm1zIH0gZnJvbSAnLi9oZWxwZXJzL2hhczNEVHJhbnNmb3Jtcy5qcyc7XG5pbXBvcnQgeyBnZXRFbmRQcm9wZXJ0eSB9IGZyb20gJy4vaGVscGVycy9nZXRFbmRQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgeyBhZGRFdmVudHMgfSBmcm9tICcuL2hlbHBlcnMvYWRkRXZlbnRzLmpzJztcbmltcG9ydCB7IHJlbW92ZUV2ZW50cyB9IGZyb20gJy4vaGVscGVycy9yZW1vdmVFdmVudHMuanMnO1xuaW1wb3J0IHsgRXZlbnRzIH0gZnJvbSAnLi9oZWxwZXJzL2V2ZW50cy5qcyc7XG5pbXBvcnQgeyBqc1RyYW5zZm9ybSB9IGZyb20gJy4vaGVscGVycy9qc1RyYW5zZm9ybS5qcyc7XG5cbmV4cG9ydCB2YXIgdG5zID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICBjb250YWluZXI6ICcuc2xpZGVyJyxcbiAgICBtb2RlOiAnY2Fyb3VzZWwnLFxuICAgIGF4aXM6ICdob3Jpem9udGFsJyxcbiAgICBpdGVtczogMSxcbiAgICBndXR0ZXI6IDAsXG4gICAgZWRnZVBhZGRpbmc6IDAsXG4gICAgZml4ZWRXaWR0aDogZmFsc2UsXG4gICAgYXV0b1dpZHRoOiBmYWxzZSxcbiAgICB2aWV3cG9ydE1heDogZmFsc2UsXG4gICAgc2xpZGVCeTogMSxcbiAgICBjZW50ZXI6IGZhbHNlLFxuICAgIGNvbnRyb2xzOiB0cnVlLFxuICAgIGNvbnRyb2xzUG9zaXRpb246ICd0b3AnLFxuICAgIGNvbnRyb2xzVGV4dDogWydwcmV2JywgJ25leHQnXSxcbiAgICBjb250cm9sc0NvbnRhaW5lcjogZmFsc2UsXG4gICAgcHJldkJ1dHRvbjogZmFsc2UsXG4gICAgbmV4dEJ1dHRvbjogZmFsc2UsXG4gICAgbmF2OiB0cnVlLFxuICAgIG5hdlBvc2l0aW9uOiAndG9wJyxcbiAgICBuYXZDb250YWluZXI6IGZhbHNlLFxuICAgIG5hdkFzVGh1bWJuYWlsczogZmFsc2UsXG4gICAgYXJyb3dLZXlzOiBmYWxzZSxcbiAgICBzcGVlZDogMzAwLFxuICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICBhdXRvcGxheVBvc2l0aW9uOiAndG9wJyxcbiAgICBhdXRvcGxheVRpbWVvdXQ6IDUwMDAsXG4gICAgYXV0b3BsYXlEaXJlY3Rpb246ICdmb3J3YXJkJyxcbiAgICBhdXRvcGxheVRleHQ6IFsnc3RhcnQnLCAnc3RvcCddLFxuICAgIGF1dG9wbGF5SG92ZXJQYXVzZTogZmFsc2UsXG4gICAgYXV0b3BsYXlCdXR0b246IGZhbHNlLFxuICAgIGF1dG9wbGF5QnV0dG9uT3V0cHV0OiB0cnVlLFxuICAgIGF1dG9wbGF5UmVzZXRPblZpc2liaWxpdHk6IHRydWUsXG4gICAgYW5pbWF0ZUluOiAndG5zLWZhZGVJbicsXG4gICAgYW5pbWF0ZU91dDogJ3Rucy1mYWRlT3V0JyxcbiAgICBhbmltYXRlTm9ybWFsOiAndG5zLW5vcm1hbCcsXG4gICAgYW5pbWF0ZURlbGF5OiBmYWxzZSxcbiAgICBsb29wOiB0cnVlLFxuICAgIHJld2luZDogZmFsc2UsXG4gICAgYXV0b0hlaWdodDogZmFsc2UsXG4gICAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgbGF6eWxvYWQ6IGZhbHNlLFxuICAgIGxhenlsb2FkU2VsZWN0b3I6ICcudG5zLWxhenktaW1nJyxcbiAgICB0b3VjaDogdHJ1ZSxcbiAgICBtb3VzZURyYWc6IGZhbHNlLFxuICAgIHN3aXBlQW5nbGU6IDE1LFxuICAgIG5lc3RlZDogZmFsc2UsXG4gICAgcHJldmVudEFjdGlvbldoZW5SdW5uaW5nOiBmYWxzZSxcbiAgICBwcmV2ZW50U2Nyb2xsT25Ub3VjaDogZmFsc2UsXG4gICAgZnJlZXphYmxlOiB0cnVlLFxuICAgIG9uSW5pdDogZmFsc2UsXG4gICAgdXNlTG9jYWxTdG9yYWdlOiB0cnVlXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuICBcbiAgdmFyIGRvYyA9IGRvY3VtZW50LFxuICAgICAgd2luID0gd2luZG93LFxuICAgICAgS0VZUyA9IHtcbiAgICAgICAgRU5URVI6IDEzLFxuICAgICAgICBTUEFDRTogMzIsXG4gICAgICAgIExFRlQ6IDM3LFxuICAgICAgICBSSUdIVDogMzlcbiAgICAgIH0sXG4gICAgICB0bnNTdG9yYWdlID0ge30sXG4gICAgICBsb2NhbFN0b3JhZ2VBY2Nlc3MgPSBvcHRpb25zLnVzZUxvY2FsU3RvcmFnZTtcblxuICBpZiAobG9jYWxTdG9yYWdlQWNjZXNzKSB7XG4gICAgLy8gY2hlY2sgYnJvd3NlciB2ZXJzaW9uIGFuZCBsb2NhbCBzdG9yYWdlIGFjY2Vzc1xuICAgIHZhciBicm93c2VySW5mbyA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgdmFyIHVpZCA9IG5ldyBEYXRlO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRuc1N0b3JhZ2UgPSB3aW4ubG9jYWxTdG9yYWdlO1xuICAgICAgaWYgKHRuc1N0b3JhZ2UpIHtcbiAgICAgICAgdG5zU3RvcmFnZS5zZXRJdGVtKHVpZCwgdWlkKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlQWNjZXNzID0gdG5zU3RvcmFnZS5nZXRJdGVtKHVpZCkgPT0gdWlkO1xuICAgICAgICB0bnNTdG9yYWdlLnJlbW92ZUl0ZW0odWlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZUFjY2VzcyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCFsb2NhbFN0b3JhZ2VBY2Nlc3MpIHsgdG5zU3RvcmFnZSA9IHt9OyB9XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBsb2NhbFN0b3JhZ2VBY2Nlc3MgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobG9jYWxTdG9yYWdlQWNjZXNzKSB7XG4gICAgICAvLyByZW1vdmUgc3RvcmFnZSB3aGVuIGJyb3dzZXIgdmVyc2lvbiBjaGFuZ2VzXG4gICAgICBpZiAodG5zU3RvcmFnZVsndG5zQXBwJ10gJiYgdG5zU3RvcmFnZVsndG5zQXBwJ10gIT09IGJyb3dzZXJJbmZvKSB7XG4gICAgICAgIFsndEMnLCAndFBMJywgJ3RNUScsICd0VGYnLCAndDNEJywgJ3RURHUnLCAndFREZScsICd0QUR1JywgJ3RBRGUnLCAndFRFJywgJ3RBRSddLmZvckVhY2goZnVuY3Rpb24oaXRlbSkgeyB0bnNTdG9yYWdlLnJlbW92ZUl0ZW0oaXRlbSk7IH0pO1xuICAgICAgfVxuICAgICAgLy8gdXBkYXRlIGJyb3dzZXJJbmZvXG4gICAgICBsb2NhbFN0b3JhZ2VbJ3Ruc0FwcCddID0gYnJvd3NlckluZm87XG4gICAgfVxuICB9XG5cbiAgdmFyIENBTEMgPSB0bnNTdG9yYWdlWyd0QyddID8gY2hlY2tTdG9yYWdlVmFsdWUodG5zU3RvcmFnZVsndEMnXSkgOiBzZXRMb2NhbFN0b3JhZ2UodG5zU3RvcmFnZSwgJ3RDJywgY2FsYygpLCBsb2NhbFN0b3JhZ2VBY2Nlc3MpLFxuICAgICAgUEVSQ0VOVEFHRUxBWU9VVCA9IHRuc1N0b3JhZ2VbJ3RQTCddID8gY2hlY2tTdG9yYWdlVmFsdWUodG5zU3RvcmFnZVsndFBMJ10pIDogc2V0TG9jYWxTdG9yYWdlKHRuc1N0b3JhZ2UsICd0UEwnLCBwZXJjZW50YWdlTGF5b3V0KCksIGxvY2FsU3RvcmFnZUFjY2VzcyksXG4gICAgICBDU1NNUSA9IHRuc1N0b3JhZ2VbJ3RNUSddID8gY2hlY2tTdG9yYWdlVmFsdWUodG5zU3RvcmFnZVsndE1RJ10pIDogc2V0TG9jYWxTdG9yYWdlKHRuc1N0b3JhZ2UsICd0TVEnLCBtZWRpYXF1ZXJ5U3VwcG9ydCgpLCBsb2NhbFN0b3JhZ2VBY2Nlc3MpLFxuICAgICAgVFJBTlNGT1JNID0gdG5zU3RvcmFnZVsndFRmJ10gPyBjaGVja1N0b3JhZ2VWYWx1ZSh0bnNTdG9yYWdlWyd0VGYnXSkgOiBzZXRMb2NhbFN0b3JhZ2UodG5zU3RvcmFnZSwgJ3RUZicsIHdoaWNoUHJvcGVydHkoJ3RyYW5zZm9ybScpLCBsb2NhbFN0b3JhZ2VBY2Nlc3MpLFxuICAgICAgSEFTM0RUUkFOU0ZPUk1TID0gdG5zU3RvcmFnZVsndDNEJ10gPyBjaGVja1N0b3JhZ2VWYWx1ZSh0bnNTdG9yYWdlWyd0M0QnXSkgOiBzZXRMb2NhbFN0b3JhZ2UodG5zU3RvcmFnZSwgJ3QzRCcsIGhhczNEVHJhbnNmb3JtcyhUUkFOU0ZPUk0pLCBsb2NhbFN0b3JhZ2VBY2Nlc3MpLFxuICAgICAgVFJBTlNJVElPTkRVUkFUSU9OID0gdG5zU3RvcmFnZVsndFREdSddID8gY2hlY2tTdG9yYWdlVmFsdWUodG5zU3RvcmFnZVsndFREdSddKSA6IHNldExvY2FsU3RvcmFnZSh0bnNTdG9yYWdlLCAndFREdScsIHdoaWNoUHJvcGVydHkoJ3RyYW5zaXRpb25EdXJhdGlvbicpLCBsb2NhbFN0b3JhZ2VBY2Nlc3MpLFxuICAgICAgVFJBTlNJVElPTkRFTEFZID0gdG5zU3RvcmFnZVsndFREZSddID8gY2hlY2tTdG9yYWdlVmFsdWUodG5zU3RvcmFnZVsndFREZSddKSA6IHNldExvY2FsU3RvcmFnZSh0bnNTdG9yYWdlLCAndFREZScsIHdoaWNoUHJvcGVydHkoJ3RyYW5zaXRpb25EZWxheScpLCBsb2NhbFN0b3JhZ2VBY2Nlc3MpLFxuICAgICAgQU5JTUFUSU9ORFVSQVRJT04gPSB0bnNTdG9yYWdlWyd0QUR1J10gPyBjaGVja1N0b3JhZ2VWYWx1ZSh0bnNTdG9yYWdlWyd0QUR1J10pIDogc2V0TG9jYWxTdG9yYWdlKHRuc1N0b3JhZ2UsICd0QUR1Jywgd2hpY2hQcm9wZXJ0eSgnYW5pbWF0aW9uRHVyYXRpb24nKSwgbG9jYWxTdG9yYWdlQWNjZXNzKSxcbiAgICAgIEFOSU1BVElPTkRFTEFZID0gdG5zU3RvcmFnZVsndEFEZSddID8gY2hlY2tTdG9yYWdlVmFsdWUodG5zU3RvcmFnZVsndEFEZSddKSA6IHNldExvY2FsU3RvcmFnZSh0bnNTdG9yYWdlLCAndEFEZScsIHdoaWNoUHJvcGVydHkoJ2FuaW1hdGlvbkRlbGF5JyksIGxvY2FsU3RvcmFnZUFjY2VzcyksXG4gICAgICBUUkFOU0lUSU9ORU5EID0gdG5zU3RvcmFnZVsndFRFJ10gPyBjaGVja1N0b3JhZ2VWYWx1ZSh0bnNTdG9yYWdlWyd0VEUnXSkgOiBzZXRMb2NhbFN0b3JhZ2UodG5zU3RvcmFnZSwgJ3RURScsIGdldEVuZFByb3BlcnR5KFRSQU5TSVRJT05EVVJBVElPTiwgJ1RyYW5zaXRpb24nKSwgbG9jYWxTdG9yYWdlQWNjZXNzKSxcbiAgICAgIEFOSU1BVElPTkVORCA9IHRuc1N0b3JhZ2VbJ3RBRSddID8gY2hlY2tTdG9yYWdlVmFsdWUodG5zU3RvcmFnZVsndEFFJ10pIDogc2V0TG9jYWxTdG9yYWdlKHRuc1N0b3JhZ2UsICd0QUUnLCBnZXRFbmRQcm9wZXJ0eShBTklNQVRJT05EVVJBVElPTiwgJ0FuaW1hdGlvbicpLCBsb2NhbFN0b3JhZ2VBY2Nlc3MpO1xuXG4gIC8vIGdldCBlbGVtZW50IG5vZGVzIGZyb20gc2VsZWN0b3JzXG4gIHZhciBzdXBwb3J0Q29uc29sZVdhcm4gPSB3aW4uY29uc29sZSAmJiB0eXBlb2Ygd2luLmNvbnNvbGUud2FybiA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgdG5zTGlzdCA9IFsnY29udGFpbmVyJywgJ2NvbnRyb2xzQ29udGFpbmVyJywgJ3ByZXZCdXR0b24nLCAnbmV4dEJ1dHRvbicsICduYXZDb250YWluZXInLCAnYXV0b3BsYXlCdXR0b24nXSwgXG4gICAgICBvcHRpb25zRWxlbWVudHMgPSB7fTtcbiAgICAgIFxuICB0bnNMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9uc1tpdGVtXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBzdHIgPSBvcHRpb25zW2l0ZW1dLFxuICAgICAgICAgIGVsID0gZG9jLnF1ZXJ5U2VsZWN0b3Ioc3RyKTtcbiAgICAgIG9wdGlvbnNFbGVtZW50c1tpdGVtXSA9IHN0cjtcblxuICAgICAgaWYgKGVsICYmIGVsLm5vZGVOYW1lKSB7XG4gICAgICAgIG9wdGlvbnNbaXRlbV0gPSBlbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdXBwb3J0Q29uc29sZVdhcm4pIHsgY29uc29sZS53YXJuKCdDYW5cXCd0IGZpbmQnLCBvcHRpb25zW2l0ZW1dKTsgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBtYWtlIHN1cmUgYXQgbGVhc3QgMSBzbGlkZVxuICBpZiAob3B0aW9ucy5jb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoIDwgMSkge1xuICAgIGlmIChzdXBwb3J0Q29uc29sZVdhcm4pIHsgY29uc29sZS53YXJuKCdObyBzbGlkZXMgZm91bmQgaW4nLCBvcHRpb25zLmNvbnRhaW5lcik7IH1cbiAgICByZXR1cm47XG4gICB9XG5cbiAgLy8gdXBkYXRlIG9wdGlvbnNcbiAgdmFyIHJlc3BvbnNpdmUgPSBvcHRpb25zLnJlc3BvbnNpdmUsXG4gICAgICBuZXN0ZWQgPSBvcHRpb25zLm5lc3RlZCxcbiAgICAgIGNhcm91c2VsID0gb3B0aW9ucy5tb2RlID09PSAnY2Fyb3VzZWwnID8gdHJ1ZSA6IGZhbHNlO1xuXG4gIGlmIChyZXNwb25zaXZlKSB7XG4gICAgLy8gYXBwbHkgcmVzcG9uc2l2ZVswXSB0byBvcHRpb25zIGFuZCByZW1vdmUgaXRcbiAgICBpZiAoMCBpbiByZXNwb25zaXZlKSB7XG4gICAgICBvcHRpb25zID0gZXh0ZW5kKG9wdGlvbnMsIHJlc3BvbnNpdmVbMF0pO1xuICAgICAgZGVsZXRlIHJlc3BvbnNpdmVbMF07XG4gICAgfVxuXG4gICAgdmFyIHJlc3BvbnNpdmVUZW0gPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcmVzcG9uc2l2ZSkge1xuICAgICAgdmFyIHZhbCA9IHJlc3BvbnNpdmVba2V5XTtcbiAgICAgIC8vIHVwZGF0ZSByZXNwb25zaXZlXG4gICAgICAvLyBmcm9tOiAzMDA6IDJcbiAgICAgIC8vIHRvOiBcbiAgICAgIC8vICAgMzAwOiB7IFxuICAgICAgLy8gICAgIGl0ZW1zOiAyIFxuICAgICAgLy8gICB9IFxuICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgPyB7aXRlbXM6IHZhbH0gOiB2YWw7XG4gICAgICByZXNwb25zaXZlVGVtW2tleV0gPSB2YWw7XG4gICAgfVxuICAgIHJlc3BvbnNpdmUgPSByZXNwb25zaXZlVGVtO1xuICAgIHJlc3BvbnNpdmVUZW0gPSBudWxsO1xuICB9XG5cbiAgLy8gdXBkYXRlIG9wdGlvbnNcbiAgZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyAob2JqKSB7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKCFjYXJvdXNlbCkge1xuICAgICAgICBpZiAoa2V5ID09PSAnc2xpZGVCeScpIHsgb2JqW2tleV0gPSAncGFnZSc7IH1cbiAgICAgICAgaWYgKGtleSA9PT0gJ2VkZ2VQYWRkaW5nJykgeyBvYmpba2V5XSA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChrZXkgPT09ICdhdXRvSGVpZ2h0JykgeyBvYmpba2V5XSA9IGZhbHNlOyB9XG4gICAgICB9XG5cbiAgICAgIC8vIHVwZGF0ZSByZXNwb25zaXZlIG9wdGlvbnNcbiAgICAgIGlmIChrZXkgPT09ICdyZXNwb25zaXZlJykgeyB1cGRhdGVPcHRpb25zKG9ialtrZXldKTsgfVxuICAgIH1cbiAgfVxuICBpZiAoIWNhcm91c2VsKSB7IHVwZGF0ZU9wdGlvbnMob3B0aW9ucyk7IH1cblxuXG4gIC8vID09PSBkZWZpbmUgYW5kIHNldCB2YXJpYWJsZXMgPT09XG4gIGlmICghY2Fyb3VzZWwpIHtcbiAgICBvcHRpb25zLmF4aXMgPSAnaG9yaXpvbnRhbCc7XG4gICAgb3B0aW9ucy5zbGlkZUJ5ID0gJ3BhZ2UnO1xuICAgIG9wdGlvbnMuZWRnZVBhZGRpbmcgPSBmYWxzZTtcblxuICAgIHZhciBhbmltYXRlSW4gPSBvcHRpb25zLmFuaW1hdGVJbixcbiAgICAgICAgYW5pbWF0ZU91dCA9IG9wdGlvbnMuYW5pbWF0ZU91dCxcbiAgICAgICAgYW5pbWF0ZURlbGF5ID0gb3B0aW9ucy5hbmltYXRlRGVsYXksXG4gICAgICAgIGFuaW1hdGVOb3JtYWwgPSBvcHRpb25zLmFuaW1hdGVOb3JtYWw7XG4gIH1cblxuICB2YXIgaG9yaXpvbnRhbCA9IG9wdGlvbnMuYXhpcyA9PT0gJ2hvcml6b250YWwnID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgb3V0ZXJXcmFwcGVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgaW5uZXJXcmFwcGVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgbWlkZGxlV3JhcHBlcixcbiAgICAgIGNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyLFxuICAgICAgY29udGFpbmVyUGFyZW50ID0gY29udGFpbmVyLnBhcmVudE5vZGUsXG4gICAgICBjb250YWluZXJIVE1MID0gY29udGFpbmVyLm91dGVySFRNTCxcbiAgICAgIHNsaWRlSXRlbXMgPSBjb250YWluZXIuY2hpbGRyZW4sXG4gICAgICBzbGlkZUNvdW50ID0gc2xpZGVJdGVtcy5sZW5ndGgsXG4gICAgICBicmVha3BvaW50Wm9uZSxcbiAgICAgIHdpbmRvd1dpZHRoID0gZ2V0V2luZG93V2lkdGgoKSxcbiAgICAgIGlzT24gPSBmYWxzZTtcbiAgaWYgKHJlc3BvbnNpdmUpIHsgc2V0QnJlYWtwb2ludFpvbmUoKTsgfVxuICBpZiAoY2Fyb3VzZWwpIHsgY29udGFpbmVyLmNsYXNzTmFtZSArPSAnIHRucy12cGZpeCc7IH1cblxuICAvLyBmaXhlZFdpZHRoOiB2aWV3cG9ydCA+IHJpZ2h0Qm91bmRhcnkgPiBpbmRleE1heFxuICB2YXIgYXV0b1dpZHRoID0gb3B0aW9ucy5hdXRvV2lkdGgsXG4gICAgICBmaXhlZFdpZHRoID0gZ2V0T3B0aW9uKCdmaXhlZFdpZHRoJyksXG4gICAgICBlZGdlUGFkZGluZyA9IGdldE9wdGlvbignZWRnZVBhZGRpbmcnKSxcbiAgICAgIGd1dHRlciA9IGdldE9wdGlvbignZ3V0dGVyJyksXG4gICAgICB2aWV3cG9ydCA9IGdldFZpZXdwb3J0V2lkdGgoKSxcbiAgICAgIGNlbnRlciA9IGdldE9wdGlvbignY2VudGVyJyksXG4gICAgICBpdGVtcyA9ICFhdXRvV2lkdGggPyBNYXRoLmZsb29yKGdldE9wdGlvbignaXRlbXMnKSkgOiAxLFxuICAgICAgc2xpZGVCeSA9IGdldE9wdGlvbignc2xpZGVCeScpLFxuICAgICAgdmlld3BvcnRNYXggPSBvcHRpb25zLnZpZXdwb3J0TWF4IHx8IG9wdGlvbnMuZml4ZWRXaWR0aFZpZXdwb3J0V2lkdGgsXG4gICAgICBhcnJvd0tleXMgPSBnZXRPcHRpb24oJ2Fycm93S2V5cycpLFxuICAgICAgc3BlZWQgPSBnZXRPcHRpb24oJ3NwZWVkJyksXG4gICAgICByZXdpbmQgPSBvcHRpb25zLnJld2luZCxcbiAgICAgIGxvb3AgPSByZXdpbmQgPyBmYWxzZSA6IG9wdGlvbnMubG9vcCxcbiAgICAgIGF1dG9IZWlnaHQgPSBnZXRPcHRpb24oJ2F1dG9IZWlnaHQnKSxcbiAgICAgIGNvbnRyb2xzID0gZ2V0T3B0aW9uKCdjb250cm9scycpLFxuICAgICAgY29udHJvbHNUZXh0ID0gZ2V0T3B0aW9uKCdjb250cm9sc1RleHQnKSxcbiAgICAgIG5hdiA9IGdldE9wdGlvbignbmF2JyksXG4gICAgICB0b3VjaCA9IGdldE9wdGlvbigndG91Y2gnKSxcbiAgICAgIG1vdXNlRHJhZyA9IGdldE9wdGlvbignbW91c2VEcmFnJyksXG4gICAgICBhdXRvcGxheSA9IGdldE9wdGlvbignYXV0b3BsYXknKSxcbiAgICAgIGF1dG9wbGF5VGltZW91dCA9IGdldE9wdGlvbignYXV0b3BsYXlUaW1lb3V0JyksXG4gICAgICBhdXRvcGxheVRleHQgPSBnZXRPcHRpb24oJ2F1dG9wbGF5VGV4dCcpLFxuICAgICAgYXV0b3BsYXlIb3ZlclBhdXNlID0gZ2V0T3B0aW9uKCdhdXRvcGxheUhvdmVyUGF1c2UnKSxcbiAgICAgIGF1dG9wbGF5UmVzZXRPblZpc2liaWxpdHkgPSBnZXRPcHRpb24oJ2F1dG9wbGF5UmVzZXRPblZpc2liaWxpdHknKSxcbiAgICAgIHNoZWV0ID0gY3JlYXRlU3R5bGVTaGVldCgpLFxuICAgICAgbGF6eWxvYWQgPSBvcHRpb25zLmxhenlsb2FkLFxuICAgICAgbGF6eWxvYWRTZWxlY3RvciA9IG9wdGlvbnMubGF6eWxvYWRTZWxlY3RvcixcbiAgICAgIHNsaWRlUG9zaXRpb25zLCAvLyBjb2xsZWN0aW9uIG9mIHNsaWRlIHBvc2l0aW9uc1xuICAgICAgc2xpZGVJdGVtc091dCA9IFtdLFxuICAgICAgY2xvbmVDb3VudCA9IGxvb3AgPyBnZXRDbG9uZUNvdW50Rm9yTG9vcCgpIDogMCxcbiAgICAgIHNsaWRlQ291bnROZXcgPSAhY2Fyb3VzZWwgPyBzbGlkZUNvdW50ICsgY2xvbmVDb3VudCA6IHNsaWRlQ291bnQgKyBjbG9uZUNvdW50ICogMixcbiAgICAgIGhhc1JpZ2h0RGVhZFpvbmUgPSAoZml4ZWRXaWR0aCB8fCBhdXRvV2lkdGgpICYmICFsb29wID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgcmlnaHRCb3VuZGFyeSA9IGZpeGVkV2lkdGggPyBnZXRSaWdodEJvdW5kYXJ5KCkgOiBudWxsLFxuICAgICAgdXBkYXRlSW5kZXhCZWZvcmVUcmFuc2Zvcm0gPSAoIWNhcm91c2VsIHx8ICFsb29wKSA/IHRydWUgOiBmYWxzZSxcbiAgICAgIC8vIHRyYW5zZm9ybVxuICAgICAgdHJhbnNmb3JtQXR0ciA9IGhvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJyxcbiAgICAgIHRyYW5zZm9ybVByZWZpeCA9ICcnLFxuICAgICAgdHJhbnNmb3JtUG9zdGZpeCA9ICcnLFxuICAgICAgLy8gaW5kZXhcbiAgICAgIGdldEluZGV4TWF4ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGZpeGVkV2lkdGgpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7IHJldHVybiBjZW50ZXIgJiYgIWxvb3AgPyBzbGlkZUNvdW50IC0gMSA6IE1hdGguY2VpbCgtIHJpZ2h0Qm91bmRhcnkgLyAoZml4ZWRXaWR0aCArIGd1dHRlcikpOyB9O1xuICAgICAgICB9IGVsc2UgaWYgKGF1dG9XaWR0aCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBzbGlkZUNvdW50TmV3OyBpLS07KSB7XG4gICAgICAgICAgICAgIGlmIChzbGlkZVBvc2l0aW9uc1tpXSA+PSAtIHJpZ2h0Qm91bmRhcnkpIHsgcmV0dXJuIGk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChjZW50ZXIgJiYgY2Fyb3VzZWwgJiYgIWxvb3ApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNsaWRlQ291bnQgLSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGxvb3AgfHwgY2Fyb3VzZWwgPyBNYXRoLm1heCgwLCBzbGlkZUNvdW50TmV3IC0gTWF0aC5jZWlsKGl0ZW1zKSkgOiBzbGlkZUNvdW50TmV3IC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KSgpLFxuICAgICAgaW5kZXggPSBnZXRTdGFydEluZGV4KGdldE9wdGlvbignc3RhcnRJbmRleCcpKSxcbiAgICAgIGluZGV4Q2FjaGVkID0gaW5kZXgsXG4gICAgICBkaXNwbGF5SW5kZXggPSBnZXRDdXJyZW50U2xpZGUoKSxcbiAgICAgIGluZGV4TWluID0gMCxcbiAgICAgIGluZGV4TWF4ID0gIWF1dG9XaWR0aCA/IGdldEluZGV4TWF4KCkgOiBudWxsLFxuICAgICAgLy8gcmVzaXplXG4gICAgICByZXNpemVUaW1lcixcbiAgICAgIHByZXZlbnRBY3Rpb25XaGVuUnVubmluZyA9IG9wdGlvbnMucHJldmVudEFjdGlvbldoZW5SdW5uaW5nLFxuICAgICAgc3dpcGVBbmdsZSA9IG9wdGlvbnMuc3dpcGVBbmdsZSxcbiAgICAgIG1vdmVEaXJlY3Rpb25FeHBlY3RlZCA9IHN3aXBlQW5nbGUgPyAnPycgOiB0cnVlLFxuICAgICAgcnVubmluZyA9IGZhbHNlLFxuICAgICAgb25Jbml0ID0gb3B0aW9ucy5vbkluaXQsXG4gICAgICBldmVudHMgPSBuZXcgRXZlbnRzKCksXG4gICAgICAvLyBpZCwgY2xhc3NcbiAgICAgIG5ld0NvbnRhaW5lckNsYXNzZXMgPSAnIHRucy1zbGlkZXIgdG5zLScgKyBvcHRpb25zLm1vZGUsXG4gICAgICBzbGlkZUlkID0gY29udGFpbmVyLmlkIHx8IGdldFNsaWRlSWQoKSxcbiAgICAgIGRpc2FibGUgPSBnZXRPcHRpb24oJ2Rpc2FibGUnKSxcbiAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICBmcmVlemFibGUgPSBvcHRpb25zLmZyZWV6YWJsZSxcbiAgICAgIGZyZWV6ZSA9IGZyZWV6YWJsZSAmJiAhYXV0b1dpZHRoID8gZ2V0RnJlZXplKCkgOiBmYWxzZSxcbiAgICAgIGZyb3plbiA9IGZhbHNlLFxuICAgICAgY29udHJvbHNFdmVudHMgPSB7XG4gICAgICAgICdjbGljayc6IG9uQ29udHJvbHNDbGljayxcbiAgICAgICAgJ2tleWRvd24nOiBvbkNvbnRyb2xzS2V5ZG93blxuICAgICAgfSxcbiAgICAgIG5hdkV2ZW50cyA9IHtcbiAgICAgICAgJ2NsaWNrJzogb25OYXZDbGljayxcbiAgICAgICAgJ2tleWRvd24nOiBvbk5hdktleWRvd25cbiAgICAgIH0sXG4gICAgICBob3ZlckV2ZW50cyA9IHtcbiAgICAgICAgJ21vdXNlb3Zlcic6IG1vdXNlb3ZlclBhdXNlLFxuICAgICAgICAnbW91c2VvdXQnOiBtb3VzZW91dFJlc3RhcnRcbiAgICAgIH0sXG4gICAgICB2aXNpYmlsaXR5RXZlbnQgPSB7J3Zpc2liaWxpdHljaGFuZ2UnOiBvblZpc2liaWxpdHlDaGFuZ2V9LFxuICAgICAgZG9jbWVudEtleWRvd25FdmVudCA9IHsna2V5ZG93bic6IG9uRG9jdW1lbnRLZXlkb3dufSxcbiAgICAgIHRvdWNoRXZlbnRzID0ge1xuICAgICAgICAndG91Y2hzdGFydCc6IG9uUGFuU3RhcnQsXG4gICAgICAgICd0b3VjaG1vdmUnOiBvblBhbk1vdmUsXG4gICAgICAgICd0b3VjaGVuZCc6IG9uUGFuRW5kLFxuICAgICAgICAndG91Y2hjYW5jZWwnOiBvblBhbkVuZFxuICAgICAgfSwgZHJhZ0V2ZW50cyA9IHtcbiAgICAgICAgJ21vdXNlZG93bic6IG9uUGFuU3RhcnQsXG4gICAgICAgICdtb3VzZW1vdmUnOiBvblBhbk1vdmUsXG4gICAgICAgICdtb3VzZXVwJzogb25QYW5FbmQsXG4gICAgICAgICdtb3VzZWxlYXZlJzogb25QYW5FbmRcbiAgICAgIH0sXG4gICAgICBoYXNDb250cm9scyA9IGhhc09wdGlvbignY29udHJvbHMnKSxcbiAgICAgIGhhc05hdiA9IGhhc09wdGlvbignbmF2JyksXG4gICAgICBuYXZBc1RodW1ibmFpbHMgPSBhdXRvV2lkdGggPyB0cnVlIDogb3B0aW9ucy5uYXZBc1RodW1ibmFpbHMsXG4gICAgICBoYXNBdXRvcGxheSA9IGhhc09wdGlvbignYXV0b3BsYXknKSxcbiAgICAgIGhhc1RvdWNoID0gaGFzT3B0aW9uKCd0b3VjaCcpLFxuICAgICAgaGFzTW91c2VEcmFnID0gaGFzT3B0aW9uKCdtb3VzZURyYWcnKSxcbiAgICAgIHNsaWRlQWN0aXZlQ2xhc3MgPSAndG5zLXNsaWRlLWFjdGl2ZScsXG4gICAgICBpbWdDb21wbGV0ZUNsYXNzID0gJ3Rucy1jb21wbGV0ZScsXG4gICAgICBpbWdFdmVudHMgPSB7XG4gICAgICAgICdsb2FkJzogb25JbWdMb2FkZWQsXG4gICAgICAgICdlcnJvcic6IG9uSW1nRmFpbGVkXG4gICAgICB9LFxuICAgICAgaW1nc0NvbXBsZXRlLFxuICAgICAgbGl2ZXJlZ2lvbkN1cnJlbnQsXG4gICAgICBwcmV2ZW50U2Nyb2xsID0gb3B0aW9ucy5wcmV2ZW50U2Nyb2xsT25Ub3VjaCA9PT0gJ2ZvcmNlJyA/IHRydWUgOiBmYWxzZTtcblxuICAvLyBjb250cm9sc1xuICBpZiAoaGFzQ29udHJvbHMpIHtcbiAgICB2YXIgY29udHJvbHNDb250YWluZXIgPSBvcHRpb25zLmNvbnRyb2xzQ29udGFpbmVyLFxuICAgICAgICBjb250cm9sc0NvbnRhaW5lckhUTUwgPSBvcHRpb25zLmNvbnRyb2xzQ29udGFpbmVyID8gb3B0aW9ucy5jb250cm9sc0NvbnRhaW5lci5vdXRlckhUTUwgOiAnJyxcbiAgICAgICAgcHJldkJ1dHRvbiA9IG9wdGlvbnMucHJldkJ1dHRvbixcbiAgICAgICAgbmV4dEJ1dHRvbiA9IG9wdGlvbnMubmV4dEJ1dHRvbixcbiAgICAgICAgcHJldkJ1dHRvbkhUTUwgPSBvcHRpb25zLnByZXZCdXR0b24gPyBvcHRpb25zLnByZXZCdXR0b24ub3V0ZXJIVE1MIDogJycsXG4gICAgICAgIG5leHRCdXR0b25IVE1MID0gb3B0aW9ucy5uZXh0QnV0dG9uID8gb3B0aW9ucy5uZXh0QnV0dG9uLm91dGVySFRNTCA6ICcnLFxuICAgICAgICBwcmV2SXNCdXR0b24sXG4gICAgICAgIG5leHRJc0J1dHRvbjtcbiAgfVxuXG4gIC8vIG5hdlxuICBpZiAoaGFzTmF2KSB7XG4gICAgdmFyIG5hdkNvbnRhaW5lciA9IG9wdGlvbnMubmF2Q29udGFpbmVyLFxuICAgICAgICBuYXZDb250YWluZXJIVE1MID0gb3B0aW9ucy5uYXZDb250YWluZXIgPyBvcHRpb25zLm5hdkNvbnRhaW5lci5vdXRlckhUTUwgOiAnJyxcbiAgICAgICAgbmF2SXRlbXMsXG4gICAgICAgIHBhZ2VzID0gYXV0b1dpZHRoID8gc2xpZGVDb3VudCA6IGdldFBhZ2VzKCksXG4gICAgICAgIHBhZ2VzQ2FjaGVkID0gMCxcbiAgICAgICAgbmF2Q2xpY2tlZCA9IC0xLFxuICAgICAgICBuYXZDdXJyZW50SW5kZXggPSBnZXRDdXJyZW50TmF2SW5kZXgoKSxcbiAgICAgICAgbmF2Q3VycmVudEluZGV4Q2FjaGVkID0gbmF2Q3VycmVudEluZGV4LFxuICAgICAgICBuYXZBY3RpdmVDbGFzcyA9ICd0bnMtbmF2LWFjdGl2ZScsXG4gICAgICAgIG5hdlN0ciA9ICdDYXJvdXNlbCBQYWdlICcsXG4gICAgICAgIG5hdlN0ckN1cnJlbnQgPSAnIChDdXJyZW50IFNsaWRlKSc7XG4gIH1cblxuICAvLyBhdXRvcGxheVxuICBpZiAoaGFzQXV0b3BsYXkpIHtcbiAgICB2YXIgYXV0b3BsYXlEaXJlY3Rpb24gPSBvcHRpb25zLmF1dG9wbGF5RGlyZWN0aW9uID09PSAnZm9yd2FyZCcgPyAxIDogLTEsXG4gICAgICAgIGF1dG9wbGF5QnV0dG9uID0gb3B0aW9ucy5hdXRvcGxheUJ1dHRvbixcbiAgICAgICAgYXV0b3BsYXlCdXR0b25IVE1MID0gb3B0aW9ucy5hdXRvcGxheUJ1dHRvbiA/IG9wdGlvbnMuYXV0b3BsYXlCdXR0b24ub3V0ZXJIVE1MIDogJycsXG4gICAgICAgIGF1dG9wbGF5SHRtbFN0cmluZ3MgPSBbJzxzcGFuIGNsYXNzPVxcJ3Rucy12aXN1YWxseS1oaWRkZW5cXCc+JywgJyBhbmltYXRpb248L3NwYW4+J10sXG4gICAgICAgIGF1dG9wbGF5VGltZXIsXG4gICAgICAgIGFuaW1hdGluZyxcbiAgICAgICAgYXV0b3BsYXlIb3ZlclBhdXNlZCxcbiAgICAgICAgYXV0b3BsYXlVc2VyUGF1c2VkLFxuICAgICAgICBhdXRvcGxheVZpc2liaWxpdHlQYXVzZWQ7XG4gIH1cblxuICBpZiAoaGFzVG91Y2ggfHwgaGFzTW91c2VEcmFnKSB7XG4gICAgdmFyIGluaXRQb3NpdGlvbiA9IHt9LFxuICAgICAgICBsYXN0UG9zaXRpb24gPSB7fSxcbiAgICAgICAgdHJhbnNsYXRlSW5pdCxcbiAgICAgICAgZGlzWCxcbiAgICAgICAgZGlzWSxcbiAgICAgICAgcGFuU3RhcnQgPSBmYWxzZSxcbiAgICAgICAgcmFmSW5kZXgsXG4gICAgICAgIGdldERpc3QgPSBob3Jpem9udGFsID8gXG4gICAgICAgICAgZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gYS54IC0gYi54OyB9IDpcbiAgICAgICAgICBmdW5jdGlvbihhLCBiKSB7IHJldHVybiBhLnkgLSBiLnk7IH07XG4gIH1cbiAgXG4gIC8vIGRpc2FibGUgc2xpZGVyIHdoZW4gc2xpZGVjb3VudCA8PSBpdGVtc1xuICBpZiAoIWF1dG9XaWR0aCkgeyByZXNldFZhcmlibGVzV2hlbkRpc2FibGUoZGlzYWJsZSB8fCBmcmVlemUpOyB9XG5cbiAgaWYgKFRSQU5TRk9STSkge1xuICAgIHRyYW5zZm9ybUF0dHIgPSBUUkFOU0ZPUk07XG4gICAgdHJhbnNmb3JtUHJlZml4ID0gJ3RyYW5zbGF0ZSc7XG5cbiAgICBpZiAoSEFTM0RUUkFOU0ZPUk1TKSB7XG4gICAgICB0cmFuc2Zvcm1QcmVmaXggKz0gaG9yaXpvbnRhbCA/ICczZCgnIDogJzNkKDBweCwgJztcbiAgICAgIHRyYW5zZm9ybVBvc3RmaXggPSBob3Jpem9udGFsID8gJywgMHB4LCAwcHgpJyA6ICcsIDBweCknO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm1QcmVmaXggKz0gaG9yaXpvbnRhbCA/ICdYKCcgOiAnWSgnO1xuICAgICAgdHJhbnNmb3JtUG9zdGZpeCA9ICcpJztcbiAgICB9XG5cbiAgfVxuXG4gIGlmIChjYXJvdXNlbCkgeyBjb250YWluZXIuY2xhc3NOYW1lID0gY29udGFpbmVyLmNsYXNzTmFtZS5yZXBsYWNlKCd0bnMtdnBmaXgnLCAnJyk7IH1cbiAgaW5pdFN0cnVjdHVyZSgpO1xuICBpbml0U2hlZXQoKTtcbiAgaW5pdFNsaWRlclRyYW5zZm9ybSgpO1xuXG4gIC8vID09PSBDT01NT04gRlVOQ1RJT05TID09PSAvL1xuICBmdW5jdGlvbiByZXNldFZhcmlibGVzV2hlbkRpc2FibGUgKGNvbmRpdGlvbikge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgIGNvbnRyb2xzID0gbmF2ID0gdG91Y2ggPSBtb3VzZURyYWcgPSBhcnJvd0tleXMgPSBhdXRvcGxheSA9IGF1dG9wbGF5SG92ZXJQYXVzZSA9IGF1dG9wbGF5UmVzZXRPblZpc2liaWxpdHkgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDdXJyZW50U2xpZGUgKCkge1xuICAgIHZhciB0ZW0gPSBjYXJvdXNlbCA/IGluZGV4IC0gY2xvbmVDb3VudCA6IGluZGV4O1xuICAgIHdoaWxlICh0ZW0gPCAwKSB7IHRlbSArPSBzbGlkZUNvdW50OyB9XG4gICAgcmV0dXJuIHRlbSVzbGlkZUNvdW50ICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFN0YXJ0SW5kZXggKGluZCkge1xuICAgIGluZCA9IGluZCA/IE1hdGgubWF4KDAsIE1hdGgubWluKGxvb3AgPyBzbGlkZUNvdW50IC0gMSA6IHNsaWRlQ291bnQgLSBpdGVtcywgaW5kKSkgOiAwO1xuICAgIHJldHVybiBjYXJvdXNlbCA/IGluZCArIGNsb25lQ291bnQgOiBpbmQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRBYnNJbmRleCAoaSkge1xuICAgIGlmIChpID09IG51bGwpIHsgaSA9IGluZGV4OyB9XG5cbiAgICBpZiAoY2Fyb3VzZWwpIHsgaSAtPSBjbG9uZUNvdW50OyB9XG4gICAgd2hpbGUgKGkgPCAwKSB7IGkgKz0gc2xpZGVDb3VudDsgfVxuXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoaSVzbGlkZUNvdW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnROYXZJbmRleCAoKSB7XG4gICAgdmFyIGFic0luZGV4ID0gZ2V0QWJzSW5kZXgoKSxcbiAgICAgICAgcmVzdWx0O1xuXG4gICAgcmVzdWx0ID0gbmF2QXNUaHVtYm5haWxzID8gYWJzSW5kZXggOiBcbiAgICAgIGZpeGVkV2lkdGggfHwgYXV0b1dpZHRoID8gTWF0aC5jZWlsKChhYnNJbmRleCArIDEpICogcGFnZXMgLyBzbGlkZUNvdW50IC0gMSkgOiBcbiAgICAgICAgICBNYXRoLmZsb29yKGFic0luZGV4IC8gaXRlbXMpO1xuXG4gICAgLy8gc2V0IGFjdGl2ZSBuYXYgdG8gdGhlIGxhc3Qgb25lIHdoZW4gcmVhY2hlcyB0aGUgcmlnaHQgZWRnZVxuICAgIGlmICghbG9vcCAmJiBjYXJvdXNlbCAmJiBpbmRleCA9PT0gaW5kZXhNYXgpIHsgcmVzdWx0ID0gcGFnZXMgLSAxOyB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SXRlbXNNYXggKCkge1xuICAgIC8vIGZpeGVkV2lkdGggb3IgYXV0b1dpZHRoIHdoaWxlIHZpZXdwb3J0TWF4IGlzIG5vdCBhdmFpbGFibGVcbiAgICBpZiAoYXV0b1dpZHRoIHx8IChmaXhlZFdpZHRoICYmICF2aWV3cG9ydE1heCkpIHtcbiAgICAgIHJldHVybiBzbGlkZUNvdW50IC0gMTtcbiAgICAvLyBtb3N0IGNhc2VzXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdHIgPSBmaXhlZFdpZHRoID8gJ2ZpeGVkV2lkdGgnIDogJ2l0ZW1zJyxcbiAgICAgICAgICBhcnIgPSBbXTtcblxuICAgICAgaWYgKGZpeGVkV2lkdGggfHwgb3B0aW9uc1tzdHJdIDwgc2xpZGVDb3VudCkgeyBhcnIucHVzaChvcHRpb25zW3N0cl0pOyB9XG5cbiAgICAgIGlmIChyZXNwb25zaXZlKSB7XG4gICAgICAgIGZvciAodmFyIGJwIGluIHJlc3BvbnNpdmUpIHtcbiAgICAgICAgICB2YXIgdGVtID0gcmVzcG9uc2l2ZVticF1bc3RyXTtcbiAgICAgICAgICBpZiAodGVtICYmIChmaXhlZFdpZHRoIHx8IHRlbSA8IHNsaWRlQ291bnQpKSB7IGFyci5wdXNoKHRlbSk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWFyci5sZW5ndGgpIHsgYXJyLnB1c2goMCk7IH1cblxuICAgICAgcmV0dXJuIE1hdGguY2VpbChmaXhlZFdpZHRoID8gdmlld3BvcnRNYXggLyBNYXRoLm1pbi5hcHBseShudWxsLCBhcnIpIDogTWF0aC5tYXguYXBwbHkobnVsbCwgYXJyKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2xvbmVDb3VudEZvckxvb3AgKCkge1xuICAgIHZhciBpdGVtc01heCA9IGdldEl0ZW1zTWF4KCksXG4gICAgICAgIHJlc3VsdCA9IGNhcm91c2VsID8gTWF0aC5jZWlsKChpdGVtc01heCAqIDUgLSBzbGlkZUNvdW50KS8yKSA6IChpdGVtc01heCAqIDQgLSBzbGlkZUNvdW50KTtcbiAgICByZXN1bHQgPSBNYXRoLm1heChpdGVtc01heCwgcmVzdWx0KTtcblxuICAgIHJldHVybiBoYXNPcHRpb24oJ2VkZ2VQYWRkaW5nJykgPyByZXN1bHQgKyAxIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0V2luZG93V2lkdGggKCkge1xuICAgIHJldHVybiB3aW4uaW5uZXJXaWR0aCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIHx8IGRvYy5ib2R5LmNsaWVudFdpZHRoO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5zZXJ0UG9zaXRpb24gKHBvcykge1xuICAgIHJldHVybiBwb3MgPT09ICd0b3AnID8gJ2FmdGVyYmVnaW4nIDogJ2JlZm9yZWVuZCc7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDbGllbnRXaWR0aCAoZWwpIHtcbiAgICB2YXIgZGl2ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCByZWN0LCB3aWR0aDtcbiAgICBlbC5hcHBlbmRDaGlsZChkaXYpO1xuICAgIHJlY3QgPSBkaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgd2lkdGggPSByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0O1xuICAgIGRpdi5yZW1vdmUoKTtcbiAgICByZXR1cm4gd2lkdGggfHwgZ2V0Q2xpZW50V2lkdGgoZWwucGFyZW50Tm9kZSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRWaWV3cG9ydFdpZHRoICgpIHtcbiAgICB2YXIgZ2FwID0gZWRnZVBhZGRpbmcgPyBlZGdlUGFkZGluZyAqIDIgLSBndXR0ZXIgOiAwO1xuICAgIHJldHVybiBnZXRDbGllbnRXaWR0aChjb250YWluZXJQYXJlbnQpIC0gZ2FwO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzT3B0aW9uIChpdGVtKSB7XG4gICAgaWYgKG9wdGlvbnNbaXRlbV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocmVzcG9uc2l2ZSkge1xuICAgICAgICBmb3IgKHZhciBicCBpbiByZXNwb25zaXZlKSB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNpdmVbYnBdW2l0ZW1dKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBnZXQgb3B0aW9uOlxuICAvLyBmaXhlZCB3aWR0aDogdmlld3BvcnQsIGZpeGVkV2lkdGgsIGd1dHRlciA9PiBpdGVtc1xuICAvLyBvdGhlcnM6IHdpbmRvdyB3aWR0aCA9PiBhbGwgdmFyaWFibGVzXG4gIC8vIGFsbDogaXRlbXMgPT4gc2xpZGVCeVxuICBmdW5jdGlvbiBnZXRPcHRpb24gKGl0ZW0sIHd3KSB7XG4gICAgaWYgKHd3ID09IG51bGwpIHsgd3cgPSB3aW5kb3dXaWR0aDsgfVxuXG4gICAgaWYgKGl0ZW0gPT09ICdpdGVtcycgJiYgZml4ZWRXaWR0aCkge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKHZpZXdwb3J0ICsgZ3V0dGVyKSAvIChmaXhlZFdpZHRoICsgZ3V0dGVyKSkgfHwgMTtcblxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb3B0aW9uc1tpdGVtXTtcblxuICAgICAgaWYgKHJlc3BvbnNpdmUpIHtcbiAgICAgICAgZm9yICh2YXIgYnAgaW4gcmVzcG9uc2l2ZSkge1xuICAgICAgICAgIC8vIGJwOiBjb252ZXJ0IHN0cmluZyB0byBudW1iZXJcbiAgICAgICAgICBpZiAod3cgPj0gcGFyc2VJbnQoYnApKSB7XG4gICAgICAgICAgICBpZiAoaXRlbSBpbiByZXNwb25zaXZlW2JwXSkgeyByZXN1bHQgPSByZXNwb25zaXZlW2JwXVtpdGVtXTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbSA9PT0gJ3NsaWRlQnknICYmIHJlc3VsdCA9PT0gJ3BhZ2UnKSB7IHJlc3VsdCA9IGdldE9wdGlvbignaXRlbXMnKTsgfVxuICAgICAgaWYgKCFjYXJvdXNlbCAmJiAoaXRlbSA9PT0gJ3NsaWRlQnknIHx8IGl0ZW0gPT09ICdpdGVtcycpKSB7IHJlc3VsdCA9IE1hdGguZmxvb3IocmVzdWx0KTsgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNsaWRlTWFyZ2luTGVmdCAoaSkge1xuICAgIHJldHVybiBDQUxDID8gXG4gICAgICBDQUxDICsgJygnICsgaSAqIDEwMCArICclIC8gJyArIHNsaWRlQ291bnROZXcgKyAnKScgOiBcbiAgICAgIGkgKiAxMDAgLyBzbGlkZUNvdW50TmV3ICsgJyUnO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5uZXJXcmFwcGVyU3R5bGVzIChlZGdlUGFkZGluZ1RlbSwgZ3V0dGVyVGVtLCBmaXhlZFdpZHRoVGVtLCBzcGVlZFRlbSwgYXV0b0hlaWdodEJQKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgaWYgKGVkZ2VQYWRkaW5nVGVtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBnYXAgPSBlZGdlUGFkZGluZ1RlbTtcbiAgICAgIGlmIChndXR0ZXJUZW0pIHsgZ2FwIC09IGd1dHRlclRlbTsgfVxuICAgICAgc3RyID0gaG9yaXpvbnRhbCA/XG4gICAgICAgICdtYXJnaW46IDAgJyArIGdhcCArICdweCAwICcgKyBlZGdlUGFkZGluZ1RlbSArICdweDsnIDpcbiAgICAgICAgJ21hcmdpbjogJyArIGVkZ2VQYWRkaW5nVGVtICsgJ3B4IDAgJyArIGdhcCArICdweCAwOyc7XG4gICAgfSBlbHNlIGlmIChndXR0ZXJUZW0gJiYgIWZpeGVkV2lkdGhUZW0pIHtcbiAgICAgIHZhciBndXR0ZXJUZW1Vbml0ID0gJy0nICsgZ3V0dGVyVGVtICsgJ3B4JyxcbiAgICAgICAgICBkaXIgPSBob3Jpem9udGFsID8gZ3V0dGVyVGVtVW5pdCArICcgMCAwJyA6ICcwICcgKyBndXR0ZXJUZW1Vbml0ICsgJyAwJztcbiAgICAgIHN0ciA9ICdtYXJnaW46IDAgJyArIGRpciArICc7J1xuICAgIH1cblxuICAgIGlmICghY2Fyb3VzZWwgJiYgYXV0b0hlaWdodEJQICYmIFRSQU5TSVRJT05EVVJBVElPTiAmJiBzcGVlZFRlbSkgeyBzdHIgKz0gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUoc3BlZWRUZW0pOyB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENvbnRhaW5lcldpZHRoIChmaXhlZFdpZHRoVGVtLCBndXR0ZXJUZW0sIGl0ZW1zVGVtKSB7XG4gICAgaWYgKGZpeGVkV2lkdGhUZW0pIHtcbiAgICAgIHJldHVybiAoZml4ZWRXaWR0aFRlbSArIGd1dHRlclRlbSkgKiBzbGlkZUNvdW50TmV3ICsgJ3B4JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIENBTEMgP1xuICAgICAgICBDQUxDICsgJygnICsgc2xpZGVDb3VudE5ldyAqIDEwMCArICclIC8gJyArIGl0ZW1zVGVtICsgJyknIDpcbiAgICAgICAgc2xpZGVDb3VudE5ldyAqIDEwMCAvIGl0ZW1zVGVtICsgJyUnO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNsaWRlV2lkdGhTdHlsZSAoZml4ZWRXaWR0aFRlbSwgZ3V0dGVyVGVtLCBpdGVtc1RlbSkge1xuICAgIHZhciB3aWR0aDtcblxuICAgIGlmIChmaXhlZFdpZHRoVGVtKSB7XG4gICAgICB3aWR0aCA9IChmaXhlZFdpZHRoVGVtICsgZ3V0dGVyVGVtKSArICdweCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY2Fyb3VzZWwpIHsgaXRlbXNUZW0gPSBNYXRoLmZsb29yKGl0ZW1zVGVtKTsgfVxuICAgICAgdmFyIGRpdmlkZW5kID0gY2Fyb3VzZWwgPyBzbGlkZUNvdW50TmV3IDogaXRlbXNUZW07XG4gICAgICB3aWR0aCA9IENBTEMgPyBcbiAgICAgICAgQ0FMQyArICcoMTAwJSAvICcgKyBkaXZpZGVuZCArICcpJyA6IFxuICAgICAgICAxMDAgLyBkaXZpZGVuZCArICclJztcbiAgICB9XG5cbiAgICB3aWR0aCA9ICd3aWR0aDonICsgd2lkdGg7XG5cbiAgICAvLyBpbm5lciBzbGlkZXI6IG92ZXJ3cml0ZSBvdXRlciBzbGlkZXIgc3R5bGVzXG4gICAgcmV0dXJuIG5lc3RlZCAhPT0gJ2lubmVyJyA/IHdpZHRoICsgJzsnIDogd2lkdGggKyAnICFpbXBvcnRhbnQ7JztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNsaWRlR3V0dGVyU3R5bGUgKGd1dHRlclRlbSkge1xuICAgIHZhciBzdHIgPSAnJztcblxuICAgIC8vIGd1dHRlciBtYXliZSBpbnRlcmdlciB8fCAwXG4gICAgLy8gc28gY2FuJ3QgdXNlICdpZiAoZ3V0dGVyKSdcbiAgICBpZiAoZ3V0dGVyVGVtICE9PSBmYWxzZSkge1xuICAgICAgdmFyIHByb3AgPSBob3Jpem9udGFsID8gJ3BhZGRpbmctJyA6ICdtYXJnaW4tJyxcbiAgICAgICAgICBkaXIgPSBob3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xuICAgICAgc3RyID0gcHJvcCArICBkaXIgKyAnOiAnICsgZ3V0dGVyVGVtICsgJ3B4Oyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENTU1ByZWZpeCAobmFtZSwgbnVtKSB7XG4gICAgdmFyIHByZWZpeCA9IG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUubGVuZ3RoIC0gbnVtKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChwcmVmaXgpIHsgcHJlZml4ID0gJy0nICsgcHJlZml4ICsgJy0nOyB9XG5cbiAgICByZXR1cm4gcHJlZml4O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUgKHNwZWVkKSB7XG4gICAgcmV0dXJuIGdldENTU1ByZWZpeChUUkFOU0lUSU9ORFVSQVRJT04sIDE4KSArICd0cmFuc2l0aW9uLWR1cmF0aW9uOicgKyBzcGVlZCAvIDEwMDAgKyAnczsnO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QW5pbWF0aW9uRHVyYXRpb25TdHlsZSAoc3BlZWQpIHtcbiAgICByZXR1cm4gZ2V0Q1NTUHJlZml4KEFOSU1BVElPTkRVUkFUSU9OLCAxNykgKyAnYW5pbWF0aW9uLWR1cmF0aW9uOicgKyBzcGVlZCAvIDEwMDAgKyAnczsnO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFN0cnVjdHVyZSAoKSB7XG4gICAgdmFyIGNsYXNzT3V0ZXIgPSAndG5zLW91dGVyJyxcbiAgICAgICAgY2xhc3NJbm5lciA9ICd0bnMtaW5uZXInLFxuICAgICAgICBoYXNHdXR0ZXIgPSBoYXNPcHRpb24oJ2d1dHRlcicpO1xuXG4gICAgb3V0ZXJXcmFwcGVyLmNsYXNzTmFtZSA9IGNsYXNzT3V0ZXI7XG4gICAgaW5uZXJXcmFwcGVyLmNsYXNzTmFtZSA9IGNsYXNzSW5uZXI7XG4gICAgb3V0ZXJXcmFwcGVyLmlkID0gc2xpZGVJZCArICctb3cnO1xuICAgIGlubmVyV3JhcHBlci5pZCA9IHNsaWRlSWQgKyAnLWl3JztcblxuICAgIC8vIHNldCBjb250YWluZXIgcHJvcGVydGllc1xuICAgIGlmIChjb250YWluZXIuaWQgPT09ICcnKSB7IGNvbnRhaW5lci5pZCA9IHNsaWRlSWQ7IH1cbiAgICBuZXdDb250YWluZXJDbGFzc2VzICs9IFBFUkNFTlRBR0VMQVlPVVQgfHwgYXV0b1dpZHRoID8gJyB0bnMtc3VicGl4ZWwnIDogJyB0bnMtbm8tc3VicGl4ZWwnO1xuICAgIG5ld0NvbnRhaW5lckNsYXNzZXMgKz0gQ0FMQyA/ICcgdG5zLWNhbGMnIDogJyB0bnMtbm8tY2FsYyc7XG4gICAgaWYgKGF1dG9XaWR0aCkgeyBuZXdDb250YWluZXJDbGFzc2VzICs9ICcgdG5zLWF1dG93aWR0aCc7IH1cbiAgICBuZXdDb250YWluZXJDbGFzc2VzICs9ICcgdG5zLScgKyBvcHRpb25zLmF4aXM7XG4gICAgY29udGFpbmVyLmNsYXNzTmFtZSArPSBuZXdDb250YWluZXJDbGFzc2VzO1xuXG4gICAgLy8gYWRkIGNvbnN0cmFpbiBsYXllciBmb3IgY2Fyb3VzZWxcbiAgICBpZiAoY2Fyb3VzZWwpIHtcbiAgICAgIG1pZGRsZVdyYXBwZXIgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBtaWRkbGVXcmFwcGVyLmlkID0gc2xpZGVJZCArICctbXcnO1xuICAgICAgbWlkZGxlV3JhcHBlci5jbGFzc05hbWUgPSAndG5zLW92aCc7XG5cbiAgICAgIG91dGVyV3JhcHBlci5hcHBlbmRDaGlsZChtaWRkbGVXcmFwcGVyKTtcbiAgICAgIG1pZGRsZVdyYXBwZXIuYXBwZW5kQ2hpbGQoaW5uZXJXcmFwcGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ZXJXcmFwcGVyLmFwcGVuZENoaWxkKGlubmVyV3JhcHBlcik7XG4gICAgfVxuXG4gICAgaWYgKGF1dG9IZWlnaHQpIHtcbiAgICAgIHZhciB3cCA9IG1pZGRsZVdyYXBwZXIgPyBtaWRkbGVXcmFwcGVyIDogaW5uZXJXcmFwcGVyO1xuICAgICAgd3AuY2xhc3NOYW1lICs9ICcgdG5zLWFoJztcbiAgICB9XG5cbiAgICBjb250YWluZXJQYXJlbnQuaW5zZXJ0QmVmb3JlKG91dGVyV3JhcHBlciwgY29udGFpbmVyKTtcbiAgICBpbm5lcldyYXBwZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIC8vIGFkZCBpZCwgY2xhc3MsIGFyaWEgYXR0cmlidXRlcyBcbiAgICAvLyBiZWZvcmUgY2xvbmUgc2xpZGVzXG4gICAgZm9yRWFjaChzbGlkZUl0ZW1zLCBmdW5jdGlvbihpdGVtLCBpKSB7XG4gICAgICBhZGRDbGFzcyhpdGVtLCAndG5zLWl0ZW0nKTtcbiAgICAgIGlmICghaXRlbS5pZCkgeyBpdGVtLmlkID0gc2xpZGVJZCArICctaXRlbScgKyBpOyB9XG4gICAgICBpZiAoIWNhcm91c2VsICYmIGFuaW1hdGVOb3JtYWwpIHsgYWRkQ2xhc3MoaXRlbSwgYW5pbWF0ZU5vcm1hbCk7IH1cbiAgICAgIHNldEF0dHJzKGl0ZW0sIHtcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vICMjIGNsb25lIHNsaWRlc1xuICAgIC8vIGNhcm91c2VsOiBuICsgc2xpZGVzICsgblxuICAgIC8vIGdhbGxlcnk6ICAgICAgc2xpZGVzICsgblxuICAgIGlmIChjbG9uZUNvdW50KSB7XG4gICAgICB2YXIgZnJhZ21lbnRCZWZvcmUgPSBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBcbiAgICAgICAgICBmcmFnbWVudEFmdGVyID0gZG9jLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgZm9yICh2YXIgaiA9IGNsb25lQ291bnQ7IGotLTspIHtcbiAgICAgICAgdmFyIG51bSA9IGolc2xpZGVDb3VudCxcbiAgICAgICAgICAgIGNsb25lRmlyc3QgPSBzbGlkZUl0ZW1zW251bV0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICByZW1vdmVBdHRycyhjbG9uZUZpcnN0LCAnaWQnKTtcbiAgICAgICAgZnJhZ21lbnRBZnRlci5pbnNlcnRCZWZvcmUoY2xvbmVGaXJzdCwgZnJhZ21lbnRBZnRlci5maXJzdENoaWxkKTtcblxuICAgICAgICBpZiAoY2Fyb3VzZWwpIHtcbiAgICAgICAgICB2YXIgY2xvbmVMYXN0ID0gc2xpZGVJdGVtc1tzbGlkZUNvdW50IC0gMSAtIG51bV0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgIHJlbW92ZUF0dHJzKGNsb25lTGFzdCwgJ2lkJyk7XG4gICAgICAgICAgZnJhZ21lbnRCZWZvcmUuYXBwZW5kQ2hpbGQoY2xvbmVMYXN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb250YWluZXIuaW5zZXJ0QmVmb3JlKGZyYWdtZW50QmVmb3JlLCBjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnRBZnRlcik7XG4gICAgICBzbGlkZUl0ZW1zID0gY29udGFpbmVyLmNoaWxkcmVuO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFNsaWRlclRyYW5zZm9ybSAoKSB7XG4gICAgLy8gIyMgaW1hZ2VzIGxvYWRlZC9mYWlsZWRcbiAgICBpZiAoaGFzT3B0aW9uKCdhdXRvSGVpZ2h0JykgfHwgYXV0b1dpZHRoIHx8ICFob3Jpem9udGFsKSB7XG4gICAgICB2YXIgaW1ncyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKTtcblxuICAgICAgLy8gYWRkIGNvbXBsZXRlIGNsYXNzIGlmIGFsbCBpbWFnZXMgYXJlIGxvYWRlZC9mYWlsZWRcbiAgICAgIGZvckVhY2goaW1ncywgZnVuY3Rpb24oaW1nKSB7XG4gICAgICAgIHZhciBzcmMgPSBpbWcuc3JjO1xuICAgICAgICBcbiAgICAgICAgaWYgKHNyYyAmJiBzcmMuaW5kZXhPZignZGF0YTppbWFnZScpIDwgMCkge1xuICAgICAgICAgIGFkZEV2ZW50cyhpbWcsIGltZ0V2ZW50cyk7XG4gICAgICAgICAgaW1nLnNyYyA9ICcnO1xuICAgICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgICAgICAgYWRkQ2xhc3MoaW1nLCAnbG9hZGluZycpO1xuICAgICAgICB9IGVsc2UgaWYgKCFsYXp5bG9hZCkge1xuICAgICAgICAgIGltZ0xvYWRlZChpbWcpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gQWxsIGltZ3MgYXJlIGNvbXBsZXRlZFxuICAgICAgcmFmKGZ1bmN0aW9uKCl7IGltZ3NMb2FkZWRDaGVjayhhcnJheUZyb21Ob2RlTGlzdChpbWdzKSwgZnVuY3Rpb24oKSB7IGltZ3NDb21wbGV0ZSA9IHRydWU7IH0pOyB9KTtcblxuICAgICAgLy8gQ2hlY2sgaW1ncyBpbiB3aW5kb3cgb25seSBmb3IgYXV0byBoZWlnaHRcbiAgICAgIGlmICghYXV0b1dpZHRoICYmIGhvcml6b250YWwpIHsgaW1ncyA9IGdldEltYWdlQXJyYXkoaW5kZXgsIE1hdGgubWluKGluZGV4ICsgaXRlbXMgLSAxLCBzbGlkZUNvdW50TmV3IC0gMSkpOyB9XG5cbiAgICAgIGxhenlsb2FkID8gaW5pdFNsaWRlclRyYW5zZm9ybVN0eWxlQ2hlY2soKSA6IHJhZihmdW5jdGlvbigpeyBpbWdzTG9hZGVkQ2hlY2soYXJyYXlGcm9tTm9kZUxpc3QoaW1ncyksIGluaXRTbGlkZXJUcmFuc2Zvcm1TdHlsZUNoZWNrKTsgfSk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gc2V0IGNvbnRhaW5lciB0cmFuc2Zvcm0gcHJvcGVydHlcbiAgICAgIGlmIChjYXJvdXNlbCkgeyBkb0NvbnRhaW5lclRyYW5zZm9ybVNpbGVudCgpOyB9XG5cbiAgICAgIC8vIHVwZGF0ZSBzbGlkZXIgdG9vbHMgYW5kIGV2ZW50c1xuICAgICAgaW5pdFRvb2xzKCk7XG4gICAgICBpbml0RXZlbnRzKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFNsaWRlclRyYW5zZm9ybVN0eWxlQ2hlY2sgKCkge1xuICAgIGlmIChhdXRvV2lkdGgpIHtcbiAgICAgIC8vIGNoZWNrIHN0eWxlcyBhcHBsaWNhdGlvblxuICAgICAgdmFyIG51bSA9IGxvb3AgPyBpbmRleCA6IHNsaWRlQ291bnQgLSAxO1xuICAgICAgKGZ1bmN0aW9uIHN0eWxlc0FwcGxpY2F0aW9uQ2hlY2soKSB7XG4gICAgICAgIHNsaWRlSXRlbXNbbnVtIC0gMV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkucmlnaHQudG9GaXhlZCgyKSA9PT0gc2xpZGVJdGVtc1tudW1dLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQudG9GaXhlZCgyKSA/XG4gICAgICAgIGluaXRTbGlkZXJUcmFuc2Zvcm1Db3JlKCkgOlxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7IHN0eWxlc0FwcGxpY2F0aW9uQ2hlY2soKSB9LCAxNik7XG4gICAgICB9KSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0U2xpZGVyVHJhbnNmb3JtQ29yZSgpO1xuICAgIH1cbiAgfVxuXG5cbiAgZnVuY3Rpb24gaW5pdFNsaWRlclRyYW5zZm9ybUNvcmUgKCkge1xuICAgIC8vIHJ1biBGbigpcyB3aGljaCBhcmUgcmVseSBvbiBpbWFnZSBsb2FkaW5nXG4gICAgaWYgKCFob3Jpem9udGFsIHx8IGF1dG9XaWR0aCkge1xuICAgICAgc2V0U2xpZGVQb3NpdGlvbnMoKTtcblxuICAgICAgaWYgKGF1dG9XaWR0aCkge1xuICAgICAgICByaWdodEJvdW5kYXJ5ID0gZ2V0UmlnaHRCb3VuZGFyeSgpO1xuICAgICAgICBpZiAoZnJlZXphYmxlKSB7IGZyZWV6ZSA9IGdldEZyZWV6ZSgpOyB9XG4gICAgICAgIGluZGV4TWF4ID0gZ2V0SW5kZXhNYXgoKTsgLy8gPD0gc2xpZGVQb3NpdGlvbnMsIHJpZ2h0Qm91bmRhcnkgPD1cbiAgICAgICAgcmVzZXRWYXJpYmxlc1doZW5EaXNhYmxlKGRpc2FibGUgfHwgZnJlZXplKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZUNvbnRlbnRXcmFwcGVySGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0IGNvbnRhaW5lciB0cmFuc2Zvcm0gcHJvcGVydHlcbiAgICBpZiAoY2Fyb3VzZWwpIHsgZG9Db250YWluZXJUcmFuc2Zvcm1TaWxlbnQoKTsgfVxuXG4gICAgLy8gdXBkYXRlIHNsaWRlciB0b29scyBhbmQgZXZlbnRzXG4gICAgaW5pdFRvb2xzKCk7XG4gICAgaW5pdEV2ZW50cygpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFNoZWV0ICgpIHtcbiAgICAvLyBnYWxsZXJ5OlxuICAgIC8vIHNldCBhbmltYXRpb24gY2xhc3NlcyBhbmQgbGVmdCB2YWx1ZSBmb3IgZ2FsbGVyeSBzbGlkZXJcbiAgICBpZiAoIWNhcm91c2VsKSB7IFxuICAgICAgZm9yICh2YXIgaSA9IGluZGV4LCBsID0gaW5kZXggKyBNYXRoLm1pbihzbGlkZUNvdW50LCBpdGVtcyk7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBzbGlkZUl0ZW1zW2ldO1xuICAgICAgICBpdGVtLnN0eWxlLmxlZnQgPSAoaSAtIGluZGV4KSAqIDEwMCAvIGl0ZW1zICsgJyUnO1xuICAgICAgICBhZGRDbGFzcyhpdGVtLCBhbmltYXRlSW4pO1xuICAgICAgICByZW1vdmVDbGFzcyhpdGVtLCBhbmltYXRlTm9ybWFsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAjIyMjIExBWU9VVFxuXG4gICAgLy8gIyMgSU5MSU5FLUJMT0NLIFZTIEZMT0FUXG5cbiAgICAvLyAjIyBQZXJjZW50YWdlTGF5b3V0OlxuICAgIC8vIHNsaWRlczogaW5saW5lLWJsb2NrXG4gICAgLy8gcmVtb3ZlIGJsYW5rIHNwYWNlIGJldHdlZW4gc2xpZGVzIGJ5IHNldCBmb250LXNpemU6IDBcblxuICAgIC8vICMjIE5vbiBQZXJjZW50YWdlTGF5b3V0OlxuICAgIC8vIHNsaWRlczogZmxvYXRcbiAgICAvLyAgICAgICAgIG1hcmdpbi1yaWdodDogLTEwMCVcbiAgICAvLyAgICAgICAgIG1hcmdpbi1sZWZ0OiB+XG5cbiAgICAvLyBSZXNvdXJjZTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvMTQ3dXAyNDV3d1RYZVFZdmUzQlJTQUQ0b1ZjdlFtdUdzRnRlSk9lQTV4TlEvZWRpdD91c3A9c2hhcmluZ1xuICAgIGlmIChob3Jpem9udGFsKSB7XG4gICAgICBpZiAoUEVSQ0VOVEFHRUxBWU9VVCB8fCBhdXRvV2lkdGgpIHtcbiAgICAgICAgYWRkQ1NTUnVsZShzaGVldCwgJyMnICsgc2xpZGVJZCArICcgPiAudG5zLWl0ZW0nLCAnZm9udC1zaXplOicgKyB3aW4uZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZUl0ZW1zWzBdKS5mb250U2l6ZSArICc7JywgZ2V0Q3NzUnVsZXNMZW5ndGgoc2hlZXQpKTtcbiAgICAgICAgYWRkQ1NTUnVsZShzaGVldCwgJyMnICsgc2xpZGVJZCwgJ2ZvbnQtc2l6ZTowOycsIGdldENzc1J1bGVzTGVuZ3RoKHNoZWV0KSk7XG4gICAgICB9IGVsc2UgaWYgKGNhcm91c2VsKSB7XG4gICAgICAgIGZvckVhY2goc2xpZGVJdGVtcywgZnVuY3Rpb24gKHNsaWRlLCBpKSB7XG4gICAgICAgICAgc2xpZGUuc3R5bGUubWFyZ2luTGVmdCA9IGdldFNsaWRlTWFyZ2luTGVmdChpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyAjIyBCQVNJQyBTVFlMRVNcbiAgICBpZiAoQ1NTTVEpIHtcbiAgICAgIC8vIG1pZGRsZSB3cmFwcGVyIHN0eWxlXG4gICAgICBpZiAoVFJBTlNJVElPTkRVUkFUSU9OKSB7XG4gICAgICAgIHZhciBzdHIgPSBtaWRkbGVXcmFwcGVyICYmIG9wdGlvbnMuYXV0b0hlaWdodCA/IGdldFRyYW5zaXRpb25EdXJhdGlvblN0eWxlKG9wdGlvbnMuc3BlZWQpIDogJyc7XG4gICAgICAgIGFkZENTU1J1bGUoc2hlZXQsICcjJyArIHNsaWRlSWQgKyAnLW13Jywgc3RyLCBnZXRDc3NSdWxlc0xlbmd0aChzaGVldCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBpbm5lciB3cmFwcGVyIHN0eWxlc1xuICAgICAgc3RyID0gZ2V0SW5uZXJXcmFwcGVyU3R5bGVzKG9wdGlvbnMuZWRnZVBhZGRpbmcsIG9wdGlvbnMuZ3V0dGVyLCBvcHRpb25zLmZpeGVkV2lkdGgsIG9wdGlvbnMuc3BlZWQsIG9wdGlvbnMuYXV0b0hlaWdodCk7XG4gICAgICBhZGRDU1NSdWxlKHNoZWV0LCAnIycgKyBzbGlkZUlkICsgJy1pdycsIHN0ciwgZ2V0Q3NzUnVsZXNMZW5ndGgoc2hlZXQpKTtcblxuICAgICAgLy8gY29udGFpbmVyIHN0eWxlc1xuICAgICAgaWYgKGNhcm91c2VsKSB7XG4gICAgICAgIHN0ciA9IGhvcml6b250YWwgJiYgIWF1dG9XaWR0aCA/ICd3aWR0aDonICsgZ2V0Q29udGFpbmVyV2lkdGgob3B0aW9ucy5maXhlZFdpZHRoLCBvcHRpb25zLmd1dHRlciwgb3B0aW9ucy5pdGVtcykgKyAnOycgOiAnJztcbiAgICAgICAgaWYgKFRSQU5TSVRJT05EVVJBVElPTikgeyBzdHIgKz0gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUoc3BlZWQpOyB9XG4gICAgICAgIGFkZENTU1J1bGUoc2hlZXQsICcjJyArIHNsaWRlSWQsIHN0ciwgZ2V0Q3NzUnVsZXNMZW5ndGgoc2hlZXQpKTtcbiAgICAgIH1cblxuICAgICAgLy8gc2xpZGUgc3R5bGVzXG4gICAgICBzdHIgPSBob3Jpem9udGFsICYmICFhdXRvV2lkdGggPyBnZXRTbGlkZVdpZHRoU3R5bGUob3B0aW9ucy5maXhlZFdpZHRoLCBvcHRpb25zLmd1dHRlciwgb3B0aW9ucy5pdGVtcykgOiAnJztcbiAgICAgIGlmIChvcHRpb25zLmd1dHRlcikgeyBzdHIgKz0gZ2V0U2xpZGVHdXR0ZXJTdHlsZShvcHRpb25zLmd1dHRlcik7IH1cbiAgICAgIC8vIHNldCBnYWxsZXJ5IGl0ZW1zIHRyYW5zaXRpb24tZHVyYXRpb25cbiAgICAgIGlmICghY2Fyb3VzZWwpIHtcbiAgICAgICAgaWYgKFRSQU5TSVRJT05EVVJBVElPTikgeyBzdHIgKz0gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUoc3BlZWQpOyB9XG4gICAgICAgIGlmIChBTklNQVRJT05EVVJBVElPTikgeyBzdHIgKz0gZ2V0QW5pbWF0aW9uRHVyYXRpb25TdHlsZShzcGVlZCk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzdHIpIHsgYWRkQ1NTUnVsZShzaGVldCwgJyMnICsgc2xpZGVJZCArICcgPiAudG5zLWl0ZW0nLCBzdHIsIGdldENzc1J1bGVzTGVuZ3RoKHNoZWV0KSk7IH1cblxuICAgIC8vIG5vbiBDU1MgbWVkaWFxdWVyaWVzOiBJRThcbiAgICAvLyAjIyB1cGRhdGUgaW5uZXIgd3JhcHBlciwgY29udGFpbmVyLCBzbGlkZXMgaWYgbmVlZGVkXG4gICAgLy8gc2V0IGlubGluZSBzdHlsZXMgZm9yIGlubmVyIHdyYXBwZXIgJiBjb250YWluZXJcbiAgICAvLyBpbnNlcnQgc3R5bGVzaGVldCAob25lIGxpbmUpIGZvciBzbGlkZXMgb25seSAoc2luY2Ugc2xpZGVzIGFyZSBtYW55KVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBtaWRkbGUgd3JhcHBlciBzdHlsZXNcbiAgICAgIHVwZGF0ZV9jYXJvdXNlbF90cmFuc2l0aW9uX2R1cmF0aW9uKCk7XG5cbiAgICAgIC8vIGlubmVyIHdyYXBwZXIgc3R5bGVzXG4gICAgICBpbm5lcldyYXBwZXIuc3R5bGUuY3NzVGV4dCA9IGdldElubmVyV3JhcHBlclN0eWxlcyhlZGdlUGFkZGluZywgZ3V0dGVyLCBmaXhlZFdpZHRoLCBhdXRvSGVpZ2h0KTtcblxuICAgICAgLy8gY29udGFpbmVyIHN0eWxlc1xuICAgICAgaWYgKGNhcm91c2VsICYmIGhvcml6b250YWwgJiYgIWF1dG9XaWR0aCkge1xuICAgICAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSBnZXRDb250YWluZXJXaWR0aChmaXhlZFdpZHRoLCBndXR0ZXIsIGl0ZW1zKTtcbiAgICAgIH1cblxuICAgICAgLy8gc2xpZGUgc3R5bGVzXG4gICAgICB2YXIgc3RyID0gaG9yaXpvbnRhbCAmJiAhYXV0b1dpZHRoID8gZ2V0U2xpZGVXaWR0aFN0eWxlKGZpeGVkV2lkdGgsIGd1dHRlciwgaXRlbXMpIDogJyc7XG4gICAgICBpZiAoZ3V0dGVyKSB7IHN0ciArPSBnZXRTbGlkZUd1dHRlclN0eWxlKGd1dHRlcik7IH1cblxuICAgICAgLy8gYXBwZW5kIHRvIHRoZSBsYXN0IGxpbmVcbiAgICAgIGlmIChzdHIpIHsgYWRkQ1NTUnVsZShzaGVldCwgJyMnICsgc2xpZGVJZCArICcgPiAudG5zLWl0ZW0nLCBzdHIsIGdldENzc1J1bGVzTGVuZ3RoKHNoZWV0KSk7IH1cbiAgICB9XG5cbiAgICAvLyAjIyBNRURJQVFVRVJJRVNcbiAgICBpZiAocmVzcG9uc2l2ZSAmJiBDU1NNUSkge1xuICAgICAgZm9yICh2YXIgYnAgaW4gcmVzcG9uc2l2ZSkge1xuICAgICAgICAvLyBicDogY29udmVydCBzdHJpbmcgdG8gbnVtYmVyXG4gICAgICAgIGJwID0gcGFyc2VJbnQoYnApO1xuXG4gICAgICAgIHZhciBvcHRzID0gcmVzcG9uc2l2ZVticF0sXG4gICAgICAgICAgICBzdHIgPSAnJyxcbiAgICAgICAgICAgIG1pZGRsZVdyYXBwZXJTdHIgPSAnJyxcbiAgICAgICAgICAgIGlubmVyV3JhcHBlclN0ciA9ICcnLFxuICAgICAgICAgICAgY29udGFpbmVyU3RyID0gJycsXG4gICAgICAgICAgICBzbGlkZVN0ciA9ICcnLFxuICAgICAgICAgICAgaXRlbXNCUCA9ICFhdXRvV2lkdGggPyBnZXRPcHRpb24oJ2l0ZW1zJywgYnApIDogbnVsbCxcbiAgICAgICAgICAgIGZpeGVkV2lkdGhCUCA9IGdldE9wdGlvbignZml4ZWRXaWR0aCcsIGJwKSxcbiAgICAgICAgICAgIHNwZWVkQlAgPSBnZXRPcHRpb24oJ3NwZWVkJywgYnApLFxuICAgICAgICAgICAgZWRnZVBhZGRpbmdCUCA9IGdldE9wdGlvbignZWRnZVBhZGRpbmcnLCBicCksXG4gICAgICAgICAgICBhdXRvSGVpZ2h0QlAgPSBnZXRPcHRpb24oJ2F1dG9IZWlnaHQnLCBicCksXG4gICAgICAgICAgICBndXR0ZXJCUCA9IGdldE9wdGlvbignZ3V0dGVyJywgYnApO1xuXG4gICAgICAgIC8vIG1pZGRsZSB3cmFwcGVyIHN0cmluZ1xuICAgICAgICBpZiAoVFJBTlNJVElPTkRVUkFUSU9OICYmIG1pZGRsZVdyYXBwZXIgJiYgZ2V0T3B0aW9uKCdhdXRvSGVpZ2h0JywgYnApICYmICdzcGVlZCcgaW4gb3B0cykge1xuICAgICAgICAgIG1pZGRsZVdyYXBwZXJTdHIgPSAnIycgKyBzbGlkZUlkICsgJy1td3snICsgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUoc3BlZWRCUCkgKyAnfSc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbm5lciB3cmFwcGVyIHN0cmluZ1xuICAgICAgICBpZiAoJ2VkZ2VQYWRkaW5nJyBpbiBvcHRzIHx8ICdndXR0ZXInIGluIG9wdHMpIHtcbiAgICAgICAgICBpbm5lcldyYXBwZXJTdHIgPSAnIycgKyBzbGlkZUlkICsgJy1pd3snICsgZ2V0SW5uZXJXcmFwcGVyU3R5bGVzKGVkZ2VQYWRkaW5nQlAsIGd1dHRlckJQLCBmaXhlZFdpZHRoQlAsIHNwZWVkQlAsIGF1dG9IZWlnaHRCUCkgKyAnfSc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb250YWluZXIgc3RyaW5nXG4gICAgICAgIGlmIChjYXJvdXNlbCAmJiBob3Jpem9udGFsICYmICFhdXRvV2lkdGggJiYgKCdmaXhlZFdpZHRoJyBpbiBvcHRzIHx8ICdpdGVtcycgaW4gb3B0cyB8fCAoZml4ZWRXaWR0aCAmJiAnZ3V0dGVyJyBpbiBvcHRzKSkpIHtcbiAgICAgICAgICBjb250YWluZXJTdHIgPSAnd2lkdGg6JyArIGdldENvbnRhaW5lcldpZHRoKGZpeGVkV2lkdGhCUCwgZ3V0dGVyQlAsIGl0ZW1zQlApICsgJzsnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUUkFOU0lUSU9ORFVSQVRJT04gJiYgJ3NwZWVkJyBpbiBvcHRzKSB7XG4gICAgICAgICAgY29udGFpbmVyU3RyICs9IGdldFRyYW5zaXRpb25EdXJhdGlvblN0eWxlKHNwZWVkQlApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250YWluZXJTdHIpIHtcbiAgICAgICAgICBjb250YWluZXJTdHIgPSAnIycgKyBzbGlkZUlkICsgJ3snICsgY29udGFpbmVyU3RyICsgJ30nO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2xpZGUgc3RyaW5nXG4gICAgICAgIGlmICgnZml4ZWRXaWR0aCcgaW4gb3B0cyB8fCAoZml4ZWRXaWR0aCAmJiAnZ3V0dGVyJyBpbiBvcHRzKSB8fCAhY2Fyb3VzZWwgJiYgJ2l0ZW1zJyBpbiBvcHRzKSB7XG4gICAgICAgICAgc2xpZGVTdHIgKz0gZ2V0U2xpZGVXaWR0aFN0eWxlKGZpeGVkV2lkdGhCUCwgZ3V0dGVyQlAsIGl0ZW1zQlApO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnZ3V0dGVyJyBpbiBvcHRzKSB7XG4gICAgICAgICAgc2xpZGVTdHIgKz0gZ2V0U2xpZGVHdXR0ZXJTdHlsZShndXR0ZXJCUCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0IGdhbGxlcnkgaXRlbXMgdHJhbnNpdGlvbi1kdXJhdGlvblxuICAgICAgICBpZiAoIWNhcm91c2VsICYmICdzcGVlZCcgaW4gb3B0cykge1xuICAgICAgICAgIGlmIChUUkFOU0lUSU9ORFVSQVRJT04pIHsgc2xpZGVTdHIgKz0gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUoc3BlZWRCUCk7IH1cbiAgICAgICAgICBpZiAoQU5JTUFUSU9ORFVSQVRJT04pIHsgc2xpZGVTdHIgKz0gZ2V0QW5pbWF0aW9uRHVyYXRpb25TdHlsZShzcGVlZEJQKTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzbGlkZVN0cikgeyBzbGlkZVN0ciA9ICcjJyArIHNsaWRlSWQgKyAnID4gLnRucy1pdGVteycgKyBzbGlkZVN0ciArICd9JzsgfVxuXG4gICAgICAgIC8vIGFkZCB1cFxuICAgICAgICBzdHIgPSBtaWRkbGVXcmFwcGVyU3RyICsgaW5uZXJXcmFwcGVyU3RyICsgY29udGFpbmVyU3RyICsgc2xpZGVTdHI7XG5cbiAgICAgICAgaWYgKHN0cikge1xuICAgICAgICAgIHNoZWV0Lmluc2VydFJ1bGUoJ0BtZWRpYSAobWluLXdpZHRoOiAnICsgYnAgLyAxNiArICdlbSkgeycgKyBzdHIgKyAnfScsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0VG9vbHMgKCkge1xuICAgIC8vID09IHNsaWRlcyA9PVxuICAgIHVwZGF0ZVNsaWRlU3RhdHVzKCk7XG5cbiAgICAvLyA9PSBsaXZlIHJlZ2lvbiA9PVxuICAgIG91dGVyV3JhcHBlci5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCAnPGRpdiBjbGFzcz1cInRucy1saXZlcmVnaW9uIHRucy12aXN1YWxseS1oaWRkZW5cIiBhcmlhLWxpdmU9XCJwb2xpdGVcIiBhcmlhLWF0b21pYz1cInRydWVcIj5zbGlkZSA8c3BhbiBjbGFzcz1cImN1cnJlbnRcIj4nICsgZ2V0TGl2ZVJlZ2lvblN0cigpICsgJzwvc3Bhbj4gIG9mICcgKyBzbGlkZUNvdW50ICsgJzwvZGl2PicpO1xuICAgIGxpdmVyZWdpb25DdXJyZW50ID0gb3V0ZXJXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy50bnMtbGl2ZXJlZ2lvbiAuY3VycmVudCcpO1xuXG4gICAgLy8gPT0gYXV0b3BsYXlJbml0ID09XG4gICAgaWYgKGhhc0F1dG9wbGF5KSB7XG4gICAgICB2YXIgdHh0ID0gYXV0b3BsYXkgPyAnc3RvcCcgOiAnc3RhcnQnO1xuICAgICAgaWYgKGF1dG9wbGF5QnV0dG9uKSB7XG4gICAgICAgIHNldEF0dHJzKGF1dG9wbGF5QnV0dG9uLCB7J2RhdGEtYWN0aW9uJzogdHh0fSk7XG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuYXV0b3BsYXlCdXR0b25PdXRwdXQpIHtcbiAgICAgICAgb3V0ZXJXcmFwcGVyLmluc2VydEFkamFjZW50SFRNTChnZXRJbnNlcnRQb3NpdGlvbihvcHRpb25zLmF1dG9wbGF5UG9zaXRpb24pLCAnPGJ1dHRvbiBkYXRhLWFjdGlvbj1cIicgKyB0eHQgKyAnXCI+JyArIGF1dG9wbGF5SHRtbFN0cmluZ3NbMF0gKyB0eHQgKyBhdXRvcGxheUh0bWxTdHJpbmdzWzFdICsgYXV0b3BsYXlUZXh0WzBdICsgJzwvYnV0dG9uPicpO1xuICAgICAgICBhdXRvcGxheUJ1dHRvbiA9IG91dGVyV3JhcHBlci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1hY3Rpb25dJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCBldmVudFxuICAgICAgaWYgKGF1dG9wbGF5QnV0dG9uKSB7XG4gICAgICAgIGFkZEV2ZW50cyhhdXRvcGxheUJ1dHRvbiwgeydjbGljayc6IHRvZ2dsZUF1dG9wbGF5fSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhdXRvcGxheSkge1xuICAgICAgICBzdGFydEF1dG9wbGF5KCk7XG4gICAgICAgIGlmIChhdXRvcGxheUhvdmVyUGF1c2UpIHsgYWRkRXZlbnRzKGNvbnRhaW5lciwgaG92ZXJFdmVudHMpOyB9XG4gICAgICAgIGlmIChhdXRvcGxheVJlc2V0T25WaXNpYmlsaXR5KSB7IGFkZEV2ZW50cyhjb250YWluZXIsIHZpc2liaWxpdHlFdmVudCk7IH1cbiAgICAgIH1cbiAgICB9XG4gXG4gICAgLy8gPT0gbmF2SW5pdCA9PVxuICAgIGlmIChoYXNOYXYpIHtcbiAgICAgIHZhciBpbml0SW5kZXggPSAhY2Fyb3VzZWwgPyAwIDogY2xvbmVDb3VudDtcbiAgICAgIC8vIGN1c3RvbWl6ZWQgbmF2XG4gICAgICAvLyB3aWxsIG5vdCBoaWRlIHRoZSBuYXZzIGluIGNhc2UgdGhleSdyZSB0aHVtYm5haWxzXG4gICAgICBpZiAobmF2Q29udGFpbmVyKSB7XG4gICAgICAgIHNldEF0dHJzKG5hdkNvbnRhaW5lciwgeydhcmlhLWxhYmVsJzogJ0Nhcm91c2VsIFBhZ2luYXRpb24nfSk7XG4gICAgICAgIG5hdkl0ZW1zID0gbmF2Q29udGFpbmVyLmNoaWxkcmVuO1xuICAgICAgICBmb3JFYWNoKG5hdkl0ZW1zLCBmdW5jdGlvbihpdGVtLCBpKSB7XG4gICAgICAgICAgc2V0QXR0cnMoaXRlbSwge1xuICAgICAgICAgICAgJ2RhdGEtbmF2JzogaSxcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMScsXG4gICAgICAgICAgICAnYXJpYS1sYWJlbCc6IG5hdlN0ciArIChpICsgMSksXG4gICAgICAgICAgICAnYXJpYS1jb250cm9scyc6IHNsaWRlSWQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAvLyBnZW5lcmF0ZWQgbmF2IFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5hdkh0bWwgPSAnJyxcbiAgICAgICAgICAgIGhpZGRlblN0ciA9IG5hdkFzVGh1bWJuYWlscyA/ICcnIDogJ3N0eWxlPVwiZGlzcGxheTpub25lXCInO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlQ291bnQ7IGkrKykge1xuICAgICAgICAgIC8vIGhpZGUgbmF2IGl0ZW1zIGJ5IGRlZmF1bHRcbiAgICAgICAgICBuYXZIdG1sICs9ICc8YnV0dG9uIGRhdGEtbmF2PVwiJyArIGkgKydcIiB0YWJpbmRleD1cIi0xXCIgYXJpYS1jb250cm9scz1cIicgKyBzbGlkZUlkICsgJ1wiICcgKyBoaWRkZW5TdHIgKyAnIGFyaWEtbGFiZWw9XCInICsgbmF2U3RyICsgKGkgKyAxKSArJ1wiPjwvYnV0dG9uPic7XG4gICAgICAgIH1cbiAgICAgICAgbmF2SHRtbCA9ICc8ZGl2IGNsYXNzPVwidG5zLW5hdlwiIGFyaWEtbGFiZWw9XCJDYXJvdXNlbCBQYWdpbmF0aW9uXCI+JyArIG5hdkh0bWwgKyAnPC9kaXY+JztcbiAgICAgICAgb3V0ZXJXcmFwcGVyLmluc2VydEFkamFjZW50SFRNTChnZXRJbnNlcnRQb3NpdGlvbihvcHRpb25zLm5hdlBvc2l0aW9uKSwgbmF2SHRtbCk7XG5cbiAgICAgICAgbmF2Q29udGFpbmVyID0gb3V0ZXJXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy50bnMtbmF2Jyk7XG4gICAgICAgIG5hdkl0ZW1zID0gbmF2Q29udGFpbmVyLmNoaWxkcmVuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVOYXZWaXNpYmlsaXR5KCk7XG5cbiAgICAgIC8vIGFkZCB0cmFuc2l0aW9uXG4gICAgICBpZiAoVFJBTlNJVElPTkRVUkFUSU9OKSB7XG4gICAgICAgIHZhciBwcmVmaXggPSBUUkFOU0lUSU9ORFVSQVRJT04uc3Vic3RyaW5nKDAsIFRSQU5TSVRJT05EVVJBVElPTi5sZW5ndGggLSAxOCkudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgIHN0ciA9ICd0cmFuc2l0aW9uOiBhbGwgJyArIHNwZWVkIC8gMTAwMCArICdzJztcblxuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgc3RyID0gJy0nICsgcHJlZml4ICsgJy0nICsgc3RyO1xuICAgICAgICB9XG5cbiAgICAgICAgYWRkQ1NTUnVsZShzaGVldCwgJ1thcmlhLWNvbnRyb2xzXj0nICsgc2xpZGVJZCArICctaXRlbV0nLCBzdHIsIGdldENzc1J1bGVzTGVuZ3RoKHNoZWV0KSk7XG4gICAgICB9XG5cbiAgICAgIHNldEF0dHJzKG5hdkl0ZW1zW25hdkN1cnJlbnRJbmRleF0sIHsnYXJpYS1sYWJlbCc6IG5hdlN0ciArIChuYXZDdXJyZW50SW5kZXggKyAxKSArIG5hdlN0ckN1cnJlbnR9KTtcbiAgICAgIHJlbW92ZUF0dHJzKG5hdkl0ZW1zW25hdkN1cnJlbnRJbmRleF0sICd0YWJpbmRleCcpO1xuICAgICAgYWRkQ2xhc3MobmF2SXRlbXNbbmF2Q3VycmVudEluZGV4XSwgbmF2QWN0aXZlQ2xhc3MpO1xuXG4gICAgICAvLyBhZGQgZXZlbnRzXG4gICAgICBhZGRFdmVudHMobmF2Q29udGFpbmVyLCBuYXZFdmVudHMpO1xuICAgIH1cblxuXG5cbiAgICAvLyA9PSBjb250cm9sc0luaXQgPT1cbiAgICBpZiAoaGFzQ29udHJvbHMpIHtcbiAgICAgIGlmICghY29udHJvbHNDb250YWluZXIgJiYgKCFwcmV2QnV0dG9uIHx8ICFuZXh0QnV0dG9uKSkge1xuICAgICAgICBvdXRlcldyYXBwZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKGdldEluc2VydFBvc2l0aW9uKG9wdGlvbnMuY29udHJvbHNQb3NpdGlvbiksICc8ZGl2IGNsYXNzPVwidG5zLWNvbnRyb2xzXCIgYXJpYS1sYWJlbD1cIkNhcm91c2VsIE5hdmlnYXRpb25cIiB0YWJpbmRleD1cIjBcIj48YnV0dG9uIGRhdGEtY29udHJvbHM9XCJwcmV2XCIgdGFiaW5kZXg9XCItMVwiIGFyaWEtY29udHJvbHM9XCInICsgc2xpZGVJZCArJ1wiPicgKyBjb250cm9sc1RleHRbMF0gKyAnPC9idXR0b24+PGJ1dHRvbiBkYXRhLWNvbnRyb2xzPVwibmV4dFwiIHRhYmluZGV4PVwiLTFcIiBhcmlhLWNvbnRyb2xzPVwiJyArIHNsaWRlSWQgKydcIj4nICsgY29udHJvbHNUZXh0WzFdICsgJzwvYnV0dG9uPjwvZGl2PicpO1xuXG4gICAgICAgIGNvbnRyb2xzQ29udGFpbmVyID0gb3V0ZXJXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy50bnMtY29udHJvbHMnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwcmV2QnV0dG9uIHx8ICFuZXh0QnV0dG9uKSB7XG4gICAgICAgIHByZXZCdXR0b24gPSBjb250cm9sc0NvbnRhaW5lci5jaGlsZHJlblswXTtcbiAgICAgICAgbmV4dEJ1dHRvbiA9IGNvbnRyb2xzQ29udGFpbmVyLmNoaWxkcmVuWzFdO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jb250cm9sc0NvbnRhaW5lcikge1xuICAgICAgICBzZXRBdHRycyhjb250cm9sc0NvbnRhaW5lciwge1xuICAgICAgICAgICdhcmlhLWxhYmVsJzogJ0Nhcm91c2VsIE5hdmlnYXRpb24nLFxuICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuY29udHJvbHNDb250YWluZXIgfHwgKG9wdGlvbnMucHJldkJ1dHRvbiAmJiBvcHRpb25zLm5leHRCdXR0b24pKSB7XG4gICAgICAgIHNldEF0dHJzKFtwcmV2QnV0dG9uLCBuZXh0QnV0dG9uXSwge1xuICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogc2xpZGVJZCxcbiAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKG9wdGlvbnMuY29udHJvbHNDb250YWluZXIgfHwgKG9wdGlvbnMucHJldkJ1dHRvbiAmJiBvcHRpb25zLm5leHRCdXR0b24pKSB7XG4gICAgICAgIHNldEF0dHJzKHByZXZCdXR0b24sIHsnZGF0YS1jb250cm9scycgOiAncHJldid9KTtcbiAgICAgICAgc2V0QXR0cnMobmV4dEJ1dHRvbiwgeydkYXRhLWNvbnRyb2xzJyA6ICduZXh0J30pO1xuICAgICAgfVxuXG4gICAgICBwcmV2SXNCdXR0b24gPSBpc0J1dHRvbihwcmV2QnV0dG9uKTtcbiAgICAgIG5leHRJc0J1dHRvbiA9IGlzQnV0dG9uKG5leHRCdXR0b24pO1xuXG4gICAgICB1cGRhdGVDb250cm9sc1N0YXR1cygpO1xuXG4gICAgICAvLyBhZGQgZXZlbnRzXG4gICAgICBpZiAoY29udHJvbHNDb250YWluZXIpIHtcbiAgICAgICAgYWRkRXZlbnRzKGNvbnRyb2xzQ29udGFpbmVyLCBjb250cm9sc0V2ZW50cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRFdmVudHMocHJldkJ1dHRvbiwgY29udHJvbHNFdmVudHMpO1xuICAgICAgICBhZGRFdmVudHMobmV4dEJ1dHRvbiwgY29udHJvbHNFdmVudHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGhpZGUgdG9vbHMgaWYgbmVlZGVkXG4gICAgZGlzYWJsZVVJKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0RXZlbnRzICgpIHtcbiAgICAvLyBhZGQgZXZlbnRzXG4gICAgaWYgKGNhcm91c2VsICYmIFRSQU5TSVRJT05FTkQpIHtcbiAgICAgIHZhciBldmUgPSB7fTtcbiAgICAgIGV2ZVtUUkFOU0lUSU9ORU5EXSA9IG9uVHJhbnNpdGlvbkVuZDtcbiAgICAgIGFkZEV2ZW50cyhjb250YWluZXIsIGV2ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRvdWNoKSB7IGFkZEV2ZW50cyhjb250YWluZXIsIHRvdWNoRXZlbnRzLCBvcHRpb25zLnByZXZlbnRTY3JvbGxPblRvdWNoKTsgfVxuICAgIGlmIChtb3VzZURyYWcpIHsgYWRkRXZlbnRzKGNvbnRhaW5lciwgZHJhZ0V2ZW50cyk7IH1cbiAgICBpZiAoYXJyb3dLZXlzKSB7IGFkZEV2ZW50cyhkb2MsIGRvY21lbnRLZXlkb3duRXZlbnQpOyB9XG5cbiAgICBpZiAobmVzdGVkID09PSAnaW5uZXInKSB7XG4gICAgICBldmVudHMub24oJ291dGVyUmVzaXplZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVzaXplVGFza3MoKTtcbiAgICAgICAgZXZlbnRzLmVtaXQoJ2lubmVyTG9hZGVkJywgaW5mbygpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2l2ZSB8fCBmaXhlZFdpZHRoIHx8IGF1dG9XaWR0aCB8fCBhdXRvSGVpZ2h0IHx8ICFob3Jpem9udGFsKSB7XG4gICAgICBhZGRFdmVudHMod2luLCB7J3Jlc2l6ZSc6IG9uUmVzaXplfSk7XG4gICAgfVxuXG4gICAgaWYgKGF1dG9IZWlnaHQpIHtcbiAgICAgIGlmIChuZXN0ZWQgPT09ICdvdXRlcicpIHtcbiAgICAgICAgZXZlbnRzLm9uKCdpbm5lckxvYWRlZCcsIGRvQXV0b0hlaWdodCk7XG4gICAgICB9IGVsc2UgaWYgKCFkaXNhYmxlKSB7IGRvQXV0b0hlaWdodCgpOyB9XG4gICAgfVxuXG4gICAgZG9MYXp5TG9hZCgpO1xuICAgIGlmIChkaXNhYmxlKSB7IGRpc2FibGVTbGlkZXIoKTsgfSBlbHNlIGlmIChmcmVlemUpIHsgZnJlZXplU2xpZGVyKCk7IH1cblxuICAgIGV2ZW50cy5vbignaW5kZXhDaGFuZ2VkJywgYWRkaXRpb25hbFVwZGF0ZXMpO1xuICAgIGlmIChuZXN0ZWQgPT09ICdpbm5lcicpIHsgZXZlbnRzLmVtaXQoJ2lubmVyTG9hZGVkJywgaW5mbygpKTsgfVxuICAgIGlmICh0eXBlb2Ygb25Jbml0ID09PSAnZnVuY3Rpb24nKSB7IG9uSW5pdChpbmZvKCkpOyB9XG4gICAgaXNPbiA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICAvLyBzaGVldFxuICAgIHNoZWV0LmRpc2FibGVkID0gdHJ1ZTtcbiAgICBpZiAoc2hlZXQub3duZXJOb2RlKSB7IHNoZWV0Lm93bmVyTm9kZS5yZW1vdmUoKTsgfVxuXG4gICAgLy8gcmVtb3ZlIHdpbiBldmVudCBsaXN0ZW5lcnNcbiAgICByZW1vdmVFdmVudHMod2luLCB7J3Jlc2l6ZSc6IG9uUmVzaXplfSk7XG5cbiAgICAvLyBhcnJvd0tleXMsIGNvbnRyb2xzLCBuYXZcbiAgICBpZiAoYXJyb3dLZXlzKSB7IHJlbW92ZUV2ZW50cyhkb2MsIGRvY21lbnRLZXlkb3duRXZlbnQpOyB9XG4gICAgaWYgKGNvbnRyb2xzQ29udGFpbmVyKSB7IHJlbW92ZUV2ZW50cyhjb250cm9sc0NvbnRhaW5lciwgY29udHJvbHNFdmVudHMpOyB9XG4gICAgaWYgKG5hdkNvbnRhaW5lcikgeyByZW1vdmVFdmVudHMobmF2Q29udGFpbmVyLCBuYXZFdmVudHMpOyB9XG5cbiAgICAvLyBhdXRvcGxheVxuICAgIHJlbW92ZUV2ZW50cyhjb250YWluZXIsIGhvdmVyRXZlbnRzKTtcbiAgICByZW1vdmVFdmVudHMoY29udGFpbmVyLCB2aXNpYmlsaXR5RXZlbnQpO1xuICAgIGlmIChhdXRvcGxheUJ1dHRvbikgeyByZW1vdmVFdmVudHMoYXV0b3BsYXlCdXR0b24sIHsnY2xpY2snOiB0b2dnbGVBdXRvcGxheX0pOyB9XG4gICAgaWYgKGF1dG9wbGF5KSB7IGNsZWFySW50ZXJ2YWwoYXV0b3BsYXlUaW1lcik7IH1cblxuICAgIC8vIGNvbnRhaW5lclxuICAgIGlmIChjYXJvdXNlbCAmJiBUUkFOU0lUSU9ORU5EKSB7XG4gICAgICB2YXIgZXZlID0ge307XG4gICAgICBldmVbVFJBTlNJVElPTkVORF0gPSBvblRyYW5zaXRpb25FbmQ7XG4gICAgICByZW1vdmVFdmVudHMoY29udGFpbmVyLCBldmUpO1xuICAgIH1cbiAgICBpZiAodG91Y2gpIHsgcmVtb3ZlRXZlbnRzKGNvbnRhaW5lciwgdG91Y2hFdmVudHMpOyB9XG4gICAgaWYgKG1vdXNlRHJhZykgeyByZW1vdmVFdmVudHMoY29udGFpbmVyLCBkcmFnRXZlbnRzKTsgfVxuXG4gICAgLy8gY2FjaGUgT2JqZWN0IHZhbHVlcyBpbiBvcHRpb25zICYmIHJlc2V0IEhUTUxcbiAgICB2YXIgaHRtbExpc3QgPSBbY29udGFpbmVySFRNTCwgY29udHJvbHNDb250YWluZXJIVE1MLCBwcmV2QnV0dG9uSFRNTCwgbmV4dEJ1dHRvbkhUTUwsIG5hdkNvbnRhaW5lckhUTUwsIGF1dG9wbGF5QnV0dG9uSFRNTF07XG5cbiAgICB0bnNMaXN0LmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaSkge1xuICAgICAgdmFyIGVsID0gaXRlbSA9PT0gJ2NvbnRhaW5lcicgPyBvdXRlcldyYXBwZXIgOiBvcHRpb25zW2l0ZW1dO1xuXG4gICAgICBpZiAodHlwZW9mIGVsID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgcHJldkVsID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZyA/IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcmVudEVsID0gZWwucGFyZW50Tm9kZTtcbiAgICAgICAgZWwub3V0ZXJIVE1MID0gaHRtbExpc3RbaV07XG4gICAgICAgIG9wdGlvbnNbaXRlbV0gPSBwcmV2RWwgPyBwcmV2RWwubmV4dEVsZW1lbnRTaWJsaW5nIDogcGFyZW50RWwuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICB9XG4gICAgfSk7XG5cblxuICAgIC8vIHJlc2V0IHZhcmlhYmxlc1xuICAgIHRuc0xpc3QgPSBhbmltYXRlSW4gPSBhbmltYXRlT3V0ID0gYW5pbWF0ZURlbGF5ID0gYW5pbWF0ZU5vcm1hbCA9IGhvcml6b250YWwgPSBvdXRlcldyYXBwZXIgPSBpbm5lcldyYXBwZXIgPSBjb250YWluZXIgPSBjb250YWluZXJQYXJlbnQgPSBjb250YWluZXJIVE1MID0gc2xpZGVJdGVtcyA9IHNsaWRlQ291bnQgPSBicmVha3BvaW50Wm9uZSA9IHdpbmRvd1dpZHRoID0gYXV0b1dpZHRoID0gZml4ZWRXaWR0aCA9IGVkZ2VQYWRkaW5nID0gZ3V0dGVyID0gdmlld3BvcnQgPSBpdGVtcyA9IHNsaWRlQnkgPSB2aWV3cG9ydE1heCA9IGFycm93S2V5cyA9IHNwZWVkID0gcmV3aW5kID0gbG9vcCA9IGF1dG9IZWlnaHQgPSBzaGVldCA9IGxhenlsb2FkID0gc2xpZGVQb3NpdGlvbnMgPSBzbGlkZUl0ZW1zT3V0ID0gY2xvbmVDb3VudCA9IHNsaWRlQ291bnROZXcgPSBoYXNSaWdodERlYWRab25lID0gcmlnaHRCb3VuZGFyeSA9IHVwZGF0ZUluZGV4QmVmb3JlVHJhbnNmb3JtID0gdHJhbnNmb3JtQXR0ciA9IHRyYW5zZm9ybVByZWZpeCA9IHRyYW5zZm9ybVBvc3RmaXggPSBnZXRJbmRleE1heCA9IGluZGV4ID0gaW5kZXhDYWNoZWQgPSBpbmRleE1pbiA9IGluZGV4TWF4ID0gcmVzaXplVGltZXIgPSBzd2lwZUFuZ2xlID0gbW92ZURpcmVjdGlvbkV4cGVjdGVkID0gcnVubmluZyA9IG9uSW5pdCA9IGV2ZW50cyA9IG5ld0NvbnRhaW5lckNsYXNzZXMgPSBzbGlkZUlkID0gZGlzYWJsZSA9IGRpc2FibGVkID0gZnJlZXphYmxlID0gZnJlZXplID0gZnJvemVuID0gY29udHJvbHNFdmVudHMgPSBuYXZFdmVudHMgPSBob3ZlckV2ZW50cyA9IHZpc2liaWxpdHlFdmVudCA9IGRvY21lbnRLZXlkb3duRXZlbnQgPSB0b3VjaEV2ZW50cyA9IGRyYWdFdmVudHMgPSBoYXNDb250cm9scyA9IGhhc05hdiA9IG5hdkFzVGh1bWJuYWlscyA9IGhhc0F1dG9wbGF5ID0gaGFzVG91Y2ggPSBoYXNNb3VzZURyYWcgPSBzbGlkZUFjdGl2ZUNsYXNzID0gaW1nQ29tcGxldGVDbGFzcyA9IGltZ0V2ZW50cyA9IGltZ3NDb21wbGV0ZSA9IGNvbnRyb2xzID0gY29udHJvbHNUZXh0ID0gY29udHJvbHNDb250YWluZXIgPSBjb250cm9sc0NvbnRhaW5lckhUTUwgPSBwcmV2QnV0dG9uID0gbmV4dEJ1dHRvbiA9IHByZXZJc0J1dHRvbiA9IG5leHRJc0J1dHRvbiA9IG5hdiA9IG5hdkNvbnRhaW5lciA9IG5hdkNvbnRhaW5lckhUTUwgPSBuYXZJdGVtcyA9IHBhZ2VzID0gcGFnZXNDYWNoZWQgPSBuYXZDbGlja2VkID0gbmF2Q3VycmVudEluZGV4ID0gbmF2Q3VycmVudEluZGV4Q2FjaGVkID0gbmF2QWN0aXZlQ2xhc3MgPSBuYXZTdHIgPSBuYXZTdHJDdXJyZW50ID0gYXV0b3BsYXkgPSBhdXRvcGxheVRpbWVvdXQgPSBhdXRvcGxheURpcmVjdGlvbiA9IGF1dG9wbGF5VGV4dCA9IGF1dG9wbGF5SG92ZXJQYXVzZSA9IGF1dG9wbGF5QnV0dG9uID0gYXV0b3BsYXlCdXR0b25IVE1MID0gYXV0b3BsYXlSZXNldE9uVmlzaWJpbGl0eSA9IGF1dG9wbGF5SHRtbFN0cmluZ3MgPSBhdXRvcGxheVRpbWVyID0gYW5pbWF0aW5nID0gYXV0b3BsYXlIb3ZlclBhdXNlZCA9IGF1dG9wbGF5VXNlclBhdXNlZCA9IGF1dG9wbGF5VmlzaWJpbGl0eVBhdXNlZCA9IGluaXRQb3NpdGlvbiA9IGxhc3RQb3NpdGlvbiA9IHRyYW5zbGF0ZUluaXQgPSBkaXNYID0gZGlzWSA9IHBhblN0YXJ0ID0gcmFmSW5kZXggPSBnZXREaXN0ID0gdG91Y2ggPSBtb3VzZURyYWcgPSBudWxsO1xuICAgIC8vIGNoZWNrIHZhcmlhYmxlc1xuICAgIC8vIFthbmltYXRlSW4sIGFuaW1hdGVPdXQsIGFuaW1hdGVEZWxheSwgYW5pbWF0ZU5vcm1hbCwgaG9yaXpvbnRhbCwgb3V0ZXJXcmFwcGVyLCBpbm5lcldyYXBwZXIsIGNvbnRhaW5lciwgY29udGFpbmVyUGFyZW50LCBjb250YWluZXJIVE1MLCBzbGlkZUl0ZW1zLCBzbGlkZUNvdW50LCBicmVha3BvaW50Wm9uZSwgd2luZG93V2lkdGgsIGF1dG9XaWR0aCwgZml4ZWRXaWR0aCwgZWRnZVBhZGRpbmcsIGd1dHRlciwgdmlld3BvcnQsIGl0ZW1zLCBzbGlkZUJ5LCB2aWV3cG9ydE1heCwgYXJyb3dLZXlzLCBzcGVlZCwgcmV3aW5kLCBsb29wLCBhdXRvSGVpZ2h0LCBzaGVldCwgbGF6eWxvYWQsIHNsaWRlUG9zaXRpb25zLCBzbGlkZUl0ZW1zT3V0LCBjbG9uZUNvdW50LCBzbGlkZUNvdW50TmV3LCBoYXNSaWdodERlYWRab25lLCByaWdodEJvdW5kYXJ5LCB1cGRhdGVJbmRleEJlZm9yZVRyYW5zZm9ybSwgdHJhbnNmb3JtQXR0ciwgdHJhbnNmb3JtUHJlZml4LCB0cmFuc2Zvcm1Qb3N0Zml4LCBnZXRJbmRleE1heCwgaW5kZXgsIGluZGV4Q2FjaGVkLCBpbmRleE1pbiwgaW5kZXhNYXgsIHJlc2l6ZVRpbWVyLCBzd2lwZUFuZ2xlLCBtb3ZlRGlyZWN0aW9uRXhwZWN0ZWQsIHJ1bm5pbmcsIG9uSW5pdCwgZXZlbnRzLCBuZXdDb250YWluZXJDbGFzc2VzLCBzbGlkZUlkLCBkaXNhYmxlLCBkaXNhYmxlZCwgZnJlZXphYmxlLCBmcmVlemUsIGZyb3plbiwgY29udHJvbHNFdmVudHMsIG5hdkV2ZW50cywgaG92ZXJFdmVudHMsIHZpc2liaWxpdHlFdmVudCwgZG9jbWVudEtleWRvd25FdmVudCwgdG91Y2hFdmVudHMsIGRyYWdFdmVudHMsIGhhc0NvbnRyb2xzLCBoYXNOYXYsIG5hdkFzVGh1bWJuYWlscywgaGFzQXV0b3BsYXksIGhhc1RvdWNoLCBoYXNNb3VzZURyYWcsIHNsaWRlQWN0aXZlQ2xhc3MsIGltZ0NvbXBsZXRlQ2xhc3MsIGltZ0V2ZW50cywgaW1nc0NvbXBsZXRlLCBjb250cm9scywgY29udHJvbHNUZXh0LCBjb250cm9sc0NvbnRhaW5lciwgY29udHJvbHNDb250YWluZXJIVE1MLCBwcmV2QnV0dG9uLCBuZXh0QnV0dG9uLCBwcmV2SXNCdXR0b24sIG5leHRJc0J1dHRvbiwgbmF2LCBuYXZDb250YWluZXIsIG5hdkNvbnRhaW5lckhUTUwsIG5hdkl0ZW1zLCBwYWdlcywgcGFnZXNDYWNoZWQsIG5hdkNsaWNrZWQsIG5hdkN1cnJlbnRJbmRleCwgbmF2Q3VycmVudEluZGV4Q2FjaGVkLCBuYXZBY3RpdmVDbGFzcywgbmF2U3RyLCBuYXZTdHJDdXJyZW50LCBhdXRvcGxheSwgYXV0b3BsYXlUaW1lb3V0LCBhdXRvcGxheURpcmVjdGlvbiwgYXV0b3BsYXlUZXh0LCBhdXRvcGxheUhvdmVyUGF1c2UsIGF1dG9wbGF5QnV0dG9uLCBhdXRvcGxheUJ1dHRvbkhUTUwsIGF1dG9wbGF5UmVzZXRPblZpc2liaWxpdHksIGF1dG9wbGF5SHRtbFN0cmluZ3MsIGF1dG9wbGF5VGltZXIsIGFuaW1hdGluZywgYXV0b3BsYXlIb3ZlclBhdXNlZCwgYXV0b3BsYXlVc2VyUGF1c2VkLCBhdXRvcGxheVZpc2liaWxpdHlQYXVzZWQsIGluaXRQb3NpdGlvbiwgbGFzdFBvc2l0aW9uLCB0cmFuc2xhdGVJbml0LCBkaXNYLCBkaXNZLCBwYW5TdGFydCwgcmFmSW5kZXgsIGdldERpc3QsIHRvdWNoLCBtb3VzZURyYWcgXS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHsgaWYgKGl0ZW0gIT09IG51bGwpIHsgY29uc29sZS5sb2coaXRlbSk7IH0gfSk7XG5cbiAgICBmb3IgKHZhciBhIGluIHRoaXMpIHtcbiAgICAgIGlmIChhICE9PSAncmVidWlsZCcpIHsgdGhpc1thXSA9IG51bGw7IH1cbiAgICB9XG4gICAgaXNPbiA9IGZhbHNlO1xuICB9XG5cbi8vID09PSBPTiBSRVNJWkUgPT09XG4gIC8vIHJlc3BvbnNpdmUgfHwgZml4ZWRXaWR0aCB8fCBhdXRvV2lkdGggfHwgIWhvcml6b250YWxcbiAgZnVuY3Rpb24gb25SZXNpemUgKGUpIHtcbiAgICByYWYoZnVuY3Rpb24oKXsgcmVzaXplVGFza3MoZ2V0RXZlbnQoZSkpOyB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2l6ZVRhc2tzIChlKSB7XG4gICAgaWYgKCFpc09uKSB7IHJldHVybjsgfVxuICAgIGlmIChuZXN0ZWQgPT09ICdvdXRlcicpIHsgZXZlbnRzLmVtaXQoJ291dGVyUmVzaXplZCcsIGluZm8oZSkpOyB9XG4gICAgd2luZG93V2lkdGggPSBnZXRXaW5kb3dXaWR0aCgpO1xuICAgIHZhciBicENoYW5nZWQsXG4gICAgICAgIGJyZWFrcG9pbnRab25lVGVtID0gYnJlYWtwb2ludFpvbmUsXG4gICAgICAgIG5lZWRDb250YWluZXJUcmFuc2Zvcm0gPSBmYWxzZTtcblxuICAgIGlmIChyZXNwb25zaXZlKSB7XG4gICAgICBzZXRCcmVha3BvaW50Wm9uZSgpO1xuICAgICAgYnBDaGFuZ2VkID0gYnJlYWtwb2ludFpvbmVUZW0gIT09IGJyZWFrcG9pbnRab25lO1xuICAgICAgLy8gaWYgKGhhc1JpZ2h0RGVhZFpvbmUpIHsgbmVlZENvbnRhaW5lclRyYW5zZm9ybSA9IHRydWU7IH0gLy8gKj9cbiAgICAgIGlmIChicENoYW5nZWQpIHsgZXZlbnRzLmVtaXQoJ25ld0JyZWFrcG9pbnRTdGFydCcsIGluZm8oZSkpOyB9XG4gICAgfVxuXG4gICAgdmFyIGluZENoYW5nZWQsXG4gICAgICAgIGl0ZW1zQ2hhbmdlZCxcbiAgICAgICAgaXRlbXNUZW0gPSBpdGVtcyxcbiAgICAgICAgZGlzYWJsZVRlbSA9IGRpc2FibGUsXG4gICAgICAgIGZyZWV6ZVRlbSA9IGZyZWV6ZSxcbiAgICAgICAgYXJyb3dLZXlzVGVtID0gYXJyb3dLZXlzLFxuICAgICAgICBjb250cm9sc1RlbSA9IGNvbnRyb2xzLFxuICAgICAgICBuYXZUZW0gPSBuYXYsXG4gICAgICAgIHRvdWNoVGVtID0gdG91Y2gsXG4gICAgICAgIG1vdXNlRHJhZ1RlbSA9IG1vdXNlRHJhZyxcbiAgICAgICAgYXV0b3BsYXlUZW0gPSBhdXRvcGxheSxcbiAgICAgICAgYXV0b3BsYXlIb3ZlclBhdXNlVGVtID0gYXV0b3BsYXlIb3ZlclBhdXNlLFxuICAgICAgICBhdXRvcGxheVJlc2V0T25WaXNpYmlsaXR5VGVtID0gYXV0b3BsYXlSZXNldE9uVmlzaWJpbGl0eSxcbiAgICAgICAgaW5kZXhUZW0gPSBpbmRleDtcblxuICAgIGlmIChicENoYW5nZWQpIHtcbiAgICAgIHZhciBmaXhlZFdpZHRoVGVtID0gZml4ZWRXaWR0aCxcbiAgICAgICAgICBhdXRvSGVpZ2h0VGVtID0gYXV0b0hlaWdodCxcbiAgICAgICAgICBjb250cm9sc1RleHRUZW0gPSBjb250cm9sc1RleHQsXG4gICAgICAgICAgY2VudGVyVGVtID0gY2VudGVyLFxuICAgICAgICAgIGF1dG9wbGF5VGV4dFRlbSA9IGF1dG9wbGF5VGV4dDtcblxuICAgICAgaWYgKCFDU1NNUSkge1xuICAgICAgICB2YXIgZ3V0dGVyVGVtID0gZ3V0dGVyLFxuICAgICAgICAgICAgZWRnZVBhZGRpbmdUZW0gPSBlZGdlUGFkZGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBnZXQgb3B0aW9uOlxuICAgIC8vIGZpeGVkIHdpZHRoOiB2aWV3cG9ydCwgZml4ZWRXaWR0aCwgZ3V0dGVyID0+IGl0ZW1zXG4gICAgLy8gb3RoZXJzOiB3aW5kb3cgd2lkdGggPT4gYWxsIHZhcmlhYmxlc1xuICAgIC8vIGFsbDogaXRlbXMgPT4gc2xpZGVCeVxuICAgIGFycm93S2V5cyA9IGdldE9wdGlvbignYXJyb3dLZXlzJyk7XG4gICAgY29udHJvbHMgPSBnZXRPcHRpb24oJ2NvbnRyb2xzJyk7XG4gICAgbmF2ID0gZ2V0T3B0aW9uKCduYXYnKTtcbiAgICB0b3VjaCA9IGdldE9wdGlvbigndG91Y2gnKTtcbiAgICBjZW50ZXIgPSBnZXRPcHRpb24oJ2NlbnRlcicpO1xuICAgIG1vdXNlRHJhZyA9IGdldE9wdGlvbignbW91c2VEcmFnJyk7XG4gICAgYXV0b3BsYXkgPSBnZXRPcHRpb24oJ2F1dG9wbGF5Jyk7XG4gICAgYXV0b3BsYXlIb3ZlclBhdXNlID0gZ2V0T3B0aW9uKCdhdXRvcGxheUhvdmVyUGF1c2UnKTtcbiAgICBhdXRvcGxheVJlc2V0T25WaXNpYmlsaXR5ID0gZ2V0T3B0aW9uKCdhdXRvcGxheVJlc2V0T25WaXNpYmlsaXR5Jyk7XG5cbiAgICBpZiAoYnBDaGFuZ2VkKSB7XG4gICAgICBkaXNhYmxlID0gZ2V0T3B0aW9uKCdkaXNhYmxlJyk7XG4gICAgICBmaXhlZFdpZHRoID0gZ2V0T3B0aW9uKCdmaXhlZFdpZHRoJyk7XG4gICAgICBzcGVlZCA9IGdldE9wdGlvbignc3BlZWQnKTtcbiAgICAgIGF1dG9IZWlnaHQgPSBnZXRPcHRpb24oJ2F1dG9IZWlnaHQnKTtcbiAgICAgIGNvbnRyb2xzVGV4dCA9IGdldE9wdGlvbignY29udHJvbHNUZXh0Jyk7XG4gICAgICBhdXRvcGxheVRleHQgPSBnZXRPcHRpb24oJ2F1dG9wbGF5VGV4dCcpO1xuICAgICAgYXV0b3BsYXlUaW1lb3V0ID0gZ2V0T3B0aW9uKCdhdXRvcGxheVRpbWVvdXQnKTtcblxuICAgICAgaWYgKCFDU1NNUSkge1xuICAgICAgICBlZGdlUGFkZGluZyA9IGdldE9wdGlvbignZWRnZVBhZGRpbmcnKTtcbiAgICAgICAgZ3V0dGVyID0gZ2V0T3B0aW9uKCdndXR0ZXInKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXBkYXRlIG9wdGlvbnNcbiAgICByZXNldFZhcmlibGVzV2hlbkRpc2FibGUoZGlzYWJsZSk7XG5cbiAgICB2aWV3cG9ydCA9IGdldFZpZXdwb3J0V2lkdGgoKTsgLy8gPD0gZWRnZVBhZGRpbmcsIGd1dHRlclxuICAgIGlmICgoIWhvcml6b250YWwgfHwgYXV0b1dpZHRoKSAmJiAhZGlzYWJsZSkge1xuICAgICAgc2V0U2xpZGVQb3NpdGlvbnMoKTtcbiAgICAgIGlmICghaG9yaXpvbnRhbCkge1xuICAgICAgICB1cGRhdGVDb250ZW50V3JhcHBlckhlaWdodCgpOyAvLyA8PSBzZXRTbGlkZVBvc2l0aW9uc1xuICAgICAgICBuZWVkQ29udGFpbmVyVHJhbnNmb3JtID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZpeGVkV2lkdGggfHwgYXV0b1dpZHRoKSB7XG4gICAgICByaWdodEJvdW5kYXJ5ID0gZ2V0UmlnaHRCb3VuZGFyeSgpOyAvLyBhdXRvV2lkdGg6IDw9IHZpZXdwb3J0LCBzbGlkZVBvc2l0aW9ucywgZ3V0dGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXhlZFdpZHRoOiA8PSB2aWV3cG9ydCwgZml4ZWRXaWR0aCwgZ3V0dGVyXG4gICAgICBpbmRleE1heCA9IGdldEluZGV4TWF4KCk7IC8vIGF1dG9XaWR0aDogPD0gcmlnaHRCb3VuZGFyeSwgc2xpZGVQb3NpdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZml4ZWRXaWR0aDogPD0gcmlnaHRCb3VuZGFyeSwgZml4ZWRXaWR0aCwgZ3V0dGVyXG4gICAgfVxuXG4gICAgaWYgKGJwQ2hhbmdlZCB8fCBmaXhlZFdpZHRoKSB7XG4gICAgICBpdGVtcyA9IGdldE9wdGlvbignaXRlbXMnKTtcbiAgICAgIHNsaWRlQnkgPSBnZXRPcHRpb24oJ3NsaWRlQnknKTtcbiAgICAgIGl0ZW1zQ2hhbmdlZCA9IGl0ZW1zICE9PSBpdGVtc1RlbTtcblxuICAgICAgaWYgKGl0ZW1zQ2hhbmdlZCkge1xuICAgICAgICBpZiAoIWZpeGVkV2lkdGggJiYgIWF1dG9XaWR0aCkgeyBpbmRleE1heCA9IGdldEluZGV4TWF4KCk7IH0gLy8gPD0gaXRlbXNcbiAgICAgICAgLy8gY2hlY2sgaW5kZXggYmVmb3JlIHRyYW5zZm9ybSBpbiBjYXNlXG4gICAgICAgIC8vIHNsaWRlciByZWFjaCB0aGUgcmlnaHQgZWRnZSB0aGVuIGl0ZW1zIGJlY29tZSBiaWdnZXJcbiAgICAgICAgdXBkYXRlSW5kZXgoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKGJwQ2hhbmdlZCkge1xuICAgICAgaWYgKGRpc2FibGUgIT09IGRpc2FibGVUZW0pIHtcbiAgICAgICAgaWYgKGRpc2FibGUpIHtcbiAgICAgICAgICBkaXNhYmxlU2xpZGVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5hYmxlU2xpZGVyKCk7IC8vIDw9IHNsaWRlUG9zaXRpb25zLCByaWdodEJvdW5kYXJ5LCBpbmRleE1heFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZyZWV6YWJsZSAmJiAoYnBDaGFuZ2VkIHx8IGZpeGVkV2lkdGggfHwgYXV0b1dpZHRoKSkge1xuICAgICAgZnJlZXplID0gZ2V0RnJlZXplKCk7IC8vIDw9IGF1dG9XaWR0aDogc2xpZGVQb3NpdGlvbnMsIGd1dHRlciwgdmlld3BvcnQsIHJpZ2h0Qm91bmRhcnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8PSBmaXhlZFdpZHRoOiBmaXhlZFdpZHRoLCBndXR0ZXIsIHJpZ2h0Qm91bmRhcnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8PSBvdGhlcnM6IGl0ZW1zXG5cbiAgICAgIGlmIChmcmVlemUgIT09IGZyZWV6ZVRlbSkge1xuICAgICAgICBpZiAoZnJlZXplKSB7XG4gICAgICAgICAgZG9Db250YWluZXJUcmFuc2Zvcm0oZ2V0Q29udGFpbmVyVHJhbnNmb3JtVmFsdWUoZ2V0U3RhcnRJbmRleCgwKSkpO1xuICAgICAgICAgIGZyZWV6ZVNsaWRlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVuZnJlZXplU2xpZGVyKCk7XG4gICAgICAgICAgbmVlZENvbnRhaW5lclRyYW5zZm9ybSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXNldFZhcmlibGVzV2hlbkRpc2FibGUoZGlzYWJsZSB8fCBmcmVlemUpOyAvLyBjb250cm9scywgbmF2LCB0b3VjaCwgbW91c2VEcmFnLCBhcnJvd0tleXMsIGF1dG9wbGF5LCBhdXRvcGxheUhvdmVyUGF1c2UsIGF1dG9wbGF5UmVzZXRPblZpc2liaWxpdHlcbiAgICBpZiAoIWF1dG9wbGF5KSB7IGF1dG9wbGF5SG92ZXJQYXVzZSA9IGF1dG9wbGF5UmVzZXRPblZpc2liaWxpdHkgPSBmYWxzZTsgfVxuXG4gICAgaWYgKGFycm93S2V5cyAhPT0gYXJyb3dLZXlzVGVtKSB7XG4gICAgICBhcnJvd0tleXMgP1xuICAgICAgICBhZGRFdmVudHMoZG9jLCBkb2NtZW50S2V5ZG93bkV2ZW50KSA6XG4gICAgICAgIHJlbW92ZUV2ZW50cyhkb2MsIGRvY21lbnRLZXlkb3duRXZlbnQpO1xuICAgIH1cbiAgICBpZiAoY29udHJvbHMgIT09IGNvbnRyb2xzVGVtKSB7XG4gICAgICBpZiAoY29udHJvbHMpIHtcbiAgICAgICAgaWYgKGNvbnRyb2xzQ29udGFpbmVyKSB7XG4gICAgICAgICAgc2hvd0VsZW1lbnQoY29udHJvbHNDb250YWluZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcmV2QnV0dG9uKSB7IHNob3dFbGVtZW50KHByZXZCdXR0b24pOyB9XG4gICAgICAgICAgaWYgKG5leHRCdXR0b24pIHsgc2hvd0VsZW1lbnQobmV4dEJ1dHRvbik7IH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbnRyb2xzQ29udGFpbmVyKSB7XG4gICAgICAgICAgaGlkZUVsZW1lbnQoY29udHJvbHNDb250YWluZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcmV2QnV0dG9uKSB7IGhpZGVFbGVtZW50KHByZXZCdXR0b24pOyB9XG4gICAgICAgICAgaWYgKG5leHRCdXR0b24pIHsgaGlkZUVsZW1lbnQobmV4dEJ1dHRvbik7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmF2ICE9PSBuYXZUZW0pIHtcbiAgICAgIG5hdiA/XG4gICAgICAgIHNob3dFbGVtZW50KG5hdkNvbnRhaW5lcikgOlxuICAgICAgICBoaWRlRWxlbWVudChuYXZDb250YWluZXIpO1xuICAgIH1cbiAgICBpZiAodG91Y2ggIT09IHRvdWNoVGVtKSB7XG4gICAgICB0b3VjaCA/XG4gICAgICAgIGFkZEV2ZW50cyhjb250YWluZXIsIHRvdWNoRXZlbnRzLCBvcHRpb25zLnByZXZlbnRTY3JvbGxPblRvdWNoKSA6XG4gICAgICAgIHJlbW92ZUV2ZW50cyhjb250YWluZXIsIHRvdWNoRXZlbnRzKTtcbiAgICB9XG4gICAgaWYgKG1vdXNlRHJhZyAhPT0gbW91c2VEcmFnVGVtKSB7XG4gICAgICBtb3VzZURyYWcgP1xuICAgICAgICBhZGRFdmVudHMoY29udGFpbmVyLCBkcmFnRXZlbnRzKSA6XG4gICAgICAgIHJlbW92ZUV2ZW50cyhjb250YWluZXIsIGRyYWdFdmVudHMpO1xuICAgIH1cbiAgICBpZiAoYXV0b3BsYXkgIT09IGF1dG9wbGF5VGVtKSB7XG4gICAgICBpZiAoYXV0b3BsYXkpIHtcbiAgICAgICAgaWYgKGF1dG9wbGF5QnV0dG9uKSB7IHNob3dFbGVtZW50KGF1dG9wbGF5QnV0dG9uKTsgfVxuICAgICAgICBpZiAoIWFuaW1hdGluZyAmJiAhYXV0b3BsYXlVc2VyUGF1c2VkKSB7IHN0YXJ0QXV0b3BsYXkoKTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGF1dG9wbGF5QnV0dG9uKSB7IGhpZGVFbGVtZW50KGF1dG9wbGF5QnV0dG9uKTsgfVxuICAgICAgICBpZiAoYW5pbWF0aW5nKSB7IHN0b3BBdXRvcGxheSgpOyB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhdXRvcGxheUhvdmVyUGF1c2UgIT09IGF1dG9wbGF5SG92ZXJQYXVzZVRlbSkge1xuICAgICAgYXV0b3BsYXlIb3ZlclBhdXNlID9cbiAgICAgICAgYWRkRXZlbnRzKGNvbnRhaW5lciwgaG92ZXJFdmVudHMpIDpcbiAgICAgICAgcmVtb3ZlRXZlbnRzKGNvbnRhaW5lciwgaG92ZXJFdmVudHMpO1xuICAgIH1cbiAgICBpZiAoYXV0b3BsYXlSZXNldE9uVmlzaWJpbGl0eSAhPT0gYXV0b3BsYXlSZXNldE9uVmlzaWJpbGl0eVRlbSkge1xuICAgICAgYXV0b3BsYXlSZXNldE9uVmlzaWJpbGl0eSA/XG4gICAgICAgIGFkZEV2ZW50cyhkb2MsIHZpc2liaWxpdHlFdmVudCkgOlxuICAgICAgICByZW1vdmVFdmVudHMoZG9jLCB2aXNpYmlsaXR5RXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChicENoYW5nZWQpIHtcbiAgICAgIGlmIChmaXhlZFdpZHRoICE9PSBmaXhlZFdpZHRoVGVtIHx8IGNlbnRlciAhPT0gY2VudGVyVGVtKSB7IG5lZWRDb250YWluZXJUcmFuc2Zvcm0gPSB0cnVlOyB9XG5cbiAgICAgIGlmIChhdXRvSGVpZ2h0ICE9PSBhdXRvSGVpZ2h0VGVtKSB7XG4gICAgICAgIGlmICghYXV0b0hlaWdodCkgeyBpbm5lcldyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gJyc7IH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRyb2xzICYmIGNvbnRyb2xzVGV4dCAhPT0gY29udHJvbHNUZXh0VGVtKSB7XG4gICAgICAgIHByZXZCdXR0b24uaW5uZXJIVE1MID0gY29udHJvbHNUZXh0WzBdO1xuICAgICAgICBuZXh0QnV0dG9uLmlubmVySFRNTCA9IGNvbnRyb2xzVGV4dFsxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF1dG9wbGF5QnV0dG9uICYmIGF1dG9wbGF5VGV4dCAhPT0gYXV0b3BsYXlUZXh0VGVtKSB7XG4gICAgICAgIHZhciBpID0gYXV0b3BsYXkgPyAxIDogMCxcbiAgICAgICAgICAgIGh0bWwgPSBhdXRvcGxheUJ1dHRvbi5pbm5lckhUTUwsXG4gICAgICAgICAgICBsZW4gPSBodG1sLmxlbmd0aCAtIGF1dG9wbGF5VGV4dFRlbVtpXS5sZW5ndGg7XG4gICAgICAgIGlmIChodG1sLnN1YnN0cmluZyhsZW4pID09PSBhdXRvcGxheVRleHRUZW1baV0pIHtcbiAgICAgICAgICBhdXRvcGxheUJ1dHRvbi5pbm5lckhUTUwgPSBodG1sLnN1YnN0cmluZygwLCBsZW4pICsgYXV0b3BsYXlUZXh0W2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjZW50ZXIgJiYgKGZpeGVkV2lkdGggfHwgYXV0b1dpZHRoKSkgeyBuZWVkQ29udGFpbmVyVHJhbnNmb3JtID0gdHJ1ZTsgfVxuICAgIH1cblxuICAgIGlmIChpdGVtc0NoYW5nZWQgfHwgZml4ZWRXaWR0aCAmJiAhYXV0b1dpZHRoKSB7XG4gICAgICBwYWdlcyA9IGdldFBhZ2VzKCk7XG4gICAgICB1cGRhdGVOYXZWaXNpYmlsaXR5KCk7XG4gICAgfVxuXG4gICAgaW5kQ2hhbmdlZCA9IGluZGV4ICE9PSBpbmRleFRlbTtcbiAgICBpZiAoaW5kQ2hhbmdlZCkgeyBcbiAgICAgIGV2ZW50cy5lbWl0KCdpbmRleENoYW5nZWQnLCBpbmZvKCkpO1xuICAgICAgbmVlZENvbnRhaW5lclRyYW5zZm9ybSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChpdGVtc0NoYW5nZWQpIHtcbiAgICAgIGlmICghaW5kQ2hhbmdlZCkgeyBhZGRpdGlvbmFsVXBkYXRlcygpOyB9XG4gICAgfSBlbHNlIGlmIChmaXhlZFdpZHRoIHx8IGF1dG9XaWR0aCkge1xuICAgICAgZG9MYXp5TG9hZCgpOyBcbiAgICAgIHVwZGF0ZVNsaWRlU3RhdHVzKCk7XG4gICAgICB1cGRhdGVMaXZlUmVnaW9uKCk7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1zQ2hhbmdlZCAmJiAhY2Fyb3VzZWwpIHsgdXBkYXRlR2FsbGVyeVNsaWRlUG9zaXRpb25zKCk7IH1cblxuICAgIGlmICghZGlzYWJsZSAmJiAhZnJlZXplKSB7XG4gICAgICAvLyBub24tbWVkdWFxdWVyaWVzOiBJRThcbiAgICAgIGlmIChicENoYW5nZWQgJiYgIUNTU01RKSB7XG4gICAgICAgIC8vIG1pZGRsZSB3cmFwcGVyIHN0eWxlc1xuICAgICAgICBpZiAoYXV0b0hlaWdodCAhPT0gYXV0b2hlaWdodFRlbSB8fCBzcGVlZCAhPT0gc3BlZWRUZW0pIHtcbiAgICAgICAgICB1cGRhdGVfY2Fyb3VzZWxfdHJhbnNpdGlvbl9kdXJhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW5uZXIgd3JhcHBlciBzdHlsZXNcbiAgICAgICAgaWYgKGVkZ2VQYWRkaW5nICE9PSBlZGdlUGFkZGluZ1RlbSB8fCBndXR0ZXIgIT09IGd1dHRlclRlbSkge1xuICAgICAgICAgIGlubmVyV3JhcHBlci5zdHlsZS5jc3NUZXh0ID0gZ2V0SW5uZXJXcmFwcGVyU3R5bGVzKGVkZ2VQYWRkaW5nLCBndXR0ZXIsIGZpeGVkV2lkdGgsIHNwZWVkLCBhdXRvSGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChob3Jpem9udGFsKSB7XG4gICAgICAgICAgLy8gY29udGFpbmVyIHN0eWxlc1xuICAgICAgICAgIGlmIChjYXJvdXNlbCkge1xuICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gZ2V0Q29udGFpbmVyV2lkdGgoZml4ZWRXaWR0aCwgZ3V0dGVyLCBpdGVtcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gc2xpZGUgc3R5bGVzXG4gICAgICAgICAgdmFyIHN0ciA9IGdldFNsaWRlV2lkdGhTdHlsZShmaXhlZFdpZHRoLCBndXR0ZXIsIGl0ZW1zKSArIFxuICAgICAgICAgICAgICAgICAgICBnZXRTbGlkZUd1dHRlclN0eWxlKGd1dHRlcik7XG5cbiAgICAgICAgICAvLyByZW1vdmUgdGhlIGxhc3QgbGluZSBhbmRcbiAgICAgICAgICAvLyBhZGQgbmV3IHN0eWxlc1xuICAgICAgICAgIHJlbW92ZUNTU1J1bGUoc2hlZXQsIGdldENzc1J1bGVzTGVuZ3RoKHNoZWV0KSAtIDEpO1xuICAgICAgICAgIGFkZENTU1J1bGUoc2hlZXQsICcjJyArIHNsaWRlSWQgKyAnID4gLnRucy1pdGVtJywgc3RyLCBnZXRDc3NSdWxlc0xlbmd0aChzaGVldCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGF1dG8gaGVpZ2h0XG4gICAgICBpZiAoYXV0b0hlaWdodCkgeyBkb0F1dG9IZWlnaHQoKTsgfVxuXG4gICAgICBpZiAobmVlZENvbnRhaW5lclRyYW5zZm9ybSkge1xuICAgICAgICBkb0NvbnRhaW5lclRyYW5zZm9ybVNpbGVudCgpO1xuICAgICAgICBpbmRleENhY2hlZCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChicENoYW5nZWQpIHsgZXZlbnRzLmVtaXQoJ25ld0JyZWFrcG9pbnRFbmQnLCBpbmZvKGUpKTsgfVxuICB9XG5cblxuXG5cblxuICAvLyA9PT0gSU5JVElBTElaQVRJT04gRlVOQ1RJT05TID09PSAvL1xuICBmdW5jdGlvbiBnZXRGcmVlemUgKCkge1xuICAgIGlmICghZml4ZWRXaWR0aCAmJiAhYXV0b1dpZHRoKSB7XG4gICAgICB2YXIgYSA9IGNlbnRlciA/IGl0ZW1zIC0gKGl0ZW1zIC0gMSkgLyAyIDogaXRlbXM7XG4gICAgICByZXR1cm4gIHNsaWRlQ291bnQgPD0gYTtcbiAgICB9XG5cbiAgICB2YXIgd2lkdGggPSBmaXhlZFdpZHRoID8gKGZpeGVkV2lkdGggKyBndXR0ZXIpICogc2xpZGVDb3VudCA6IHNsaWRlUG9zaXRpb25zW3NsaWRlQ291bnRdLFxuICAgICAgICB2cCA9IGVkZ2VQYWRkaW5nID8gdmlld3BvcnQgKyBlZGdlUGFkZGluZyAqIDIgOiB2aWV3cG9ydCArIGd1dHRlcjtcblxuICAgIGlmIChjZW50ZXIpIHtcbiAgICAgIHZwIC09IGZpeGVkV2lkdGggPyAodmlld3BvcnQgLSBmaXhlZFdpZHRoKSAvIDIgOiAodmlld3BvcnQgLSAoc2xpZGVQb3NpdGlvbnNbaW5kZXggKyAxXSAtIHNsaWRlUG9zaXRpb25zW2luZGV4XSAtIGd1dHRlcikpIC8gMjtcbiAgICB9XG5cbiAgICByZXR1cm4gd2lkdGggPD0gdnA7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRCcmVha3BvaW50Wm9uZSAoKSB7XG4gICAgYnJlYWtwb2ludFpvbmUgPSAwO1xuICAgIGZvciAodmFyIGJwIGluIHJlc3BvbnNpdmUpIHtcbiAgICAgIGJwID0gcGFyc2VJbnQoYnApOyAvLyBjb252ZXJ0IHN0cmluZyB0byBudW1iZXJcbiAgICAgIGlmICh3aW5kb3dXaWR0aCA+PSBicCkgeyBicmVha3BvaW50Wm9uZSA9IGJwOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gKHNsaWRlQnksIGluZGV4TWluLCBpbmRleE1heCkgPT4gaW5kZXhcbiAgdmFyIHVwZGF0ZUluZGV4ID0gKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbG9vcCA/IFxuICAgICAgY2Fyb3VzZWwgP1xuICAgICAgICAvLyBsb29wICsgY2Fyb3VzZWxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBsZWZ0RWRnZSA9IGluZGV4TWluLFxuICAgICAgICAgICAgICByaWdodEVkZ2UgPSBpbmRleE1heDtcblxuICAgICAgICAgIGxlZnRFZGdlICs9IHNsaWRlQnk7XG4gICAgICAgICAgcmlnaHRFZGdlIC09IHNsaWRlQnk7XG5cbiAgICAgICAgICAvLyBhZGp1c3QgZWRnZXMgd2hlbiBoYXMgZWRnZSBwYWRkaW5nc1xuICAgICAgICAgIC8vIG9yIGZpeGVkLXdpZHRoIHNsaWRlciB3aXRoIGV4dHJhIHNwYWNlIG9uIHRoZSByaWdodCBzaWRlXG4gICAgICAgICAgaWYgKGVkZ2VQYWRkaW5nKSB7XG4gICAgICAgICAgICBsZWZ0RWRnZSArPSAxO1xuICAgICAgICAgICAgcmlnaHRFZGdlIC09IDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChmaXhlZFdpZHRoKSB7XG4gICAgICAgICAgICBpZiAoKHZpZXdwb3J0ICsgZ3V0dGVyKSUoZml4ZWRXaWR0aCArIGd1dHRlcikpIHsgcmlnaHRFZGdlIC09IDE7IH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2xvbmVDb3VudCkge1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gcmlnaHRFZGdlKSB7XG4gICAgICAgICAgICAgIGluZGV4IC09IHNsaWRlQ291bnQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgbGVmdEVkZ2UpIHtcbiAgICAgICAgICAgICAgaW5kZXggKz0gc2xpZGVDb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gOlxuICAgICAgICAvLyBsb29wICsgZ2FsbGVyeVxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPiBpbmRleE1heCkge1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4ID49IGluZGV4TWluICsgc2xpZGVDb3VudCkgeyBpbmRleCAtPSBzbGlkZUNvdW50OyB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA8IGluZGV4TWluKSB7XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPD0gaW5kZXhNYXggLSBzbGlkZUNvdW50KSB7IGluZGV4ICs9IHNsaWRlQ291bnQ7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gOlxuICAgICAgLy8gbm9uLWxvb3BcbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICBpbmRleCA9IE1hdGgubWF4KGluZGV4TWluLCBNYXRoLm1pbihpbmRleE1heCwgaW5kZXgpKTtcbiAgICAgIH07XG4gIH0pKCk7XG5cbiAgZnVuY3Rpb24gZGlzYWJsZVVJICgpIHtcbiAgICBpZiAoIWF1dG9wbGF5ICYmIGF1dG9wbGF5QnV0dG9uKSB7IGhpZGVFbGVtZW50KGF1dG9wbGF5QnV0dG9uKTsgfVxuICAgIGlmICghbmF2ICYmIG5hdkNvbnRhaW5lcikgeyBoaWRlRWxlbWVudChuYXZDb250YWluZXIpOyB9XG4gICAgaWYgKCFjb250cm9scykge1xuICAgICAgaWYgKGNvbnRyb2xzQ29udGFpbmVyKSB7XG4gICAgICAgIGhpZGVFbGVtZW50KGNvbnRyb2xzQ29udGFpbmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcmV2QnV0dG9uKSB7IGhpZGVFbGVtZW50KHByZXZCdXR0b24pOyB9XG4gICAgICAgIGlmIChuZXh0QnV0dG9uKSB7IGhpZGVFbGVtZW50KG5leHRCdXR0b24pOyB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW5hYmxlVUkgKCkge1xuICAgIGlmIChhdXRvcGxheSAmJiBhdXRvcGxheUJ1dHRvbikgeyBzaG93RWxlbWVudChhdXRvcGxheUJ1dHRvbik7IH1cbiAgICBpZiAobmF2ICYmIG5hdkNvbnRhaW5lcikgeyBzaG93RWxlbWVudChuYXZDb250YWluZXIpOyB9XG4gICAgaWYgKGNvbnRyb2xzKSB7XG4gICAgICBpZiAoY29udHJvbHNDb250YWluZXIpIHtcbiAgICAgICAgc2hvd0VsZW1lbnQoY29udHJvbHNDb250YWluZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZXZCdXR0b24pIHsgc2hvd0VsZW1lbnQocHJldkJ1dHRvbik7IH1cbiAgICAgICAgaWYgKG5leHRCdXR0b24pIHsgc2hvd0VsZW1lbnQobmV4dEJ1dHRvbik7IH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmcmVlemVTbGlkZXIgKCkge1xuICAgIGlmIChmcm96ZW4pIHsgcmV0dXJuOyB9XG5cbiAgICAvLyByZW1vdmUgZWRnZSBwYWRkaW5nIGZyb20gaW5uZXIgd3JhcHBlclxuICAgIGlmIChlZGdlUGFkZGluZykgeyBpbm5lcldyYXBwZXIuc3R5bGUubWFyZ2luID0gJzBweCc7IH1cblxuICAgIC8vIGFkZCBjbGFzcyB0bnMtdHJhbnNwYXJlbnQgdG8gY2xvbmVkIHNsaWRlc1xuICAgIGlmIChjbG9uZUNvdW50KSB7XG4gICAgICB2YXIgc3RyID0gJ3Rucy10cmFuc3BhcmVudCc7XG4gICAgICBmb3IgKHZhciBpID0gY2xvbmVDb3VudDsgaS0tOykge1xuICAgICAgICBpZiAoY2Fyb3VzZWwpIHsgYWRkQ2xhc3Moc2xpZGVJdGVtc1tpXSwgc3RyKTsgfVxuICAgICAgICBhZGRDbGFzcyhzbGlkZUl0ZW1zW3NsaWRlQ291bnROZXcgLSBpIC0gMV0sIHN0cik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHRvb2xzXG4gICAgZGlzYWJsZVVJKCk7XG5cbiAgICBmcm96ZW4gPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5mcmVlemVTbGlkZXIgKCkge1xuICAgIGlmICghZnJvemVuKSB7IHJldHVybjsgfVxuXG4gICAgLy8gcmVzdG9yZSBlZGdlIHBhZGRpbmcgZm9yIGlubmVyIHdyYXBwZXJcbiAgICAvLyBmb3IgbW9yZGVybiBicm93c2Vyc1xuICAgIGlmIChlZGdlUGFkZGluZyAmJiBDU1NNUSkgeyBpbm5lcldyYXBwZXIuc3R5bGUubWFyZ2luID0gJyc7IH1cblxuICAgIC8vIHJlbW92ZSBjbGFzcyB0bnMtdHJhbnNwYXJlbnQgdG8gY2xvbmVkIHNsaWRlc1xuICAgIGlmIChjbG9uZUNvdW50KSB7XG4gICAgICB2YXIgc3RyID0gJ3Rucy10cmFuc3BhcmVudCc7XG4gICAgICBmb3IgKHZhciBpID0gY2xvbmVDb3VudDsgaS0tOykge1xuICAgICAgICBpZiAoY2Fyb3VzZWwpIHsgcmVtb3ZlQ2xhc3Moc2xpZGVJdGVtc1tpXSwgc3RyKTsgfVxuICAgICAgICByZW1vdmVDbGFzcyhzbGlkZUl0ZW1zW3NsaWRlQ291bnROZXcgLSBpIC0gMV0sIHN0cik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHRvb2xzXG4gICAgZW5hYmxlVUkoKTtcblxuICAgIGZyb3plbiA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzYWJsZVNsaWRlciAoKSB7XG4gICAgaWYgKGRpc2FibGVkKSB7IHJldHVybjsgfVxuXG4gICAgc2hlZXQuZGlzYWJsZWQgPSB0cnVlO1xuICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBjb250YWluZXIuY2xhc3NOYW1lLnJlcGxhY2UobmV3Q29udGFpbmVyQ2xhc3Nlcy5zdWJzdHJpbmcoMSksICcnKTtcbiAgICByZW1vdmVBdHRycyhjb250YWluZXIsIFsnc3R5bGUnXSk7XG4gICAgaWYgKGxvb3ApIHtcbiAgICAgIGZvciAodmFyIGogPSBjbG9uZUNvdW50OyBqLS07KSB7XG4gICAgICAgIGlmIChjYXJvdXNlbCkgeyBoaWRlRWxlbWVudChzbGlkZUl0ZW1zW2pdKTsgfVxuICAgICAgICBoaWRlRWxlbWVudChzbGlkZUl0ZW1zW3NsaWRlQ291bnROZXcgLSBqIC0gMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHZlcnRpY2FsIHNsaWRlclxuICAgIGlmICghaG9yaXpvbnRhbCB8fCAhY2Fyb3VzZWwpIHsgcmVtb3ZlQXR0cnMoaW5uZXJXcmFwcGVyLCBbJ3N0eWxlJ10pOyB9XG5cbiAgICAvLyBnYWxsZXJ5XG4gICAgaWYgKCFjYXJvdXNlbCkgeyBcbiAgICAgIGZvciAodmFyIGkgPSBpbmRleCwgbCA9IGluZGV4ICsgc2xpZGVDb3VudDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgaXRlbSA9IHNsaWRlSXRlbXNbaV07XG4gICAgICAgIHJlbW92ZUF0dHJzKGl0ZW0sIFsnc3R5bGUnXSk7XG4gICAgICAgIHJlbW92ZUNsYXNzKGl0ZW0sIGFuaW1hdGVJbik7XG4gICAgICAgIHJlbW92ZUNsYXNzKGl0ZW0sIGFuaW1hdGVOb3JtYWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHVwZGF0ZSB0b29sc1xuICAgIGRpc2FibGVVSSgpO1xuXG4gICAgZGlzYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5hYmxlU2xpZGVyICgpIHtcbiAgICBpZiAoIWRpc2FibGVkKSB7IHJldHVybjsgfVxuXG4gICAgc2hlZXQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICBjb250YWluZXIuY2xhc3NOYW1lICs9IG5ld0NvbnRhaW5lckNsYXNzZXM7XG4gICAgZG9Db250YWluZXJUcmFuc2Zvcm1TaWxlbnQoKTtcblxuICAgIGlmIChsb29wKSB7XG4gICAgICBmb3IgKHZhciBqID0gY2xvbmVDb3VudDsgai0tOykge1xuICAgICAgICBpZiAoY2Fyb3VzZWwpIHsgc2hvd0VsZW1lbnQoc2xpZGVJdGVtc1tqXSk7IH1cbiAgICAgICAgc2hvd0VsZW1lbnQoc2xpZGVJdGVtc1tzbGlkZUNvdW50TmV3IC0gaiAtIDFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBnYWxsZXJ5XG4gICAgaWYgKCFjYXJvdXNlbCkgeyBcbiAgICAgIGZvciAodmFyIGkgPSBpbmRleCwgbCA9IGluZGV4ICsgc2xpZGVDb3VudDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgaXRlbSA9IHNsaWRlSXRlbXNbaV0sXG4gICAgICAgICAgICBjbGFzc04gPSBpIDwgaW5kZXggKyBpdGVtcyA/IGFuaW1hdGVJbiA6IGFuaW1hdGVOb3JtYWw7XG4gICAgICAgIGl0ZW0uc3R5bGUubGVmdCA9IChpIC0gaW5kZXgpICogMTAwIC8gaXRlbXMgKyAnJSc7XG4gICAgICAgIGFkZENsYXNzKGl0ZW0sIGNsYXNzTik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHRvb2xzXG4gICAgZW5hYmxlVUkoKTtcblxuICAgIGRpc2FibGVkID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVMaXZlUmVnaW9uICgpIHtcbiAgICB2YXIgc3RyID0gZ2V0TGl2ZVJlZ2lvblN0cigpO1xuICAgIGlmIChsaXZlcmVnaW9uQ3VycmVudC5pbm5lckhUTUwgIT09IHN0cikgeyBsaXZlcmVnaW9uQ3VycmVudC5pbm5lckhUTUwgPSBzdHI7IH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExpdmVSZWdpb25TdHIgKCkge1xuICAgIHZhciBhcnIgPSBnZXRWaXNpYmxlU2xpZGVSYW5nZSgpLFxuICAgICAgICBzdGFydCA9IGFyclswXSArIDEsXG4gICAgICAgIGVuZCA9IGFyclsxXSArIDE7XG4gICAgcmV0dXJuIHN0YXJ0ID09PSBlbmQgPyBzdGFydCArICcnIDogc3RhcnQgKyAnIHRvICcgKyBlbmQ7IFxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VmlzaWJsZVNsaWRlUmFuZ2UgKHZhbCkge1xuICAgIGlmICh2YWwgPT0gbnVsbCkgeyB2YWwgPSBnZXRDb250YWluZXJUcmFuc2Zvcm1WYWx1ZSgpOyB9XG4gICAgdmFyIHN0YXJ0ID0gaW5kZXgsIGVuZCwgcmFuZ2VzdGFydCwgcmFuZ2VlbmQ7XG5cbiAgICAvLyBnZXQgcmFuZ2Ugc3RhcnQsIHJhbmdlIGVuZCBmb3IgYXV0b1dpZHRoIGFuZCBmaXhlZFdpZHRoXG4gICAgaWYgKGNlbnRlciB8fCBlZGdlUGFkZGluZykge1xuICAgICAgaWYgKGF1dG9XaWR0aCB8fCBmaXhlZFdpZHRoKSB7XG4gICAgICAgIHJhbmdlc3RhcnQgPSAtIChwYXJzZUZsb2F0KHZhbCkgKyBlZGdlUGFkZGluZyk7XG4gICAgICAgIHJhbmdlZW5kID0gcmFuZ2VzdGFydCArIHZpZXdwb3J0ICsgZWRnZVBhZGRpbmcgKiAyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYXV0b1dpZHRoKSB7XG4gICAgICAgIHJhbmdlc3RhcnQgPSBzbGlkZVBvc2l0aW9uc1tpbmRleF07XG4gICAgICAgIHJhbmdlZW5kID0gcmFuZ2VzdGFydCArIHZpZXdwb3J0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGdldCBzdGFydCwgZW5kXG4gICAgLy8gLSBjaGVjayBhdXRvIHdpZHRoXG4gICAgaWYgKGF1dG9XaWR0aCkge1xuICAgICAgc2xpZGVQb3NpdGlvbnMuZm9yRWFjaChmdW5jdGlvbihwb2ludCwgaSkge1xuICAgICAgICBpZiAoaSA8IHNsaWRlQ291bnROZXcpIHtcbiAgICAgICAgICBpZiAoKGNlbnRlciB8fCBlZGdlUGFkZGluZykgJiYgcG9pbnQgPD0gcmFuZ2VzdGFydCArIDAuNSkgeyBzdGFydCA9IGk7IH1cbiAgICAgICAgICBpZiAocmFuZ2VlbmQgLSBwb2ludCA+PSAwLjUpIHsgZW5kID0gaTsgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIC8vIC0gY2hlY2sgcGVyY2VudGFnZSB3aWR0aCwgZml4ZWQgd2lkdGhcbiAgICB9IGVsc2Uge1xuXG4gICAgICBpZiAoZml4ZWRXaWR0aCkge1xuICAgICAgICB2YXIgY2VsbCA9IGZpeGVkV2lkdGggKyBndXR0ZXI7XG4gICAgICAgIGlmIChjZW50ZXIgfHwgZWRnZVBhZGRpbmcpIHtcbiAgICAgICAgICBzdGFydCA9IE1hdGguZmxvb3IocmFuZ2VzdGFydC9jZWxsKTtcbiAgICAgICAgICBlbmQgPSBNYXRoLmNlaWwocmFuZ2VlbmQvY2VsbCAtIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0ICsgTWF0aC5jZWlsKHZpZXdwb3J0L2NlbGwpIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY2VudGVyIHx8IGVkZ2VQYWRkaW5nKSB7XG4gICAgICAgICAgdmFyIGEgPSBpdGVtcyAtIDE7XG4gICAgICAgICAgaWYgKGNlbnRlcikge1xuICAgICAgICAgICAgc3RhcnQgLT0gYSAvIDI7XG4gICAgICAgICAgICBlbmQgPSBpbmRleCArIGEgLyAyO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbmQgPSBpbmRleCArIGE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGVkZ2VQYWRkaW5nKSB7XG4gICAgICAgICAgICB2YXIgYiA9IGVkZ2VQYWRkaW5nICogaXRlbXMgLyB2aWV3cG9ydDtcbiAgICAgICAgICAgIHN0YXJ0IC09IGI7XG4gICAgICAgICAgICBlbmQgKz0gYjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQpO1xuICAgICAgICAgIGVuZCA9IE1hdGguY2VpbChlbmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0ICsgaXRlbXMgLSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0ID0gTWF0aC5tYXgoc3RhcnQsIDApO1xuICAgICAgZW5kID0gTWF0aC5taW4oZW5kLCBzbGlkZUNvdW50TmV3IC0gMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtzdGFydCwgZW5kXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvTGF6eUxvYWQgKCkge1xuICAgIGlmIChsYXp5bG9hZCAmJiAhZGlzYWJsZSkge1xuICAgICAgZ2V0SW1hZ2VBcnJheS5hcHBseShudWxsLCBnZXRWaXNpYmxlU2xpZGVSYW5nZSgpKS5mb3JFYWNoKGZ1bmN0aW9uIChpbWcpIHtcbiAgICAgICAgaWYgKCFoYXNDbGFzcyhpbWcsIGltZ0NvbXBsZXRlQ2xhc3MpKSB7XG4gICAgICAgICAgLy8gc3RvcCBwcm9wYWdhdGlvbiB0cmFuc2l0aW9uZW5kIGV2ZW50IHRvIGNvbnRhaW5lclxuICAgICAgICAgIHZhciBldmUgPSB7fTtcbiAgICAgICAgICBldmVbVFJBTlNJVElPTkVORF0gPSBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpOyB9O1xuICAgICAgICAgIGFkZEV2ZW50cyhpbWcsIGV2ZSk7XG5cbiAgICAgICAgICBhZGRFdmVudHMoaW1nLCBpbWdFdmVudHMpO1xuXG4gICAgICAgICAgLy8gdXBkYXRlIHNyY1xuICAgICAgICAgIGltZy5zcmMgPSBnZXRBdHRyKGltZywgJ2RhdGEtc3JjJyk7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgc3Jjc2V0XG4gICAgICAgICAgdmFyIHNyY3NldCA9IGdldEF0dHIoaW1nLCAnZGF0YS1zcmNzZXQnKTtcbiAgICAgICAgICBpZiAoc3Jjc2V0KSB7IGltZy5zcmNzZXQgPSBzcmNzZXQ7IH1cblxuICAgICAgICAgIGFkZENsYXNzKGltZywgJ2xvYWRpbmcnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25JbWdMb2FkZWQgKGUpIHtcbiAgICBpbWdMb2FkZWQoZ2V0VGFyZ2V0KGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uSW1nRmFpbGVkIChlKSB7XG4gICAgaW1nRmFpbGVkKGdldFRhcmdldChlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbWdMb2FkZWQgKGltZykge1xuICAgIGFkZENsYXNzKGltZywgJ2xvYWRlZCcpO1xuICAgIGltZ0NvbXBsZXRlZChpbWcpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW1nRmFpbGVkIChpbWcpIHtcbiAgICBhZGRDbGFzcyhpbWcsICdmYWlsZWQnKTtcbiAgICBpbWdDb21wbGV0ZWQoaW1nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGltZ0NvbXBsZXRlZCAoaW1nKSB7XG4gICAgYWRkQ2xhc3MoaW1nLCAndG5zLWNvbXBsZXRlJyk7XG4gICAgcmVtb3ZlQ2xhc3MoaW1nLCAnbG9hZGluZycpO1xuICAgIHJlbW92ZUV2ZW50cyhpbWcsIGltZ0V2ZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbWFnZUFycmF5IChzdGFydCwgZW5kKSB7XG4gICAgdmFyIGltZ3MgPSBbXTtcbiAgICB3aGlsZSAoc3RhcnQgPD0gZW5kKSB7XG4gICAgICBmb3JFYWNoKHNsaWRlSXRlbXNbc3RhcnRdLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpLCBmdW5jdGlvbiAoaW1nKSB7IGltZ3MucHVzaChpbWcpOyB9KTtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGltZ3M7XG4gIH1cblxuICAvLyBjaGVjayBpZiBhbGwgdmlzaWJsZSBpbWFnZXMgYXJlIGxvYWRlZFxuICAvLyBhbmQgdXBkYXRlIGNvbnRhaW5lciBoZWlnaHQgaWYgaXQncyBkb25lXG4gIGZ1bmN0aW9uIGRvQXV0b0hlaWdodCAoKSB7XG4gICAgdmFyIGltZ3MgPSBnZXRJbWFnZUFycmF5LmFwcGx5KG51bGwsIGdldFZpc2libGVTbGlkZVJhbmdlKCkpO1xuICAgIHJhZihmdW5jdGlvbigpeyBpbWdzTG9hZGVkQ2hlY2soaW1ncywgdXBkYXRlSW5uZXJXcmFwcGVySGVpZ2h0KTsgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbWdzTG9hZGVkQ2hlY2sgKGltZ3MsIGNiKSB7XG4gICAgLy8gZGlyZWN0bHkgZXhlY3V0ZSBjYWxsYmFjayBmdW5jdGlvbiBpZiBhbGwgaW1hZ2VzIGFyZSBjb21wbGV0ZVxuICAgIGlmIChpbWdzQ29tcGxldGUpIHsgcmV0dXJuIGNiKCk7IH1cblxuICAgIC8vIGNoZWNrIHNlbGVjdGVkIGltYWdlIGNsYXNzZXMgb3RoZXJ3aXNlXG4gICAgaW1ncy5mb3JFYWNoKGZ1bmN0aW9uIChpbWcsIGluZGV4KSB7XG4gICAgICBpZiAoaGFzQ2xhc3MoaW1nLCBpbWdDb21wbGV0ZUNsYXNzKSkgeyBpbWdzLnNwbGljZShpbmRleCwgMSk7IH1cbiAgICB9KTtcblxuICAgIC8vIGV4ZWN1dGUgY2FsbGJhY2sgZnVuY3Rpb24gaWYgc2VsZWN0ZWQgaW1hZ2VzIGFyZSBhbGwgY29tcGxldGVcbiAgICBpZiAoIWltZ3MubGVuZ3RoKSB7IHJldHVybiBjYigpOyB9XG5cbiAgICAvLyBvdGhlcndpc2UgZXhlY3V0ZSB0aGlzIGZ1bmN0aW9uYSBhZ2FpblxuICAgIHJhZihmdW5jdGlvbigpeyBpbWdzTG9hZGVkQ2hlY2soaW1ncywgY2IpOyB9KTtcbiAgfSBcblxuICBmdW5jdGlvbiBhZGRpdGlvbmFsVXBkYXRlcyAoKSB7XG4gICAgZG9MYXp5TG9hZCgpOyBcbiAgICB1cGRhdGVTbGlkZVN0YXR1cygpO1xuICAgIHVwZGF0ZUxpdmVSZWdpb24oKTtcbiAgICB1cGRhdGVDb250cm9sc1N0YXR1cygpO1xuICAgIHVwZGF0ZU5hdlN0YXR1cygpO1xuICB9XG5cblxuICBmdW5jdGlvbiB1cGRhdGVfY2Fyb3VzZWxfdHJhbnNpdGlvbl9kdXJhdGlvbiAoKSB7XG4gICAgaWYgKGNhcm91c2VsICYmIGF1dG9IZWlnaHQpIHtcbiAgICAgIG1pZGRsZVdyYXBwZXIuc3R5bGVbVFJBTlNJVElPTkRVUkFUSU9OXSA9IHNwZWVkIC8gMTAwMCArICdzJztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNYXhTbGlkZUhlaWdodCAoc2xpZGVTdGFydCwgc2xpZGVSYW5nZSkge1xuICAgIHZhciBoZWlnaHRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IHNsaWRlU3RhcnQsIGwgPSBNYXRoLm1pbihzbGlkZVN0YXJ0ICsgc2xpZGVSYW5nZSwgc2xpZGVDb3VudE5ldyk7IGkgPCBsOyBpKyspIHtcbiAgICAgIGhlaWdodHMucHVzaChzbGlkZUl0ZW1zW2ldLm9mZnNldEhlaWdodCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xuICB9XG5cbiAgLy8gdXBkYXRlIGlubmVyIHdyYXBwZXIgaGVpZ2h0XG4gIC8vIDEuIGdldCB0aGUgbWF4LWhlaWdodCBvZiB0aGUgdmlzaWJsZSBzbGlkZXNcbiAgLy8gMi4gc2V0IHRyYW5zaXRpb25EdXJhdGlvbiB0byBzcGVlZFxuICAvLyAzLiB1cGRhdGUgaW5uZXIgd3JhcHBlciBoZWlnaHQgdG8gbWF4LWhlaWdodFxuICAvLyA0LiBzZXQgdHJhbnNpdGlvbkR1cmF0aW9uIHRvIDBzIGFmdGVyIHRyYW5zaXRpb24gZG9uZVxuICBmdW5jdGlvbiB1cGRhdGVJbm5lcldyYXBwZXJIZWlnaHQgKCkge1xuICAgIHZhciBtYXhIZWlnaHQgPSBhdXRvSGVpZ2h0ID8gZ2V0TWF4U2xpZGVIZWlnaHQoaW5kZXgsIGl0ZW1zKSA6IGdldE1heFNsaWRlSGVpZ2h0KGNsb25lQ291bnQsIHNsaWRlQ291bnQpLFxuICAgICAgICB3cCA9IG1pZGRsZVdyYXBwZXIgPyBtaWRkbGVXcmFwcGVyIDogaW5uZXJXcmFwcGVyO1xuXG4gICAgaWYgKHdwLnN0eWxlLmhlaWdodCAhPT0gbWF4SGVpZ2h0KSB7IHdwLnN0eWxlLmhlaWdodCA9IG1heEhlaWdodCArICdweCc7IH1cbiAgfVxuXG4gIC8vIGdldCB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgdG9wIGVkZ2Ugb2YgdGhlIGZpcnN0IHNsaWRlIHRvIGVhY2ggc2xpZGVcbiAgLy8gKGluaXQpID0+IHNsaWRlUG9zaXRpb25zXG4gIGZ1bmN0aW9uIHNldFNsaWRlUG9zaXRpb25zICgpIHtcbiAgICBzbGlkZVBvc2l0aW9ucyA9IFswXTtcbiAgICB2YXIgYXR0ciA9IGhvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJyxcbiAgICAgICAgYXR0cjIgPSBob3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nLFxuICAgICAgICBiYXNlID0gc2xpZGVJdGVtc1swXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVthdHRyXTtcblxuICAgIGZvckVhY2goc2xpZGVJdGVtcywgZnVuY3Rpb24oaXRlbSwgaSkge1xuICAgICAgLy8gc2tpcCB0aGUgZmlyc3Qgc2xpZGVcbiAgICAgIGlmIChpKSB7IHNsaWRlUG9zaXRpb25zLnB1c2goaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVthdHRyXSAtIGJhc2UpOyB9XG4gICAgICAvLyBhZGQgdGhlIGVuZCBlZGdlXG4gICAgICBpZiAoaSA9PT0gc2xpZGVDb3VudE5ldyAtIDEpIHsgc2xpZGVQb3NpdGlvbnMucHVzaChpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2F0dHIyXSAtIGJhc2UpOyB9XG4gICAgfSk7XG4gIH1cblxuICAvLyB1cGRhdGUgc2xpZGVcbiAgZnVuY3Rpb24gdXBkYXRlU2xpZGVTdGF0dXMgKCkge1xuICAgIHZhciByYW5nZSA9IGdldFZpc2libGVTbGlkZVJhbmdlKCksXG4gICAgICAgIHN0YXJ0ID0gcmFuZ2VbMF0sXG4gICAgICAgIGVuZCA9IHJhbmdlWzFdO1xuXG4gICAgZm9yRWFjaChzbGlkZUl0ZW1zLCBmdW5jdGlvbihpdGVtLCBpKSB7XG4gICAgICAvLyBzaG93IHNsaWRlc1xuICAgICAgaWYgKGkgPj0gc3RhcnQgJiYgaSA8PSBlbmQpIHtcbiAgICAgICAgaWYgKGhhc0F0dHIoaXRlbSwgJ2FyaWEtaGlkZGVuJykpIHtcbiAgICAgICAgICByZW1vdmVBdHRycyhpdGVtLCBbJ2FyaWEtaGlkZGVuJywgJ3RhYmluZGV4J10pO1xuICAgICAgICAgIGFkZENsYXNzKGl0ZW0sIHNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAvLyBoaWRlIHNsaWRlc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNBdHRyKGl0ZW0sICdhcmlhLWhpZGRlbicpKSB7XG4gICAgICAgICAgc2V0QXR0cnMoaXRlbSwge1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlbW92ZUNsYXNzKGl0ZW0sIHNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBnYWxsZXJ5OiB1cGRhdGUgc2xpZGUgcG9zaXRpb25cbiAgZnVuY3Rpb24gdXBkYXRlR2FsbGVyeVNsaWRlUG9zaXRpb25zICgpIHtcbiAgICB2YXIgbCA9IGluZGV4ICsgTWF0aC5taW4oc2xpZGVDb3VudCwgaXRlbXMpO1xuICAgIGZvciAodmFyIGkgPSBzbGlkZUNvdW50TmV3OyBpLS07KSB7XG4gICAgICB2YXIgaXRlbSA9IHNsaWRlSXRlbXNbaV07XG5cbiAgICAgIGlmIChpID49IGluZGV4ICYmIGkgPCBsKSB7XG4gICAgICAgIC8vIGFkZCB0cmFuc2l0aW9ucyB0byB2aXNpYmxlIHNsaWRlcyB3aGVuIGFkanVzdGluZyB0aGVpciBwb3NpdGlvbnNcbiAgICAgICAgYWRkQ2xhc3MoaXRlbSwgJ3Rucy1tb3ZpbmcnKTtcblxuICAgICAgICBpdGVtLnN0eWxlLmxlZnQgPSAoaSAtIGluZGV4KSAqIDEwMCAvIGl0ZW1zICsgJyUnO1xuICAgICAgICBhZGRDbGFzcyhpdGVtLCBhbmltYXRlSW4pO1xuICAgICAgICByZW1vdmVDbGFzcyhpdGVtLCBhbmltYXRlTm9ybWFsKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbS5zdHlsZS5sZWZ0KSB7XG4gICAgICAgIGl0ZW0uc3R5bGUubGVmdCA9ICcnO1xuICAgICAgICBhZGRDbGFzcyhpdGVtLCBhbmltYXRlTm9ybWFsKTtcbiAgICAgICAgcmVtb3ZlQ2xhc3MoaXRlbSwgYW5pbWF0ZUluKTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVtb3ZlIG91dGxldCBhbmltYXRpb25cbiAgICAgIHJlbW92ZUNsYXNzKGl0ZW0sIGFuaW1hdGVPdXQpO1xuICAgIH1cblxuICAgIC8vIHJlbW92aW5nICcudG5zLW1vdmluZydcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZm9yRWFjaChzbGlkZUl0ZW1zLCBmdW5jdGlvbihlbCkge1xuICAgICAgICByZW1vdmVDbGFzcyhlbCwgJ3Rucy1tb3ZpbmcnKTtcbiAgICAgIH0pO1xuICAgIH0sIDMwMCk7XG4gIH1cblxuICAvLyBzZXQgdGFiaW5kZXggb24gTmF2XG4gIGZ1bmN0aW9uIHVwZGF0ZU5hdlN0YXR1cyAoKSB7XG4gICAgLy8gZ2V0IGN1cnJlbnQgbmF2XG4gICAgaWYgKG5hdikge1xuICAgICAgbmF2Q3VycmVudEluZGV4ID0gbmF2Q2xpY2tlZCA+PSAwID8gbmF2Q2xpY2tlZCA6IGdldEN1cnJlbnROYXZJbmRleCgpO1xuICAgICAgbmF2Q2xpY2tlZCA9IC0xO1xuXG4gICAgICBpZiAobmF2Q3VycmVudEluZGV4ICE9PSBuYXZDdXJyZW50SW5kZXhDYWNoZWQpIHtcbiAgICAgICAgdmFyIG5hdlByZXYgPSBuYXZJdGVtc1tuYXZDdXJyZW50SW5kZXhDYWNoZWRdLFxuICAgICAgICAgICAgbmF2Q3VycmVudCA9IG5hdkl0ZW1zW25hdkN1cnJlbnRJbmRleF07XG5cbiAgICAgICAgc2V0QXR0cnMobmF2UHJldiwge1xuICAgICAgICAgICd0YWJpbmRleCc6ICctMScsXG4gICAgICAgICAgJ2FyaWEtbGFiZWwnOiBuYXZTdHIgKyAobmF2Q3VycmVudEluZGV4Q2FjaGVkICsgMSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJlbW92ZUNsYXNzKG5hdlByZXYsIG5hdkFjdGl2ZUNsYXNzKTtcbiAgICAgICAgXG4gICAgICAgIHNldEF0dHJzKG5hdkN1cnJlbnQsIHsnYXJpYS1sYWJlbCc6IG5hdlN0ciArIChuYXZDdXJyZW50SW5kZXggKyAxKSArIG5hdlN0ckN1cnJlbnR9KTtcbiAgICAgICAgcmVtb3ZlQXR0cnMobmF2Q3VycmVudCwgJ3RhYmluZGV4Jyk7XG4gICAgICAgIGFkZENsYXNzKG5hdkN1cnJlbnQsIG5hdkFjdGl2ZUNsYXNzKTtcblxuICAgICAgICBuYXZDdXJyZW50SW5kZXhDYWNoZWQgPSBuYXZDdXJyZW50SW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TG93ZXJDYXNlTm9kZU5hbWUgKGVsKSB7XG4gICAgcmV0dXJuIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0J1dHRvbiAoZWwpIHtcbiAgICByZXR1cm4gZ2V0TG93ZXJDYXNlTm9kZU5hbWUoZWwpID09PSAnYnV0dG9uJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQXJpYURpc2FibGVkIChlbCkge1xuICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnKSA9PT0gJ3RydWUnO1xuICB9XG5cbiAgZnVuY3Rpb24gZGlzRW5hYmxlRWxlbWVudCAoaXNCdXR0b24sIGVsLCB2YWwpIHtcbiAgICBpZiAoaXNCdXR0b24pIHtcbiAgICAgIGVsLmRpc2FibGVkID0gdmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCB2YWwudG9TdHJpbmcoKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0ICdkaXNhYmxlZCcgdG8gdHJ1ZSBvbiBjb250cm9scyB3aGVuIHJlYWNoIHRoZSBlZGdlc1xuICBmdW5jdGlvbiB1cGRhdGVDb250cm9sc1N0YXR1cyAoKSB7XG4gICAgaWYgKCFjb250cm9scyB8fCByZXdpbmQgfHwgbG9vcCkgeyByZXR1cm47IH1cblxuICAgIHZhciBwcmV2RGlzYWJsZWQgPSAocHJldklzQnV0dG9uKSA/IHByZXZCdXR0b24uZGlzYWJsZWQgOiBpc0FyaWFEaXNhYmxlZChwcmV2QnV0dG9uKSxcbiAgICAgICAgbmV4dERpc2FibGVkID0gKG5leHRJc0J1dHRvbikgPyBuZXh0QnV0dG9uLmRpc2FibGVkIDogaXNBcmlhRGlzYWJsZWQobmV4dEJ1dHRvbiksXG4gICAgICAgIGRpc2FibGVQcmV2ID0gKGluZGV4IDw9IGluZGV4TWluKSA/IHRydWUgOiBmYWxzZSxcbiAgICAgICAgZGlzYWJsZU5leHQgPSAoIXJld2luZCAmJiBpbmRleCA+PSBpbmRleE1heCkgPyB0cnVlIDogZmFsc2U7XG5cbiAgICBpZiAoZGlzYWJsZVByZXYgJiYgIXByZXZEaXNhYmxlZCkge1xuICAgICAgZGlzRW5hYmxlRWxlbWVudChwcmV2SXNCdXR0b24sIHByZXZCdXR0b24sIHRydWUpO1xuICAgIH1cbiAgICBpZiAoIWRpc2FibGVQcmV2ICYmIHByZXZEaXNhYmxlZCkge1xuICAgICAgZGlzRW5hYmxlRWxlbWVudChwcmV2SXNCdXR0b24sIHByZXZCdXR0b24sIGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKGRpc2FibGVOZXh0ICYmICFuZXh0RGlzYWJsZWQpIHtcbiAgICAgIGRpc0VuYWJsZUVsZW1lbnQobmV4dElzQnV0dG9uLCBuZXh0QnV0dG9uLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKCFkaXNhYmxlTmV4dCAmJiBuZXh0RGlzYWJsZWQpIHtcbiAgICAgIGRpc0VuYWJsZUVsZW1lbnQobmV4dElzQnV0dG9uLCBuZXh0QnV0dG9uLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IGR1cmF0aW9uXG4gIGZ1bmN0aW9uIHJlc2V0RHVyYXRpb24gKGVsLCBzdHIpIHtcbiAgICBpZiAoVFJBTlNJVElPTkRVUkFUSU9OKSB7IGVsLnN0eWxlW1RSQU5TSVRJT05EVVJBVElPTl0gPSBzdHI7IH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNsaWRlcldpZHRoICgpIHtcbiAgICByZXR1cm4gZml4ZWRXaWR0aCA/IChmaXhlZFdpZHRoICsgZ3V0dGVyKSAqIHNsaWRlQ291bnROZXcgOiBzbGlkZVBvc2l0aW9uc1tzbGlkZUNvdW50TmV3XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENlbnRlckdhcCAobnVtKSB7XG4gICAgaWYgKG51bSA9PSBudWxsKSB7IG51bSA9IGluZGV4OyB9XG5cbiAgICB2YXIgZ2FwID0gZWRnZVBhZGRpbmcgPyBndXR0ZXIgOiAwO1xuICAgIHJldHVybiBhdXRvV2lkdGggPyAoKHZpZXdwb3J0IC0gZ2FwKSAtIChzbGlkZVBvc2l0aW9uc1tudW0gKyAxXSAtIHNsaWRlUG9zaXRpb25zW251bV0gLSBndXR0ZXIpKS8yIDpcbiAgICAgIGZpeGVkV2lkdGggPyAodmlld3BvcnQgLSBmaXhlZFdpZHRoKSAvIDIgOlxuICAgICAgICAoaXRlbXMgLSAxKSAvIDI7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSaWdodEJvdW5kYXJ5ICgpIHtcbiAgICB2YXIgZ2FwID0gZWRnZVBhZGRpbmcgPyBndXR0ZXIgOiAwLFxuICAgICAgICByZXN1bHQgPSAodmlld3BvcnQgKyBnYXApIC0gZ2V0U2xpZGVyV2lkdGgoKTtcblxuICAgIGlmIChjZW50ZXIgJiYgIWxvb3ApIHtcbiAgICAgIHJlc3VsdCA9IGZpeGVkV2lkdGggPyAtIChmaXhlZFdpZHRoICsgZ3V0dGVyKSAqIChzbGlkZUNvdW50TmV3IC0gMSkgLSBnZXRDZW50ZXJHYXAoKSA6XG4gICAgICAgIGdldENlbnRlckdhcChzbGlkZUNvdW50TmV3IC0gMSkgLSBzbGlkZVBvc2l0aW9uc1tzbGlkZUNvdW50TmV3IC0gMV07XG4gICAgfVxuICAgIGlmIChyZXN1bHQgPiAwKSB7IHJlc3VsdCA9IDA7IH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRDb250YWluZXJUcmFuc2Zvcm1WYWx1ZSAobnVtKSB7XG4gICAgaWYgKG51bSA9PSBudWxsKSB7IG51bSA9IGluZGV4OyB9XG5cbiAgICB2YXIgdmFsO1xuICAgIGlmIChob3Jpem9udGFsICYmICFhdXRvV2lkdGgpIHtcbiAgICAgIGlmIChmaXhlZFdpZHRoKSB7XG4gICAgICAgIHZhbCA9IC0gKGZpeGVkV2lkdGggKyBndXR0ZXIpICogbnVtO1xuICAgICAgICBpZiAoY2VudGVyKSB7IHZhbCArPSBnZXRDZW50ZXJHYXAoKTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRlbm9taW5hdG9yID0gVFJBTlNGT1JNID8gc2xpZGVDb3VudE5ldyA6IGl0ZW1zO1xuICAgICAgICBpZiAoY2VudGVyKSB7IG51bSAtPSBnZXRDZW50ZXJHYXAoKTsgfVxuICAgICAgICB2YWwgPSAtIG51bSAqIDEwMCAvIGRlbm9taW5hdG9yO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSAtIHNsaWRlUG9zaXRpb25zW251bV07XG4gICAgICBpZiAoY2VudGVyICYmIGF1dG9XaWR0aCkge1xuICAgICAgICB2YWwgKz0gZ2V0Q2VudGVyR2FwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc1JpZ2h0RGVhZFpvbmUpIHsgdmFsID0gTWF0aC5tYXgodmFsLCByaWdodEJvdW5kYXJ5KTsgfVxuXG4gICAgdmFsICs9IChob3Jpem9udGFsICYmICFhdXRvV2lkdGggJiYgIWZpeGVkV2lkdGgpID8gJyUnIDogJ3B4JztcblxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBmdW5jdGlvbiBkb0NvbnRhaW5lclRyYW5zZm9ybVNpbGVudCAodmFsKSB7XG4gICAgcmVzZXREdXJhdGlvbihjb250YWluZXIsICcwcycpO1xuICAgIGRvQ29udGFpbmVyVHJhbnNmb3JtKHZhbCk7XG4gIH1cblxuICBmdW5jdGlvbiBkb0NvbnRhaW5lclRyYW5zZm9ybSAodmFsKSB7XG4gICAgaWYgKHZhbCA9PSBudWxsKSB7IHZhbCA9IGdldENvbnRhaW5lclRyYW5zZm9ybVZhbHVlKCk7IH1cbiAgICBjb250YWluZXIuc3R5bGVbdHJhbnNmb3JtQXR0cl0gPSB0cmFuc2Zvcm1QcmVmaXggKyB2YWwgKyB0cmFuc2Zvcm1Qb3N0Zml4O1xuICB9XG5cbiAgZnVuY3Rpb24gYW5pbWF0ZVNsaWRlIChudW1iZXIsIGNsYXNzT3V0LCBjbGFzc0luLCBpc091dCkge1xuICAgIHZhciBsID0gbnVtYmVyICsgaXRlbXM7XG4gICAgaWYgKCFsb29wKSB7IGwgPSBNYXRoLm1pbihsLCBzbGlkZUNvdW50TmV3KTsgfVxuXG4gICAgZm9yICh2YXIgaSA9IG51bWJlcjsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgaXRlbSA9IHNsaWRlSXRlbXNbaV07XG5cbiAgICAgIC8vIHNldCBpdGVtIHBvc2l0aW9uc1xuICAgICAgaWYgKCFpc091dCkgeyBpdGVtLnN0eWxlLmxlZnQgPSAoaSAtIGluZGV4KSAqIDEwMCAvIGl0ZW1zICsgJyUnOyB9XG5cbiAgICAgIGlmIChhbmltYXRlRGVsYXkgJiYgVFJBTlNJVElPTkRFTEFZKSB7XG4gICAgICAgIGl0ZW0uc3R5bGVbVFJBTlNJVElPTkRFTEFZXSA9IGl0ZW0uc3R5bGVbQU5JTUFUSU9OREVMQVldID0gYW5pbWF0ZURlbGF5ICogKGkgLSBudW1iZXIpIC8gMTAwMCArICdzJztcbiAgICAgIH1cbiAgICAgIHJlbW92ZUNsYXNzKGl0ZW0sIGNsYXNzT3V0KTtcbiAgICAgIGFkZENsYXNzKGl0ZW0sIGNsYXNzSW4pO1xuICAgICAgXG4gICAgICBpZiAoaXNPdXQpIHsgc2xpZGVJdGVtc091dC5wdXNoKGl0ZW0pOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gbWFrZSB0cmFuc2ZlciBhZnRlciBjbGljay9kcmFnOlxuICAvLyAxLiBjaGFuZ2UgJ3RyYW5zZm9ybScgcHJvcGVydHkgZm9yIG1vcmRlcm4gYnJvd3NlcnNcbiAgLy8gMi4gY2hhbmdlICdsZWZ0JyBwcm9wZXJ0eSBmb3IgbGVnYWN5IGJyb3dzZXJzXG4gIHZhciB0cmFuc2Zvcm1Db3JlID0gKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2Fyb3VzZWwgP1xuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXNldER1cmF0aW9uKGNvbnRhaW5lciwgJycpO1xuICAgICAgICBpZiAoVFJBTlNJVElPTkRVUkFUSU9OIHx8ICFzcGVlZCkge1xuICAgICAgICAgIC8vIGZvciBtb3JkZW4gYnJvd3NlcnMgd2l0aCBub24temVybyBkdXJhdGlvbiBvciBcbiAgICAgICAgICAvLyB6ZXJvIGR1cmF0aW9uIGZvciBhbGwgYnJvd3NlcnNcbiAgICAgICAgICBkb0NvbnRhaW5lclRyYW5zZm9ybSgpO1xuICAgICAgICAgIC8vIHJ1biBmYWxsYmFjayBmdW5jdGlvbiBtYW51YWxseSBcbiAgICAgICAgICAvLyB3aGVuIGR1cmF0aW9uIGlzIDAgLyBjb250YWluZXIgaXMgaGlkZGVuXG4gICAgICAgICAgaWYgKCFzcGVlZCB8fCAhaXNWaXNpYmxlKGNvbnRhaW5lcikpIHsgb25UcmFuc2l0aW9uRW5kKCk7IH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGZvciBvbGQgYnJvd3NlciB3aXRoIG5vbi16ZXJvIGR1cmF0aW9uXG4gICAgICAgICAganNUcmFuc2Zvcm0oY29udGFpbmVyLCB0cmFuc2Zvcm1BdHRyLCB0cmFuc2Zvcm1QcmVmaXgsIHRyYW5zZm9ybVBvc3RmaXgsIGdldENvbnRhaW5lclRyYW5zZm9ybVZhbHVlKCksIHNwZWVkLCBvblRyYW5zaXRpb25FbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFob3Jpem9udGFsKSB7IHVwZGF0ZUNvbnRlbnRXcmFwcGVySGVpZ2h0KCk7IH1cbiAgICAgIH0gOlxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICBzbGlkZUl0ZW1zT3V0ID0gW107XG5cbiAgICAgICAgdmFyIGV2ZSA9IHt9O1xuICAgICAgICBldmVbVFJBTlNJVElPTkVORF0gPSBldmVbQU5JTUFUSU9ORU5EXSA9IG9uVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgcmVtb3ZlRXZlbnRzKHNsaWRlSXRlbXNbaW5kZXhDYWNoZWRdLCBldmUpO1xuICAgICAgICBhZGRFdmVudHMoc2xpZGVJdGVtc1tpbmRleF0sIGV2ZSk7XG5cbiAgICAgICAgYW5pbWF0ZVNsaWRlKGluZGV4Q2FjaGVkLCBhbmltYXRlSW4sIGFuaW1hdGVPdXQsIHRydWUpO1xuICAgICAgICBhbmltYXRlU2xpZGUoaW5kZXgsIGFuaW1hdGVOb3JtYWwsIGFuaW1hdGVJbik7XG5cbiAgICAgICAgLy8gcnVuIGZhbGxiYWNrIGZ1bmN0aW9uIG1hbnVhbGx5IFxuICAgICAgICAvLyB3aGVuIHRyYW5zaXRpb24gb3IgYW5pbWF0aW9uIG5vdCBzdXBwb3J0ZWQgLyBkdXJhdGlvbiBpcyAwXG4gICAgICAgIGlmICghVFJBTlNJVElPTkVORCB8fCAhQU5JTUFUSU9ORU5EIHx8ICFzcGVlZCB8fCAhaXNWaXNpYmxlKGNvbnRhaW5lcikpIHsgb25UcmFuc2l0aW9uRW5kKCk7IH1cbiAgICAgIH07XG4gIH0pKCk7XG5cbiAgZnVuY3Rpb24gcmVuZGVyIChlLCBzbGlkZXJNb3ZlZCkge1xuICAgIGlmICh1cGRhdGVJbmRleEJlZm9yZVRyYW5zZm9ybSkgeyB1cGRhdGVJbmRleCgpOyB9XG5cbiAgICAvLyByZW5kZXIgd2hlbiBzbGlkZXIgd2FzIG1vdmVkICh0b3VjaCBvciBkcmFnKSBldmVuIHRob3VnaCBpbmRleCBtYXkgbm90IGNoYW5nZVxuICAgIGlmIChpbmRleCAhPT0gaW5kZXhDYWNoZWQgfHwgc2xpZGVyTW92ZWQpIHtcbiAgICAgIC8vIGV2ZW50c1xuICAgICAgZXZlbnRzLmVtaXQoJ2luZGV4Q2hhbmdlZCcsIGluZm8oKSk7XG4gICAgICBldmVudHMuZW1pdCgndHJhbnNpdGlvblN0YXJ0JywgaW5mbygpKTtcbiAgICAgIGlmIChhdXRvSGVpZ2h0KSB7IGRvQXV0b0hlaWdodCgpOyB9XG5cbiAgICAgIC8vIHBhdXNlIGF1dG9wbGF5IHdoZW4gY2xpY2sgb3Iga2V5ZG93biBmcm9tIHVzZXJcbiAgICAgIGlmIChhbmltYXRpbmcgJiYgZSAmJiBbJ2NsaWNrJywgJ2tleWRvd24nXS5pbmRleE9mKGUudHlwZSkgPj0gMCkgeyBzdG9wQXV0b3BsYXkoKTsgfVxuXG4gICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgIHRyYW5zZm9ybUNvcmUoKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiBUcmFuc2ZlciBwcmVmaXhlZCBwcm9wZXJ0aWVzIHRvIHRoZSBzYW1lIGZvcm1hdFxuICAgKiBDU1M6IC1XZWJraXQtVHJhbnNmb3JtID0+IHdlYmtpdHRyYW5zZm9ybVxuICAgKiBKUzogV2Via2l0VHJhbnNmb3JtID0+IHdlYmtpdHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gcHJvcGVydHlcbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIHN0clRyYW5zIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLS9nLCAnJyk7XG4gIH1cblxuICAvLyBBRlRFUiBUUkFOU0ZPUk1cbiAgLy8gVGhpbmdzIG5lZWQgdG8gYmUgZG9uZSBhZnRlciBhIHRyYW5zZmVyOlxuICAvLyAxLiBjaGVjayBpbmRleFxuICAvLyAyLiBhZGQgY2xhc3NlcyB0byB2aXNpYmxlIHNsaWRlXG4gIC8vIDMuIGRpc2FibGUgY29udHJvbHMgYnV0dG9ucyB3aGVuIHJlYWNoIHRoZSBmaXJzdC9sYXN0IHNsaWRlIGluIG5vbi1sb29wIHNsaWRlclxuICAvLyA0LiB1cGRhdGUgbmF2IHN0YXR1c1xuICAvLyA1LiBsYXp5bG9hZCBpbWFnZXNcbiAgLy8gNi4gdXBkYXRlIGNvbnRhaW5lciBoZWlnaHRcbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kIChldmVudCkge1xuICAgIC8vIGNoZWNrIHJ1bm5pbmcgb24gZ2FsbGVyeSBtb2RlXG4gICAgLy8gbWFrZSBzdXJlIHRyYW50aW9uZW5kL2FuaW1hdGlvbmVuZCBldmVudHMgcnVuIG9ubHkgb25jZVxuICAgIGlmIChjYXJvdXNlbCB8fCBydW5uaW5nKSB7XG4gICAgICBldmVudHMuZW1pdCgndHJhbnNpdGlvbkVuZCcsIGluZm8oZXZlbnQpKTtcblxuICAgICAgaWYgKCFjYXJvdXNlbCAmJiBzbGlkZUl0ZW1zT3V0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZUl0ZW1zT3V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGl0ZW0gPSBzbGlkZUl0ZW1zT3V0W2ldO1xuICAgICAgICAgIC8vIHNldCBpdGVtIHBvc2l0aW9uc1xuICAgICAgICAgIGl0ZW0uc3R5bGUubGVmdCA9ICcnO1xuXG4gICAgICAgICAgaWYgKEFOSU1BVElPTkRFTEFZICYmIFRSQU5TSVRJT05ERUxBWSkgeyBcbiAgICAgICAgICAgIGl0ZW0uc3R5bGVbQU5JTUFUSU9OREVMQVldID0gJyc7XG4gICAgICAgICAgICBpdGVtLnN0eWxlW1RSQU5TSVRJT05ERUxBWV0gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVtb3ZlQ2xhc3MoaXRlbSwgYW5pbWF0ZU91dCk7XG4gICAgICAgICAgYWRkQ2xhc3MoaXRlbSwgYW5pbWF0ZU5vcm1hbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyogdXBkYXRlIHNsaWRlcywgbmF2LCBjb250cm9scyBhZnRlciBjaGVja2luZyAuLi5cbiAgICAgICAqID0+IGxlZ2FjeSBicm93c2VycyB3aG8gZG9uJ3Qgc3VwcG9ydCAnZXZlbnQnIFxuICAgICAgICogICAgaGF2ZSB0byBjaGVjayBldmVudCBmaXJzdCwgb3RoZXJ3aXNlIGV2ZW50LnRhcmdldCB3aWxsIGNhdXNlIGFuIGVycm9yIFxuICAgICAgICogPT4gb3IgJ2dhbGxlcnknIG1vZGU6IFxuICAgICAgICogICArIGV2ZW50IHRhcmdldCBpcyBzbGlkZSBpdGVtXG4gICAgICAgKiA9PiBvciAnY2Fyb3VzZWwnIG1vZGU6IFxuICAgICAgICogICArIGV2ZW50IHRhcmdldCBpcyBjb250YWluZXIsIFxuICAgICAgICogICArIGV2ZW50LnByb3BlcnR5IGlzIHRoZSBzYW1lIHdpdGggdHJhbnNmb3JtIGF0dHJpYnV0ZVxuICAgICAgICovXG4gICAgICBpZiAoIWV2ZW50IHx8IFxuICAgICAgICAgICFjYXJvdXNlbCAmJiBldmVudC50YXJnZXQucGFyZW50Tm9kZSA9PT0gY29udGFpbmVyIHx8IFxuICAgICAgICAgIGV2ZW50LnRhcmdldCA9PT0gY29udGFpbmVyICYmIHN0clRyYW5zKGV2ZW50LnByb3BlcnR5TmFtZSkgPT09IHN0clRyYW5zKHRyYW5zZm9ybUF0dHIpKSB7XG5cbiAgICAgICAgaWYgKCF1cGRhdGVJbmRleEJlZm9yZVRyYW5zZm9ybSkgeyBcbiAgICAgICAgICB2YXIgaW5kZXhUZW0gPSBpbmRleDtcbiAgICAgICAgICB1cGRhdGVJbmRleCgpO1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gaW5kZXhUZW0pIHsgXG4gICAgICAgICAgICBldmVudHMuZW1pdCgnaW5kZXhDaGFuZ2VkJywgaW5mbygpKTtcblxuICAgICAgICAgICAgZG9Db250YWluZXJUcmFuc2Zvcm1TaWxlbnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gXG5cbiAgICAgICAgaWYgKG5lc3RlZCA9PT0gJ2lubmVyJykgeyBldmVudHMuZW1pdCgnaW5uZXJMb2FkZWQnLCBpbmZvKCkpOyB9XG4gICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgaW5kZXhDYWNoZWQgPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG4gIC8vICMgQUNUSU9OU1xuICBmdW5jdGlvbiBnb1RvICh0YXJnZXRJbmRleCwgZSkge1xuICAgIGlmIChmcmVlemUpIHsgcmV0dXJuOyB9XG5cbiAgICAvLyBwcmV2IHNsaWRlQnlcbiAgICBpZiAodGFyZ2V0SW5kZXggPT09ICdwcmV2Jykge1xuICAgICAgb25Db250cm9sc0NsaWNrKGUsIC0xKTtcblxuICAgIC8vIG5leHQgc2xpZGVCeVxuICAgIH0gZWxzZSBpZiAodGFyZ2V0SW5kZXggPT09ICduZXh0Jykge1xuICAgICAgb25Db250cm9sc0NsaWNrKGUsIDEpO1xuXG4gICAgLy8gZ28gdG8gZXhhY3Qgc2xpZGVcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgaWYgKHByZXZlbnRBY3Rpb25XaGVuUnVubmluZykgeyByZXR1cm47IH0gZWxzZSB7IG9uVHJhbnNpdGlvbkVuZCgpOyB9XG4gICAgICB9XG5cbiAgICAgIHZhciBhYnNJbmRleCA9IGdldEFic0luZGV4KCksIFxuICAgICAgICAgIGluZGV4R2FwID0gMDtcblxuICAgICAgaWYgKHRhcmdldEluZGV4ID09PSAnZmlyc3QnKSB7XG4gICAgICAgIGluZGV4R2FwID0gLSBhYnNJbmRleDtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0SW5kZXggPT09ICdsYXN0Jykge1xuICAgICAgICBpbmRleEdhcCA9IGNhcm91c2VsID8gc2xpZGVDb3VudCAtIGl0ZW1zIC0gYWJzSW5kZXggOiBzbGlkZUNvdW50IC0gMSAtIGFic0luZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRJbmRleCAhPT0gJ251bWJlcicpIHsgdGFyZ2V0SW5kZXggPSBwYXJzZUludCh0YXJnZXRJbmRleCk7IH1cblxuICAgICAgICBpZiAoIWlzTmFOKHRhcmdldEluZGV4KSkge1xuICAgICAgICAgIC8vIGZyb20gZGlyZWN0bHkgY2FsbGVkIGdvVG8gZnVuY3Rpb25cbiAgICAgICAgICBpZiAoIWUpIHsgdGFyZ2V0SW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzbGlkZUNvdW50IC0gMSwgdGFyZ2V0SW5kZXgpKTsgfVxuXG4gICAgICAgICAgaW5kZXhHYXAgPSB0YXJnZXRJbmRleCAtIGFic0luZGV4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGdhbGxlcnk6IG1ha2Ugc3VyZSBuZXcgcGFnZSB3b24ndCBvdmVybGFwIHdpdGggY3VycmVudCBwYWdlXG4gICAgICBpZiAoIWNhcm91c2VsICYmIGluZGV4R2FwICYmIE1hdGguYWJzKGluZGV4R2FwKSA8IGl0ZW1zKSB7XG4gICAgICAgIHZhciBmYWN0b3IgPSBpbmRleEdhcCA+IDAgPyAxIDogLTE7XG4gICAgICAgIGluZGV4R2FwICs9IChpbmRleCArIGluZGV4R2FwIC0gc2xpZGVDb3VudCkgPj0gaW5kZXhNaW4gPyBzbGlkZUNvdW50ICogZmFjdG9yIDogc2xpZGVDb3VudCAqIDIgKiBmYWN0b3IgKiAtMTtcbiAgICAgIH1cblxuICAgICAgaW5kZXggKz0gaW5kZXhHYXA7XG5cbiAgICAgIC8vIG1ha2Ugc3VyZSBpbmRleCBpcyBpbiByYW5nZVxuICAgICAgaWYgKGNhcm91c2VsICYmIGxvb3ApIHtcbiAgICAgICAgaWYgKGluZGV4IDwgaW5kZXhNaW4pIHsgaW5kZXggKz0gc2xpZGVDb3VudDsgfVxuICAgICAgICBpZiAoaW5kZXggPiBpbmRleE1heCkgeyBpbmRleCAtPSBzbGlkZUNvdW50OyB9XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGluZGV4IGlzIGNoYW5nZWQsIHN0YXJ0IHJlbmRlcmluZ1xuICAgICAgaWYgKGdldEFic0luZGV4KGluZGV4KSAhPT0gZ2V0QWJzSW5kZXgoaW5kZXhDYWNoZWQpKSB7XG4gICAgICAgIHJlbmRlcihlKTtcbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gIC8vIG9uIGNvbnRyb2xzIGNsaWNrXG4gIGZ1bmN0aW9uIG9uQ29udHJvbHNDbGljayAoZSwgZGlyKSB7XG4gICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgIGlmIChwcmV2ZW50QWN0aW9uV2hlblJ1bm5pbmcpIHsgcmV0dXJuOyB9IGVsc2UgeyBvblRyYW5zaXRpb25FbmQoKTsgfVxuICAgIH1cbiAgICB2YXIgcGFzc0V2ZW50T2JqZWN0O1xuXG4gICAgaWYgKCFkaXIpIHtcbiAgICAgIGUgPSBnZXRFdmVudChlKTtcbiAgICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoZSk7XG5cbiAgICAgIHdoaWxlICh0YXJnZXQgIT09IGNvbnRyb2xzQ29udGFpbmVyICYmIFtwcmV2QnV0dG9uLCBuZXh0QnV0dG9uXS5pbmRleE9mKHRhcmdldCkgPCAwKSB7IHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlOyB9XG5cbiAgICAgIHZhciB0YXJnZXRJbiA9IFtwcmV2QnV0dG9uLCBuZXh0QnV0dG9uXS5pbmRleE9mKHRhcmdldCk7XG4gICAgICBpZiAodGFyZ2V0SW4gPj0gMCkge1xuICAgICAgICBwYXNzRXZlbnRPYmplY3QgPSB0cnVlO1xuICAgICAgICBkaXIgPSB0YXJnZXRJbiA9PT0gMCA/IC0xIDogMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmV3aW5kKSB7XG4gICAgICBpZiAoaW5kZXggPT09IGluZGV4TWluICYmIGRpciA9PT0gLTEpIHtcbiAgICAgICAgZ29UbygnbGFzdCcsIGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBpbmRleE1heCAmJiBkaXIgPT09IDEpIHtcbiAgICAgICAgZ29UbygnZmlyc3QnLCBlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaXIpIHtcbiAgICAgIGluZGV4ICs9IHNsaWRlQnkgKiBkaXI7XG4gICAgICBpZiAoYXV0b1dpZHRoKSB7IGluZGV4ID0gTWF0aC5mbG9vcihpbmRleCk7IH1cbiAgICAgIC8vIHBhc3MgZSB3aGVuIGNsaWNrIGNvbnRyb2wgYnV0dG9ucyBvciBrZXlkb3duXG4gICAgICByZW5kZXIoKHBhc3NFdmVudE9iamVjdCB8fCAoZSAmJiBlLnR5cGUgPT09ICdrZXlkb3duJykpID8gZSA6IG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIC8vIG9uIG5hdiBjbGlja1xuICBmdW5jdGlvbiBvbk5hdkNsaWNrIChlKSB7XG4gICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgIGlmIChwcmV2ZW50QWN0aW9uV2hlblJ1bm5pbmcpIHsgcmV0dXJuOyB9IGVsc2UgeyBvblRyYW5zaXRpb25FbmQoKTsgfVxuICAgIH1cbiAgICBcbiAgICBlID0gZ2V0RXZlbnQoZSk7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChlKSwgbmF2SW5kZXg7XG5cbiAgICAvLyBmaW5kIHRoZSBjbGlja2VkIG5hdiBpdGVtXG4gICAgd2hpbGUgKHRhcmdldCAhPT0gbmF2Q29udGFpbmVyICYmICFoYXNBdHRyKHRhcmdldCwgJ2RhdGEtbmF2JykpIHsgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7IH1cbiAgICBpZiAoaGFzQXR0cih0YXJnZXQsICdkYXRhLW5hdicpKSB7XG4gICAgICB2YXIgbmF2SW5kZXggPSBuYXZDbGlja2VkID0gTnVtYmVyKGdldEF0dHIodGFyZ2V0LCAnZGF0YS1uYXYnKSksXG4gICAgICAgICAgdGFyZ2V0SW5kZXhCYXNlID0gZml4ZWRXaWR0aCB8fCBhdXRvV2lkdGggPyBuYXZJbmRleCAqIHNsaWRlQ291bnQgLyBwYWdlcyA6IG5hdkluZGV4ICogaXRlbXMsXG4gICAgICAgICAgdGFyZ2V0SW5kZXggPSBuYXZBc1RodW1ibmFpbHMgPyBuYXZJbmRleCA6IE1hdGgubWluKE1hdGguY2VpbCh0YXJnZXRJbmRleEJhc2UpLCBzbGlkZUNvdW50IC0gMSk7XG4gICAgICBnb1RvKHRhcmdldEluZGV4LCBlKTtcblxuICAgICAgaWYgKG5hdkN1cnJlbnRJbmRleCA9PT0gbmF2SW5kZXgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGluZykgeyBzdG9wQXV0b3BsYXkoKTsgfVxuICAgICAgICBuYXZDbGlja2VkID0gLTE7IC8vIHJlc2V0IG5hdkNsaWNrZWRcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBhdXRvcGxheSBmdW5jdGlvbnNcbiAgZnVuY3Rpb24gc2V0QXV0b3BsYXlUaW1lciAoKSB7XG4gICAgYXV0b3BsYXlUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIG9uQ29udHJvbHNDbGljayhudWxsLCBhdXRvcGxheURpcmVjdGlvbik7XG4gICAgfSwgYXV0b3BsYXlUaW1lb3V0KTtcblxuICAgIGFuaW1hdGluZyA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wQXV0b3BsYXlUaW1lciAoKSB7XG4gICAgY2xlYXJJbnRlcnZhbChhdXRvcGxheVRpbWVyKTtcbiAgICBhbmltYXRpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUF1dG9wbGF5QnV0dG9uIChhY3Rpb24sIHR4dCkge1xuICAgIHNldEF0dHJzKGF1dG9wbGF5QnV0dG9uLCB7J2RhdGEtYWN0aW9uJzogYWN0aW9ufSk7XG4gICAgYXV0b3BsYXlCdXR0b24uaW5uZXJIVE1MID0gYXV0b3BsYXlIdG1sU3RyaW5nc1swXSArIGFjdGlvbiArIGF1dG9wbGF5SHRtbFN0cmluZ3NbMV0gKyB0eHQ7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydEF1dG9wbGF5ICgpIHtcbiAgICBzZXRBdXRvcGxheVRpbWVyKCk7XG4gICAgaWYgKGF1dG9wbGF5QnV0dG9uKSB7IHVwZGF0ZUF1dG9wbGF5QnV0dG9uKCdzdG9wJywgYXV0b3BsYXlUZXh0WzFdKTsgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcEF1dG9wbGF5ICgpIHtcbiAgICBzdG9wQXV0b3BsYXlUaW1lcigpO1xuICAgIGlmIChhdXRvcGxheUJ1dHRvbikgeyB1cGRhdGVBdXRvcGxheUJ1dHRvbignc3RhcnQnLCBhdXRvcGxheVRleHRbMF0pOyB9XG4gIH1cblxuICAvLyBwcm9ncmFtYWl0Y2FsbHkgcGxheS9wYXVzZSB0aGUgc2xpZGVyXG4gIGZ1bmN0aW9uIHBsYXkgKCkge1xuICAgIGlmIChhdXRvcGxheSAmJiAhYW5pbWF0aW5nKSB7XG4gICAgICBzdGFydEF1dG9wbGF5KCk7XG4gICAgICBhdXRvcGxheVVzZXJQYXVzZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcGF1c2UgKCkge1xuICAgIGlmIChhbmltYXRpbmcpIHtcbiAgICAgIHN0b3BBdXRvcGxheSgpO1xuICAgICAgYXV0b3BsYXlVc2VyUGF1c2VkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGVBdXRvcGxheSAoKSB7XG4gICAgaWYgKGFuaW1hdGluZykge1xuICAgICAgc3RvcEF1dG9wbGF5KCk7XG4gICAgICBhdXRvcGxheVVzZXJQYXVzZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydEF1dG9wbGF5KCk7XG4gICAgICBhdXRvcGxheVVzZXJQYXVzZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblZpc2liaWxpdHlDaGFuZ2UgKCkge1xuICAgIGlmIChkb2MuaGlkZGVuKSB7XG4gICAgICBpZiAoYW5pbWF0aW5nKSB7XG4gICAgICAgIHN0b3BBdXRvcGxheVRpbWVyKCk7XG4gICAgICAgIGF1dG9wbGF5VmlzaWJpbGl0eVBhdXNlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhdXRvcGxheVZpc2liaWxpdHlQYXVzZWQpIHtcbiAgICAgIHNldEF1dG9wbGF5VGltZXIoKTtcbiAgICAgIGF1dG9wbGF5VmlzaWJpbGl0eVBhdXNlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlb3ZlclBhdXNlICgpIHtcbiAgICBpZiAoYW5pbWF0aW5nKSB7IFxuICAgICAgc3RvcEF1dG9wbGF5VGltZXIoKTtcbiAgICAgIGF1dG9wbGF5SG92ZXJQYXVzZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlb3V0UmVzdGFydCAoKSB7XG4gICAgaWYgKGF1dG9wbGF5SG92ZXJQYXVzZWQpIHsgXG4gICAgICBzZXRBdXRvcGxheVRpbWVyKCk7XG4gICAgICBhdXRvcGxheUhvdmVyUGF1c2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8ga2V5ZG93biBldmVudHMgb24gZG9jdW1lbnQgXG4gIGZ1bmN0aW9uIG9uRG9jdW1lbnRLZXlkb3duIChlKSB7XG4gICAgZSA9IGdldEV2ZW50KGUpO1xuICAgIHZhciBrZXlJbmRleCA9IFtLRVlTLkxFRlQsIEtFWVMuUklHSFRdLmluZGV4T2YoZS5rZXlDb2RlKTtcblxuICAgIGlmIChrZXlJbmRleCA+PSAwKSB7XG4gICAgICBvbkNvbnRyb2xzQ2xpY2soZSwga2V5SW5kZXggPT09IDAgPyAtMSA6IDEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIG9uIGtleSBjb250cm9sXG4gIGZ1bmN0aW9uIG9uQ29udHJvbHNLZXlkb3duIChlKSB7XG4gICAgZSA9IGdldEV2ZW50KGUpO1xuICAgIHZhciBrZXlJbmRleCA9IFtLRVlTLkxFRlQsIEtFWVMuUklHSFRdLmluZGV4T2YoZS5rZXlDb2RlKTtcblxuICAgIGlmIChrZXlJbmRleCA+PSAwKSB7XG4gICAgICBpZiAoa2V5SW5kZXggPT09IDApIHtcbiAgICAgICAgaWYgKCFwcmV2QnV0dG9uLmRpc2FibGVkKSB7IG9uQ29udHJvbHNDbGljayhlLCAtMSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoIW5leHRCdXR0b24uZGlzYWJsZWQpIHtcbiAgICAgICAgb25Db250cm9sc0NsaWNrKGUsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBmb2N1c1xuICBmdW5jdGlvbiBzZXRGb2N1cyAoZWwpIHtcbiAgICBlbC5mb2N1cygpO1xuICB9XG5cbiAgLy8gb24ga2V5IG5hdlxuICBmdW5jdGlvbiBvbk5hdktleWRvd24gKGUpIHtcbiAgICBlID0gZ2V0RXZlbnQoZSk7XG4gICAgdmFyIGN1ckVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoIWhhc0F0dHIoY3VyRWxlbWVudCwgJ2RhdGEtbmF2JykpIHsgcmV0dXJuOyB9XG5cbiAgICAvLyB2YXIgY29kZSA9IGUua2V5Q29kZSxcbiAgICB2YXIga2V5SW5kZXggPSBbS0VZUy5MRUZULCBLRVlTLlJJR0hULCBLRVlTLkVOVEVSLCBLRVlTLlNQQUNFXS5pbmRleE9mKGUua2V5Q29kZSksXG4gICAgICAgIG5hdkluZGV4ID0gTnVtYmVyKGdldEF0dHIoY3VyRWxlbWVudCwgJ2RhdGEtbmF2JykpO1xuXG4gICAgaWYgKGtleUluZGV4ID49IDApIHtcbiAgICAgIGlmIChrZXlJbmRleCA9PT0gMCkge1xuICAgICAgICBpZiAobmF2SW5kZXggPiAwKSB7IHNldEZvY3VzKG5hdkl0ZW1zW25hdkluZGV4IC0gMV0pOyB9XG4gICAgICB9IGVsc2UgaWYgKGtleUluZGV4ID09PSAxKSB7XG4gICAgICAgIGlmIChuYXZJbmRleCA8IHBhZ2VzIC0gMSkgeyBzZXRGb2N1cyhuYXZJdGVtc1tuYXZJbmRleCArIDFdKTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmF2Q2xpY2tlZCA9IG5hdkluZGV4O1xuICAgICAgICBnb1RvKG5hdkluZGV4LCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRFdmVudCAoZSkge1xuICAgIGUgPSBlIHx8IHdpbi5ldmVudDtcbiAgICByZXR1cm4gaXNUb3VjaEV2ZW50KGUpID8gZS5jaGFuZ2VkVG91Y2hlc1swXSA6IGU7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VGFyZ2V0IChlKSB7XG4gICAgcmV0dXJuIGUudGFyZ2V0IHx8IHdpbi5ldmVudC5zcmNFbGVtZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gaXNUb3VjaEV2ZW50IChlKSB7XG4gICAgcmV0dXJuIGUudHlwZS5pbmRleE9mKCd0b3VjaCcpID49IDA7XG4gIH1cblxuICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdEJlaGF2aW9yIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCA/IGUucHJldmVudERlZmF1bHQoKSA6IGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1vdmVEaXJlY3Rpb25FeHBlY3RlZCAoKSB7XG4gICAgcmV0dXJuIGdldFRvdWNoRGlyZWN0aW9uKHRvRGVncmVlKGxhc3RQb3NpdGlvbi55IC0gaW5pdFBvc2l0aW9uLnksIGxhc3RQb3NpdGlvbi54IC0gaW5pdFBvc2l0aW9uLngpLCBzd2lwZUFuZ2xlKSA9PT0gb3B0aW9ucy5heGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gb25QYW5TdGFydCAoZSkge1xuICAgIGlmIChydW5uaW5nKSB7XG4gICAgICBpZiAocHJldmVudEFjdGlvbldoZW5SdW5uaW5nKSB7IHJldHVybjsgfSBlbHNlIHsgb25UcmFuc2l0aW9uRW5kKCk7IH1cbiAgICB9XG5cbiAgICBpZiAoYXV0b3BsYXkgJiYgYW5pbWF0aW5nKSB7IHN0b3BBdXRvcGxheVRpbWVyKCk7IH1cbiAgICBcbiAgICBwYW5TdGFydCA9IHRydWU7XG4gICAgaWYgKHJhZkluZGV4KSB7XG4gICAgICBjYWYocmFmSW5kZXgpO1xuICAgICAgcmFmSW5kZXggPSBudWxsO1xuICAgIH1cblxuICAgIHZhciAkID0gZ2V0RXZlbnQoZSk7XG4gICAgZXZlbnRzLmVtaXQoaXNUb3VjaEV2ZW50KGUpID8gJ3RvdWNoU3RhcnQnIDogJ2RyYWdTdGFydCcsIGluZm8oZSkpO1xuXG4gICAgaWYgKCFpc1RvdWNoRXZlbnQoZSkgJiYgWydpbWcnLCAnYSddLmluZGV4T2YoZ2V0TG93ZXJDYXNlTm9kZU5hbWUoZ2V0VGFyZ2V0KGUpKSkgPj0gMCkge1xuICAgICAgcHJldmVudERlZmF1bHRCZWhhdmlvcihlKTtcbiAgICB9XG5cbiAgICBsYXN0UG9zaXRpb24ueCA9IGluaXRQb3NpdGlvbi54ID0gJC5jbGllbnRYO1xuICAgIGxhc3RQb3NpdGlvbi55ID0gaW5pdFBvc2l0aW9uLnkgPSAkLmNsaWVudFk7XG4gICAgaWYgKGNhcm91c2VsKSB7XG4gICAgICB0cmFuc2xhdGVJbml0ID0gcGFyc2VGbG9hdChjb250YWluZXIuc3R5bGVbdHJhbnNmb3JtQXR0cl0ucmVwbGFjZSh0cmFuc2Zvcm1QcmVmaXgsICcnKSk7XG4gICAgICByZXNldER1cmF0aW9uKGNvbnRhaW5lciwgJzBzJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25QYW5Nb3ZlIChlKSB7XG4gICAgaWYgKHBhblN0YXJ0KSB7XG4gICAgICB2YXIgJCA9IGdldEV2ZW50KGUpO1xuICAgICAgbGFzdFBvc2l0aW9uLnggPSAkLmNsaWVudFg7XG4gICAgICBsYXN0UG9zaXRpb24ueSA9ICQuY2xpZW50WTtcblxuICAgICAgaWYgKGNhcm91c2VsKSB7XG4gICAgICAgIGlmICghcmFmSW5kZXgpIHsgcmFmSW5kZXggPSByYWYoZnVuY3Rpb24oKXsgcGFuVXBkYXRlKGUpOyB9KTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG1vdmVEaXJlY3Rpb25FeHBlY3RlZCA9PT0gJz8nKSB7IG1vdmVEaXJlY3Rpb25FeHBlY3RlZCA9IGdldE1vdmVEaXJlY3Rpb25FeHBlY3RlZCgpOyB9XG4gICAgICAgIGlmIChtb3ZlRGlyZWN0aW9uRXhwZWN0ZWQpIHsgcHJldmVudFNjcm9sbCA9IHRydWU7IH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZlbnRTY3JvbGwpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFuVXBkYXRlIChlKSB7XG4gICAgaWYgKCFtb3ZlRGlyZWN0aW9uRXhwZWN0ZWQpIHtcbiAgICAgIHBhblN0YXJ0ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhZihyYWZJbmRleCk7XG4gICAgaWYgKHBhblN0YXJ0KSB7IHJhZkluZGV4ID0gcmFmKGZ1bmN0aW9uKCl7IHBhblVwZGF0ZShlKTsgfSk7IH1cblxuICAgIGlmIChtb3ZlRGlyZWN0aW9uRXhwZWN0ZWQgPT09ICc/JykgeyBtb3ZlRGlyZWN0aW9uRXhwZWN0ZWQgPSBnZXRNb3ZlRGlyZWN0aW9uRXhwZWN0ZWQoKTsgfVxuICAgIGlmIChtb3ZlRGlyZWN0aW9uRXhwZWN0ZWQpIHtcbiAgICAgIGlmICghcHJldmVudFNjcm9sbCAmJiBpc1RvdWNoRXZlbnQoZSkpIHsgcHJldmVudFNjcm9sbCA9IHRydWU7IH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGUudHlwZSkgeyBldmVudHMuZW1pdChpc1RvdWNoRXZlbnQoZSkgPyAndG91Y2hNb3ZlJyA6ICdkcmFnTW92ZScsIGluZm8oZSkpOyB9XG4gICAgICB9IGNhdGNoKGVycikge31cblxuICAgICAgdmFyIHggPSB0cmFuc2xhdGVJbml0LFxuICAgICAgICAgIGRpc3QgPSBnZXREaXN0KGxhc3RQb3NpdGlvbiwgaW5pdFBvc2l0aW9uKTtcbiAgICAgIGlmICghaG9yaXpvbnRhbCB8fCBmaXhlZFdpZHRoIHx8IGF1dG9XaWR0aCkge1xuICAgICAgICB4ICs9IGRpc3Q7XG4gICAgICAgIHggKz0gJ3B4JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwZXJjZW50YWdlWCA9IFRSQU5TRk9STSA/IGRpc3QgKiBpdGVtcyAqIDEwMCAvICgodmlld3BvcnQgKyBndXR0ZXIpICogc2xpZGVDb3VudE5ldyk6IGRpc3QgKiAxMDAgLyAodmlld3BvcnQgKyBndXR0ZXIpO1xuICAgICAgICB4ICs9IHBlcmNlbnRhZ2VYO1xuICAgICAgICB4ICs9ICclJztcbiAgICAgIH1cblxuICAgICAgY29udGFpbmVyLnN0eWxlW3RyYW5zZm9ybUF0dHJdID0gdHJhbnNmb3JtUHJlZml4ICsgeCArIHRyYW5zZm9ybVBvc3RmaXg7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25QYW5FbmQgKGUpIHtcbiAgICBpZiAocGFuU3RhcnQpIHtcbiAgICAgIGlmIChyYWZJbmRleCkge1xuICAgICAgICBjYWYocmFmSW5kZXgpO1xuICAgICAgICByYWZJbmRleCA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoY2Fyb3VzZWwpIHsgcmVzZXREdXJhdGlvbihjb250YWluZXIsICcnKTsgfVxuICAgICAgcGFuU3RhcnQgPSBmYWxzZTtcblxuICAgICAgdmFyICQgPSBnZXRFdmVudChlKTtcbiAgICAgIGxhc3RQb3NpdGlvbi54ID0gJC5jbGllbnRYO1xuICAgICAgbGFzdFBvc2l0aW9uLnkgPSAkLmNsaWVudFk7XG4gICAgICB2YXIgZGlzdCA9IGdldERpc3QobGFzdFBvc2l0aW9uLCBpbml0UG9zaXRpb24pO1xuXG4gICAgICBpZiAoTWF0aC5hYnMoZGlzdCkpIHtcbiAgICAgICAgLy8gZHJhZyB2cyBjbGlja1xuICAgICAgICBpZiAoIWlzVG91Y2hFdmVudChlKSkge1xuICAgICAgICAgIC8vIHByZXZlbnQgXCJjbGlja1wiXG4gICAgICAgICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChlKTtcbiAgICAgICAgICBhZGRFdmVudHModGFyZ2V0LCB7J2NsaWNrJzogZnVuY3Rpb24gcHJldmVudENsaWNrIChlKSB7XG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdEJlaGF2aW9yKGUpO1xuICAgICAgICAgICAgcmVtb3ZlRXZlbnRzKHRhcmdldCwgeydjbGljayc6IHByZXZlbnRDbGlja30pO1xuICAgICAgICAgIH19KTsgXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2Fyb3VzZWwpIHtcbiAgICAgICAgICByYWZJbmRleCA9IHJhZihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChob3Jpem9udGFsICYmICFhdXRvV2lkdGgpIHtcbiAgICAgICAgICAgICAgdmFyIGluZGV4TW92ZWQgPSAtIGRpc3QgKiBpdGVtcyAvICh2aWV3cG9ydCArIGd1dHRlcik7XG4gICAgICAgICAgICAgIGluZGV4TW92ZWQgPSBkaXN0ID4gMCA/IE1hdGguZmxvb3IoaW5kZXhNb3ZlZCkgOiBNYXRoLmNlaWwoaW5kZXhNb3ZlZCk7XG4gICAgICAgICAgICAgIGluZGV4ICs9IGluZGV4TW92ZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgbW92ZWQgPSAtICh0cmFuc2xhdGVJbml0ICsgZGlzdCk7XG4gICAgICAgICAgICAgIGlmIChtb3ZlZCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleE1pbjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb3ZlZCA+PSBzbGlkZVBvc2l0aW9uc1tzbGlkZUNvdW50TmV3IC0gMV0pIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGluZGV4TWF4O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IHNsaWRlQ291bnROZXcgJiYgbW92ZWQgPj0gc2xpZGVQb3NpdGlvbnNbaV0pIHtcbiAgICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgIGlmIChtb3ZlZCA+IHNsaWRlUG9zaXRpb25zW2ldICYmIGRpc3QgPCAwKSB7IGluZGV4ICs9IDE7IH1cbiAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVuZGVyKGUsIGRpc3QpO1xuICAgICAgICAgICAgZXZlbnRzLmVtaXQoaXNUb3VjaEV2ZW50KGUpID8gJ3RvdWNoRW5kJyA6ICdkcmFnRW5kJywgaW5mbyhlKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG1vdmVEaXJlY3Rpb25FeHBlY3RlZCkge1xuICAgICAgICAgICAgb25Db250cm9sc0NsaWNrKGUsIGRpc3QgPiAwID8gLTEgOiAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyByZXNldFxuICAgIGlmIChvcHRpb25zLnByZXZlbnRTY3JvbGxPblRvdWNoID09PSAnYXV0bycpIHsgcHJldmVudFNjcm9sbCA9IGZhbHNlOyB9XG4gICAgaWYgKHN3aXBlQW5nbGUpIHsgbW92ZURpcmVjdGlvbkV4cGVjdGVkID0gJz8nOyB9IFxuICAgIGlmIChhdXRvcGxheSAmJiAhYW5pbWF0aW5nKSB7IHNldEF1dG9wbGF5VGltZXIoKTsgfVxuICB9XG5cbiAgLy8gPT09IFJFU0laRSBGVU5DVElPTlMgPT09IC8vXG4gIC8vIChzbGlkZVBvc2l0aW9ucywgaW5kZXgsIGl0ZW1zKSA9PiB2ZXJ0aWNhbF9jb25lbnRXcmFwcGVyLmhlaWdodFxuICBmdW5jdGlvbiB1cGRhdGVDb250ZW50V3JhcHBlckhlaWdodCAoKSB7XG4gICAgdmFyIHdwID0gbWlkZGxlV3JhcHBlciA/IG1pZGRsZVdyYXBwZXIgOiBpbm5lcldyYXBwZXI7XG4gICAgd3Auc3R5bGUuaGVpZ2h0ID0gc2xpZGVQb3NpdGlvbnNbaW5kZXggKyBpdGVtc10gLSBzbGlkZVBvc2l0aW9uc1tpbmRleF0gKyAncHgnO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UGFnZXMgKCkge1xuICAgIHZhciByb3VnaCA9IGZpeGVkV2lkdGggPyAoZml4ZWRXaWR0aCArIGd1dHRlcikgKiBzbGlkZUNvdW50IC8gdmlld3BvcnQgOiBzbGlkZUNvdW50IC8gaXRlbXM7XG4gICAgcmV0dXJuIE1hdGgubWluKE1hdGguY2VpbChyb3VnaCksIHNsaWRlQ291bnQpO1xuICB9XG5cbiAgLypcbiAgICogMS4gdXBkYXRlIHZpc2libGUgbmF2IGl0ZW1zIGxpc3RcbiAgICogMi4gYWRkIFwiaGlkZGVuXCIgYXR0cmlidXRlcyB0byBwcmV2aW91cyB2aXNpYmxlIG5hdiBpdGVtc1xuICAgKiAzLiByZW1vdmUgXCJoaWRkZW5cIiBhdHRydWJ1dGVzIHRvIG5ldyB2aXNpYmxlIG5hdiBpdGVtc1xuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlTmF2VmlzaWJpbGl0eSAoKSB7XG4gICAgaWYgKCFuYXYgfHwgbmF2QXNUaHVtYm5haWxzKSB7IHJldHVybjsgfVxuXG4gICAgaWYgKHBhZ2VzICE9PSBwYWdlc0NhY2hlZCkge1xuICAgICAgdmFyIG1pbiA9IHBhZ2VzQ2FjaGVkLFxuICAgICAgICAgIG1heCA9IHBhZ2VzLFxuICAgICAgICAgIGZuID0gc2hvd0VsZW1lbnQ7XG5cbiAgICAgIGlmIChwYWdlc0NhY2hlZCA+IHBhZ2VzKSB7XG4gICAgICAgIG1pbiA9IHBhZ2VzO1xuICAgICAgICBtYXggPSBwYWdlc0NhY2hlZDtcbiAgICAgICAgZm4gPSBoaWRlRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKG1pbiA8IG1heCkge1xuICAgICAgICBmbihuYXZJdGVtc1ttaW5dKTtcbiAgICAgICAgbWluKys7XG4gICAgICB9XG5cbiAgICAgIC8vIGNhY2hlIHBhZ2VzXG4gICAgICBwYWdlc0NhY2hlZCA9IHBhZ2VzO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluZm8gKGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBzbGlkZUl0ZW1zOiBzbGlkZUl0ZW1zLFxuICAgICAgbmF2Q29udGFpbmVyOiBuYXZDb250YWluZXIsXG4gICAgICBuYXZJdGVtczogbmF2SXRlbXMsXG4gICAgICBjb250cm9sc0NvbnRhaW5lcjogY29udHJvbHNDb250YWluZXIsXG4gICAgICBoYXNDb250cm9sczogaGFzQ29udHJvbHMsXG4gICAgICBwcmV2QnV0dG9uOiBwcmV2QnV0dG9uLFxuICAgICAgbmV4dEJ1dHRvbjogbmV4dEJ1dHRvbixcbiAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgIHNsaWRlQnk6IHNsaWRlQnksXG4gICAgICBjbG9uZUNvdW50OiBjbG9uZUNvdW50LFxuICAgICAgc2xpZGVDb3VudDogc2xpZGVDb3VudCxcbiAgICAgIHNsaWRlQ291bnROZXc6IHNsaWRlQ291bnROZXcsXG4gICAgICBpbmRleDogaW5kZXgsXG4gICAgICBpbmRleENhY2hlZDogaW5kZXhDYWNoZWQsXG4gICAgICBkaXNwbGF5SW5kZXg6IGdldEN1cnJlbnRTbGlkZSgpLFxuICAgICAgbmF2Q3VycmVudEluZGV4OiBuYXZDdXJyZW50SW5kZXgsXG4gICAgICBuYXZDdXJyZW50SW5kZXhDYWNoZWQ6IG5hdkN1cnJlbnRJbmRleENhY2hlZCxcbiAgICAgIHBhZ2VzOiBwYWdlcyxcbiAgICAgIHBhZ2VzQ2FjaGVkOiBwYWdlc0NhY2hlZCxcbiAgICAgIHNoZWV0OiBzaGVldCxcbiAgICAgIGlzT246IGlzT24sXG4gICAgICBldmVudDogZSB8fCB7fSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB2ZXJzaW9uOiAnMi45LjInLFxuICAgIGdldEluZm86IGluZm8sXG4gICAgZXZlbnRzOiBldmVudHMsXG4gICAgZ29UbzogZ29UbyxcbiAgICBwbGF5OiBwbGF5LFxuICAgIHBhdXNlOiBwYXVzZSxcbiAgICBpc09uOiBpc09uLFxuICAgIHVwZGF0ZVNsaWRlckhlaWdodDogdXBkYXRlSW5uZXJXcmFwcGVySGVpZ2h0LFxuICAgIHJlZnJlc2g6IGluaXRTbGlkZXJUcmFuc2Zvcm0sXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICByZWJ1aWxkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0bnMoZXh0ZW5kKG9wdGlvbnMsIG9wdGlvbnNFbGVtZW50cykpO1xuICAgIH1cbiAgfTtcbn07XG4iLCIvLyBnZXQgY3NzLWNhbGMgXG4vLyBAcmV0dXJuIC0gZmFsc2UgfCBjYWxjIHwgLXdlYmtpdC1jYWxjIHwgLW1vei1jYWxjXG4vLyBAdXNhZ2UgLSB2YXIgY2FsYyA9IGdldENhbGMoKTsgXG5pbXBvcnQgeyBnZXRCb2R5IH0gZnJvbSAnLi9nZXRCb2R5LmpzJztcbmltcG9ydCB7IHNldEZha2VCb2R5IH0gZnJvbSAnLi9zZXRGYWtlQm9keS5qcyc7XG5pbXBvcnQgeyByZXNldEZha2VCb2R5IH0gZnJvbSAnLi9yZXNldEZha2VCb2R5LmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGMoKSB7XG4gIHZhciBkb2MgPSBkb2N1bWVudCwgXG4gICAgICBib2R5ID0gZ2V0Qm9keSgpLFxuICAgICAgZG9jT3ZlcmZsb3cgPSBzZXRGYWtlQm9keShib2R5KSxcbiAgICAgIGRpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKSwgXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICBib2R5LmFwcGVuZENoaWxkKGRpdik7XG4gIHRyeSB7XG4gICAgdmFyIHN0ciA9ICcoMTBweCAqIDEwKScsXG4gICAgICAgIHZhbHMgPSBbJ2NhbGMnICsgc3RyLCAnLW1vei1jYWxjJyArIHN0ciwgJy13ZWJraXQtY2FsYycgKyBzdHJdLFxuICAgICAgICB2YWw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgIHZhbCA9IHZhbHNbaV07XG4gICAgICBkaXYuc3R5bGUud2lkdGggPSB2YWw7XG4gICAgICBpZiAoZGl2Lm9mZnNldFdpZHRoID09PSAxMDApIHsgXG4gICAgICAgIHJlc3VsdCA9IHZhbC5yZXBsYWNlKHN0ciwgJycpOyBcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuICBcbiAgYm9keS5mYWtlID8gcmVzZXRGYWtlQm9keShib2R5LCBkb2NPdmVyZmxvdykgOiBkaXYucmVtb3ZlKCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCIvLyBnZXQgc3VicGl4ZWwgc3VwcG9ydCB2YWx1ZVxuLy8gQHJldHVybiAtIGJvb2xlYW5cbmltcG9ydCB7IGdldEJvZHkgfSBmcm9tICcuL2dldEJvZHkuanMnO1xuaW1wb3J0IHsgc2V0RmFrZUJvZHkgfSBmcm9tICcuL3NldEZha2VCb2R5LmpzJztcbmltcG9ydCB7IHJlc2V0RmFrZUJvZHkgfSBmcm9tICcuL3Jlc2V0RmFrZUJvZHkuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gcGVyY2VudGFnZUxheW91dCgpIHtcbiAgLy8gY2hlY2sgc3VicGl4ZWwgbGF5b3V0IHN1cHBvcnRpbmdcbiAgdmFyIGRvYyA9IGRvY3VtZW50LFxuICAgICAgYm9keSA9IGdldEJvZHkoKSxcbiAgICAgIGRvY092ZXJmbG93ID0gc2V0RmFrZUJvZHkoYm9keSksXG4gICAgICB3cmFwcGVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgb3V0ZXIgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICBzdHIgPSAnJyxcbiAgICAgIGNvdW50ID0gNzAsXG4gICAgICBwZXJQYWdlID0gMyxcbiAgICAgIHN1cHBvcnRlZCA9IGZhbHNlO1xuXG4gIHdyYXBwZXIuY2xhc3NOYW1lID0gXCJ0bnMtdC1zdWJwMlwiO1xuICBvdXRlci5jbGFzc05hbWUgPSBcInRucy10LWN0XCI7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgc3RyICs9ICc8ZGl2PjwvZGl2Pic7XG4gIH1cblxuICBvdXRlci5pbm5lckhUTUwgPSBzdHI7XG4gIHdyYXBwZXIuYXBwZW5kQ2hpbGQob3V0ZXIpO1xuICBib2R5LmFwcGVuZENoaWxkKHdyYXBwZXIpO1xuXG4gIHN1cHBvcnRlZCA9IE1hdGguYWJzKHdyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtIG91dGVyLmNoaWxkcmVuW2NvdW50IC0gcGVyUGFnZV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgPCAyO1xuXG4gIGJvZHkuZmFrZSA/IHJlc2V0RmFrZUJvZHkoYm9keSwgZG9jT3ZlcmZsb3cpIDogd3JhcHBlci5yZW1vdmUoKTtcblxuICByZXR1cm4gc3VwcG9ydGVkO1xufSIsImltcG9ydCB7IGdldEJvZHkgfSBmcm9tICcuL2dldEJvZHkuanMnO1xuaW1wb3J0IHsgc2V0RmFrZUJvZHkgfSBmcm9tICcuL3NldEZha2VCb2R5LmpzJztcbmltcG9ydCB7IHJlc2V0RmFrZUJvZHkgfSBmcm9tICcuL3Jlc2V0RmFrZUJvZHkuanMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWVkaWFxdWVyeVN1cHBvcnQgKCkge1xuICB2YXIgZG9jID0gZG9jdW1lbnQsXG4gICAgICBib2R5ID0gZ2V0Qm9keSgpLFxuICAgICAgZG9jT3ZlcmZsb3cgPSBzZXRGYWtlQm9keShib2R5KSxcbiAgICAgIGRpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgIHN0eWxlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyksXG4gICAgICBydWxlID0gJ0BtZWRpYSBhbGwgYW5kIChtaW4td2lkdGg6MXB4KXsudG5zLW1xLXRlc3R7cG9zaXRpb246YWJzb2x1dGV9fScsXG4gICAgICBwb3NpdGlvbjtcblxuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgZGl2LmNsYXNzTmFtZSA9ICd0bnMtbXEtdGVzdCc7XG5cbiAgYm9keS5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIGJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJ1bGU7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jLmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgfVxuXG4gIHBvc2l0aW9uID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkaXYpLnBvc2l0aW9uIDogZGl2LmN1cnJlbnRTdHlsZVsncG9zaXRpb24nXTtcblxuICBib2R5LmZha2UgPyByZXNldEZha2VCb2R5KGJvZHksIGRvY092ZXJmbG93KSA6IGRpdi5yZW1vdmUoKTtcblxuICByZXR1cm4gcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIjtcbn0iLCJpbXBvcnQgeyBnZXRCb2R5IH0gZnJvbSAnLi9nZXRCb2R5LmpzJztcbmltcG9ydCB7IHNldEZha2VCb2R5IH0gZnJvbSAnLi9zZXRGYWtlQm9keS5qcyc7XG5pbXBvcnQgeyByZXNldEZha2VCb2R5IH0gZnJvbSAnLi9yZXNldEZha2VCb2R5LmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGhhczNEVHJhbnNmb3Jtcyh0Zil7XG4gIGlmICghdGYpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGlmICghd2luZG93LmdldENvbXB1dGVkU3R5bGUpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIFxuICB2YXIgZG9jID0gZG9jdW1lbnQsXG4gICAgICBib2R5ID0gZ2V0Qm9keSgpLFxuICAgICAgZG9jT3ZlcmZsb3cgPSBzZXRGYWtlQm9keShib2R5KSxcbiAgICAgIGVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3AnKSxcbiAgICAgIGhhczNkLFxuICAgICAgY3NzVEYgPSB0Zi5sZW5ndGggPiA5ID8gJy0nICsgdGYuc2xpY2UoMCwgLTkpLnRvTG93ZXJDYXNlKCkgKyAnLScgOiAnJztcblxuICBjc3NURiArPSAndHJhbnNmb3JtJztcblxuICAvLyBBZGQgaXQgdG8gdGhlIGJvZHkgdG8gZ2V0IHRoZSBjb21wdXRlZCBzdHlsZVxuICBib2R5Lmluc2VydEJlZm9yZShlbCwgbnVsbCk7XG5cbiAgZWwuc3R5bGVbdGZdID0gJ3RyYW5zbGF0ZTNkKDFweCwxcHgsMXB4KSc7XG4gIGhhczNkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUoY3NzVEYpO1xuXG4gIGJvZHkuZmFrZSA/IHJlc2V0RmFrZUJvZHkoYm9keSwgZG9jT3ZlcmZsb3cpIDogZWwucmVtb3ZlKCk7XG5cbiAgcmV0dXJuIChoYXMzZCAhPT0gdW5kZWZpbmVkICYmIGhhczNkLmxlbmd0aCA+IDAgJiYgaGFzM2QgIT09IFwibm9uZVwiKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRTbGlkZUlkKCkge1xuICB2YXIgaWQgPSB3aW5kb3cudG5zSWQ7XG4gIHdpbmRvdy50bnNJZCA9ICFpZCA/IDEgOiBpZCArIDE7XG4gIFxuICByZXR1cm4gJ3RucycgKyB3aW5kb3cudG5zSWQ7XG59IiwiLy8gY3JlYXRlIGFuZCBhcHBlbmQgc3R5bGUgc2hlZXRcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHlsZVNoZWV0IChtZWRpYSkge1xuICAvLyBDcmVhdGUgdGhlIDxzdHlsZT4gdGFnXG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgLy8gc3R5bGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHQvY3NzXCIpO1xuXG4gIC8vIEFkZCBhIG1lZGlhIChhbmQvb3IgbWVkaWEgcXVlcnkpIGhlcmUgaWYgeW91J2QgbGlrZSFcbiAgLy8gc3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgXCJzY3JlZW5cIilcbiAgLy8gc3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgXCJvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aCA6IDEwMjRweClcIilcbiAgaWYgKG1lZGlhKSB7IHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKTsgfVxuXG4gIC8vIFdlYktpdCBoYWNrIDooXG4gIC8vIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpKTtcblxuICAvLyBBZGQgdGhlIDxzdHlsZT4gZWxlbWVudCB0byB0aGUgcGFnZVxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJykuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXG4gIHJldHVybiBzdHlsZS5zaGVldCA/IHN0eWxlLnNoZWV0IDogc3R5bGUuc3R5bGVTaGVldDtcbn07IiwiZXhwb3J0IGZ1bmN0aW9uIGpzVHJhbnNmb3JtKGVsZW1lbnQsIGF0dHIsIHByZWZpeCwgcG9zdGZpeCwgdG8sIGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICB2YXIgdGljayA9IE1hdGgubWluKGR1cmF0aW9uLCAxMCksXG4gICAgICB1bml0ID0gKHRvLmluZGV4T2YoJyUnKSA+PSAwKSA/ICclJyA6ICdweCcsXG4gICAgICB0byA9IHRvLnJlcGxhY2UodW5pdCwgJycpLFxuICAgICAgZnJvbSA9IE51bWJlcihlbGVtZW50LnN0eWxlW2F0dHJdLnJlcGxhY2UocHJlZml4LCAnJykucmVwbGFjZShwb3N0Zml4LCAnJykucmVwbGFjZSh1bml0LCAnJykpLFxuICAgICAgcG9zaXRpb25UaWNrID0gKHRvIC0gZnJvbSkgLyBkdXJhdGlvbiAqIHRpY2ssXG4gICAgICBydW5uaW5nO1xuXG4gIHNldFRpbWVvdXQobW92ZUVsZW1lbnQsIHRpY2spO1xuICBmdW5jdGlvbiBtb3ZlRWxlbWVudCgpIHtcbiAgICBkdXJhdGlvbiAtPSB0aWNrO1xuICAgIGZyb20gKz0gcG9zaXRpb25UaWNrO1xuICAgIGVsZW1lbnQuc3R5bGVbYXR0cl0gPSBwcmVmaXggKyBmcm9tICsgdW5pdCArIHBvc3RmaXg7XG4gICAgaWYgKGR1cmF0aW9uID4gMCkgeyBcbiAgICAgIHNldFRpbWVvdXQobW92ZUVsZW1lbnQsIHRpY2spOyBcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH1cbn0iLCIvLyBjcm9zcyBicm93c2VycyBhZGRSdWxlIG1ldGhvZFxuaW1wb3J0IHsgcmFmIH0gZnJvbSAnLi9yYWYuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUNTU1J1bGUoc2hlZXQsIGluZGV4KSB7XG4gIC8vIHJldHVybiByYWYoZnVuY3Rpb24oKSB7XG4gICAgJ2RlbGV0ZVJ1bGUnIGluIHNoZWV0ID9cbiAgICAgIHNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpIDpcbiAgICAgIHNoZWV0LnJlbW92ZVJ1bGUoaW5kZXgpO1xuICAvLyB9KTtcbn0iLCJleHBvcnQgZnVuY3Rpb24gdG9EZWdyZWUgKHksIHgpIHtcbiAgcmV0dXJuIE1hdGguYXRhbjIoeSwgeCkgKiAoMTgwIC8gTWF0aC5QSSk7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGdldFRvdWNoRGlyZWN0aW9uKGFuZ2xlLCByYW5nZSkge1xuICB2YXIgZGlyZWN0aW9uID0gZmFsc2UsXG4gICAgICBnYXAgPSBNYXRoLmFicyg5MCAtIE1hdGguYWJzKGFuZ2xlKSk7XG4gICAgICBcbiAgaWYgKGdhcCA+PSA5MCAtIHJhbmdlKSB7XG4gICAgZGlyZWN0aW9uID0gJ2hvcml6b250YWwnO1xuICB9IGVsc2UgaWYgKGdhcCA8PSByYW5nZSkge1xuICAgIGRpcmVjdGlvbiA9ICd2ZXJ0aWNhbCc7XG4gIH1cblxuICByZXR1cm4gZGlyZWN0aW9uO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyB0bnMgfSBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Rpbnktc2xpZGVyL3NyYy90aW55LXNsaWRlclwiO1xuXG5leHBvcnQgdmFyIHNsaWRlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gIHRoaXMucm9vdCA9IGVsZW1lbnQ7XG5cbiAgLy8gYWRkIG9wdGlvbnMgdG8gYWxsb3cgc2xpZGVyIGZpbmUgY29udHJvbFxuICB0aGlzLm9wdGlvbnMgPSB0aGlzLmV4dGVuZE9iamVjdChcbiAgICB7XG4gICAgICBndXR0ZXI6IDEwLFxuICAgICAgZWRnZVBhZGRpbmc6IDEwLFxuICAgICAgY29udGFpbmVyQ2xhc3M6IFwiLmJlb24tc2xpZGVyX19zbGlkZXNcIixcbiAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgIGF1dG9wbGF5VGltZW91dDogMzAwMCxcbiAgICAgIHJlc3BvbnNpdmU6IHtcbiAgICAgICAgMToge1xuICAgICAgICAgIGl0ZW1zOiAyLFxuICAgICAgICB9LFxuICAgICAgICA3Njc6IHtcbiAgICAgICAgICBpdGVtczogNCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBvcHRpb25zIHx8IHt9XG4gICk7XG5cbiAgdGhpcy5zZXR1cCA9IHtcbiAgICBjb250YWluZXI6IGVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpLFxuICAgIG1vZGU6IFwiY2Fyb3VzZWxcIixcbiAgICBheGlzOiBcImhvcml6b250YWxcIixcbiAgICBndXR0ZXI6IHRoaXMub3B0aW9ucy5ndXR0ZXIsXG4gICAgZWRnZVBhZGRpbmc6IHRoaXMub3B0aW9ucy5lZGdlUGFkZGluZyxcbiAgICBpdGVtczogMyxcbiAgICBzbGlkZUJ5OiBcInBhZ2VcIixcbiAgICBtb3VzZURyYWc6IHRydWUsXG4gICAgc3dpcGVBbmdsZTogZmFsc2UsXG4gICAgc3BlZWQ6IDQwMCxcbiAgICBjb250cm9sczogdHJ1ZSxcbiAgICBjb250cm9sc1Bvc2l0aW9uOiBcImJvdHRvbVwiLFxuICAgIG5hdjogdHJ1ZSxcbiAgICBuYXZQb3NpdGlvbjogXCJib3R0b21cIixcbiAgICByZXdpbmQ6IGZhbHNlLFxuICAgIGxvb3A6IGZhbHNlLFxuICAgIHByZXZlbnRBY3Rpb25XaGVuUnVubmluZzogZmFsc2UsXG4gICAgcHJldmVudFNjcm9sbE9uVG91Y2g6IGZhbHNlLFxuICAgIHJlc3BvbnNpdmU6IHRoaXMub3B0aW9ucy5yZXNwb25zaXZlLFxuICAgIGF1dG9wbGF5OiB0aGlzLm9wdGlvbnMuYXV0b3BsYXksXG4gICAgYXV0b3BsYXlUaW1lb3V0OiB0aGlzLm9wdGlvbnMuYXV0b3BsYXlUaW1lb3V0LFxuICAgIGF1dG9wbGF5SG92ZXJQYXVzZTogdHJ1ZSxcbiAgICBhdXRvcGxheVJlc2V0T25WaXNpYmlsaXR5OiB0cnVlLFxuICAgIGxhenlsb2FkOiB0cnVlLFxuICAgIGxhenlsb2FkU2VsZWN0b3I6IFwiLmJuLWxhenlcIixcbiAgfTtcblxuICB0aGlzLmluaXQoKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbnNsaWRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCEvc2xpZGVyLWluaXRpYWxpemVkL2kudGVzdCh0aGlzLnJvb3QuY2xhc3NOYW1lKSkge1xuICAgIHRoaXMuZ2V0Q29uZmlnRnJvbUVsZW1lbnQoKTtcbiAgICB0aGlzLmFwcGx5U2xpZGVyKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBgYWxyZWFkeSBpbml0aWFsaXplZCBzbGlkZXIgYXQgJHt0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKFwiaWRcIil9YFxuICAgICk7XG4gIH1cbn07XG5cbnNsaWRlci5wcm90b3R5cGUuZ2V0Q29uZmlnRnJvbUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBkYXRhLCBlbGVtZW50Q29uZmlnO1xuXG4gIGRhdGEgPSB0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb25maWdcIik7XG5cbiAgLy8ge3ZpZXdwb3J0czoge1wiMFwiOiB7aToxLHM6MX0sIFwiNjAwXCI6e2k6MixzOjJ9fV19XG5cbiAgaWYgKCFkYXRhKSB7XG4gICAgZGF0YSA9IFwie31cIjtcbiAgfVxuXG4gIHRyeSB7XG4gICAgZWxlbWVudENvbmZpZyA9IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgICBpZiAoZWxlbWVudENvbmZpZy52aWV3cG9ydHMpIHtcbiAgICAgIHZhciB2aWV3cG9ydHMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSBpbiBlbGVtZW50Q29uZmlnLnZpZXdwb3J0cykge1xuICAgICAgICB2aWV3cG9ydHNbaV0gPSB7XG4gICAgICAgICAgaXRlbXM6IGVsZW1lbnRDb25maWcudmlld3BvcnRzW2ldLmkgfHwgMSxcbiAgICAgICAgICBzY3JvbGxCeTogZWxlbWVudENvbmZpZy52aWV3cG9ydHNbaV0ucyB8fCAxLFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChlbGVtZW50Q29uZmlnLnZpZXdwb3J0c1tpXS5iICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgdmlld3BvcnRzW2ldLmd1dHRlciA9IGVsZW1lbnRDb25maWcudmlld3BvcnRzW2ldLmI7XG4gICAgICAgICAgdmlld3BvcnRzW2ldLmVkZ2VQYWRkaW5nID0gZWxlbWVudENvbmZpZy52aWV3cG9ydHNbaV0uYjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNldHVwLnJlc3BvbnNpdmUgPSB2aWV3cG9ydHM7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnRDb25maWcuaGFzT3duUHJvcGVydHkoXCJkb3RzXCIpKSB7XG4gICAgICB0aGlzLnNldHVwLm5hdiA9IGVsZW1lbnRDb25maWcuZG90cztcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudENvbmZpZy5oYXNPd25Qcm9wZXJ0eShcImF1dG9wbGF5XCIpKSB7XG4gICAgICB0aGlzLnNldHVwLmF1dG9wbGF5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuc2V0dXAuYXV0b3BsYXlUaW1lb3V0ID0gZWxlbWVudENvbmZpZy5hdXRvcGxheSAqIDEwMDA7XG4gICAgICB0aGlzLnNldHVwLmxvb3AgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50Q29uZmlnLmhhc093blByb3BlcnR5KFwicmV3aW5kXCIpKSB7XG4gICAgICB0aGlzLnNldHVwLnJld2luZCA9IHRydWU7XG4gICAgICB0aGlzLnNldHVwLmxvb3AgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudENvbmZpZy5oYXNPd25Qcm9wZXJ0eShcImxvb3BcIikpIHtcbiAgICAgIHRoaXMuc2V0dXAucmV3aW5kID0gZmFsc2U7XG4gICAgICB0aGlzLnNldHVwLmxvb3AgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50Q29uZmlnLmhhc093blByb3BlcnR5KFwiY2VudGVyXCIpKSB7XG4gICAgICB0aGlzLnNldHVwLmNlbnRlciA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnRDb25maWcuaGFzT3duUHJvcGVydHkoXCJheGlzXCIpKSB7XG4gICAgICB0aGlzLnNldHVwLmF4aXMgPSBlbGVtZW50Q29uZmlnLmF4aXM7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnRDb25maWcuaGFzT3duUHJvcGVydHkoXCJwcmV2ZW50U2Nyb2xsT25Ub3VjaFwiKSkge1xuICAgICAgdGhpcy5zZXR1cC5wcmV2ZW50U2Nyb2xsT25Ub3VjaCA9IGVsZW1lbnRDb25maWcucHJldmVudFNjcm9sbE9uVG91Y2g7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYm4tbGF6eSBpbWFnZVxuICAgIC8vIHByZXZlbnQgbm9uLWxhenkgZW5hYmxlZCBzbGlkZXJzIHRvIGJyZWFrIGltYWdlc1xuICAgIHZhciBibkxhenkgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihcImltZy5ibi1sYXp5XCIpO1xuICAgIGlmICghYm5MYXp5KSB7XG4gICAgICB0aGlzLnNldHVwLmxhenlsb2FkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2codGhpcy5zZXR1cCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLnNldHVwO1xufTtcblxuc2xpZGVyLnByb3RvdHlwZS5hcHBseVNsaWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yb290LmNsYXNzTmFtZSA9IHRoaXMucm9vdC5jbGFzc05hbWUgKyBcIiBzbGlkZXItaW5pdGlhbGl6ZWRcIjtcbiAgdGhpcy5zbGlkZXIgPSB0bnModGhpcy5zZXR1cCk7XG5cbiAgdGhpcy5iaW5kQnJlYWtwb2ludEV2ZW50cygpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuc2xpZGVyLnByb3RvdHlwZS5iaW5kQnJlYWtwb2ludEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gdXBkYXRlIGNvbHVtbiBjb3VudCBvbiBldmVyeSBicmVha3BvaW50IGNoYW5nZVxuICB0aGlzLnNsaWRlci5ldmVudHMub24oXCJuZXdCcmVha3BvaW50RW5kXCIsIHRoaXMudXBkYXRlQ29sdW1uc0NvdW50LmJpbmQodGhpcykpO1xuXG4gIC8vIHVwZGF0ZSBvbiBpbml0aWFsaXphdGlvblxuICB0aGlzLnVwZGF0ZUNvbHVtbnNDb3VudCgpO1xufTtcblxuc2xpZGVyLnByb3RvdHlwZS51cGRhdGVDb2x1bW5zQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpbmZvID0gdGhpcy5zbGlkZXIuZ2V0SW5mbygpO1xuICB2YXIgY3VycmVudEl0ZW1zQ291bnQgPSBpbmZvLml0ZW1zO1xuXG4gIHRoaXMucm9vdC5jbGFzc05hbWUgPSB0aGlzLnJvb3QuY2xhc3NOYW1lLnJlcGxhY2UoL2JuLWNvbHVtbnMtLVswLTldKy9pLCBcIlwiKTtcbiAgdGhpcy5yb290LmNsYXNzTmFtZSArPSBcIiBibi1jb2x1bW5zLS1cIiArIGN1cnJlbnRJdGVtc0NvdW50O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gdXRpbHNcbnNsaWRlci5wcm90b3R5cGUuZXh0ZW5kT2JqZWN0ID0gZnVuY3Rpb24gKG8xLCBvMikge1xuICBpZiAod2luZG93Lk9iamVjdCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG8xLCBvMik7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gbzEpIHtcbiAgICBpZiAobzIuaGFzT3duUHJvcGVydHkoa2V5KSkgbzFba2V5XSA9IG8yW2tleV07XG4gIH1cblxuICByZXR1cm4gbzE7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIHZhciBzbGlkZXIgPSByZXF1aXJlKFwiLi9zbGlkZXJcIik7XG5pbXBvcnQgeyBzbGlkZXIgfSBmcm9tIFwiLi90bnNcIjtcblxudmFyIFNsaWRlckluaXRpYWxpemVyID0gZnVuY3Rpb24gKCkge1xuICAvLyBjb25zb2xlLmxvZyhgU2xpZGVySW5pdGlhbGl6ZXIgaW5pdGlhbGl6ZWQgYXQgJHtEYXRlLm5vdygpfWApO1xuXG4gIC8vIGluaXRpYWxpemUgc2xpZGVycyBhbHJlYWR5IG9uIHBhZ2VcbiAgdGhpcy5pbml0aWFsaXplU2xpZGVycygpO1xuXG4gIC8vIGJpbmQgZXZlbnRzIHRvIGluaXRpYWxpemUgc2xpZGVycyByZWFsIHRpbWVcbiAgdGhpcy5iaW5kRXZlbnRzKCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTbGlkZXJJbml0aWFsaXplcjtcblxuU2xpZGVySW5pdGlhbGl6ZXIucHJvdG90eXBlLmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgXCJET01Db250ZW50TG9hZGVkXCIsXG4gICAgdGhpcy5pbml0aWFsaXplU2xpZGVycy5iaW5kKHRoaXMpXG4gICk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgXCJiZW9uLmJ1ZGR5LmVsZW1lbnRzLmhhbmRsZS5pdGVtLmluamVjdC5zdWNjZXNzXCIsXG4gICAgdGhpcy5pbml0aWFsaXplU2xpZGVyRnJvbUluamVjdGlvbi5iaW5kKHRoaXMpXG4gICk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgXCJiZW9uLmJ1ZGR5LmluamVjdC5hZnRlclwiLFxuICAgIHRoaXMuaW5pdGlhbGl6ZVNsaWRlckZyb21JbmplY3Rpb24uYmluZCh0aGlzKVxuICApO1xufTtcblxuU2xpZGVySW5pdGlhbGl6ZXIucHJvdG90eXBlLmluaXRpYWxpemVTbGlkZXJzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2xpZGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgXCIuYmVvbi1zbGlkZXI6bm90KC5zbGlkZXItaW5pdGlhbGl6ZWQpXCJcbiAgKTtcblxuICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzbGlkZXJzKS5mb3JFYWNoKFxuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCkge1xuICAgICAgdGhpcy5pbml0aWFsaXplU2xpZGVyKGVsZW1lbnQsIFwiRE9NQ29udGVudExvYWRlZFwiKTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcbn07XG5cblNsaWRlckluaXRpYWxpemVyLnByb3RvdHlwZS5pbml0aWFsaXplU2xpZGVyRnJvbUluamVjdGlvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICB2YXIgZWxlbWVudCA9IGV2ZW50LmRldGFpbC5lbGVtZW50O1xuICB2YXIgY29udGFpbmVyID0gZXZlbnQuZGV0YWlsLmNvbnRhaW5lcjtcblxuICB2YXIgYmVvblNsaWRlcnMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChcbiAgICBcIi5iZW9uLXNsaWRlcjpub3QoLnNsaWRlci1pbml0aWFsaXplZClcIlxuICApO1xuXG4gIGlmIChiZW9uU2xpZGVycykge1xuICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJlb25TbGlkZXJzKS5mb3JFYWNoKFxuICAgICAgZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICBcIkRPTUNvbnRlbnRMb2FkZWRcIixcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplU2xpZGVyKGVsZW1lbnQsIFwiRE9NQ29udGVudExvYWRlZFwiKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pbml0aWFsaXplU2xpZGVyKGVsZW1lbnQsIFwiZnJvbV9pbmplY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgIH0uYmluZCh0aGlzKVxuICAgICk7XG4gIH1cbn07XG5cblNsaWRlckluaXRpYWxpemVyLnByb3RvdHlwZS5pbml0aWFsaXplU2xpZGVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG1ldGhvZCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBuZXcgc2xpZGVyKGVsZW1lbnQpO1xuXG4gICAgd2luZG93LmJlb25lLmRpc3BhdGNoRXZlbnQoXCJidWRkeS5zbGlkZXIuaW5pdC5hZnRlclwiLCB7XG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgfSk7XG5cbiAgICByZXNvbHZlKCk7XG4gIH0pO1xufTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgbmV3IFNsaWRlckluaXRpYWxpemVyKCk7XG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==